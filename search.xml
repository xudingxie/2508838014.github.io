<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WPF拷贝项目引用全部失效</title>
      <link href="/2023/10/18/WPF%E6%8B%B7%E8%B4%9D%E9%A1%B9%E7%9B%AE%E5%BC%95%E7%94%A8%E5%85%A8%E9%83%A8%E5%A4%B1%E6%95%88/"/>
      <url>/2023/10/18/WPF%E6%8B%B7%E8%B4%9D%E9%A1%B9%E7%9B%AE%E5%BC%95%E7%94%A8%E5%85%A8%E9%83%A8%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="WPF项目拷贝引用全部失效"><a href="#WPF项目拷贝引用全部失效" class="headerlink" title="WPF项目拷贝引用全部失效"></a>WPF项目拷贝引用全部失效</h1><p>今天接手同事的项目，运行花了一定的时间。记录一下中间踩坑的记录</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>打开压缩文件夹，没有sln文件，直接通过csproj文件打开项目。发现无法运行，提示各种环境都没有。<br>打开引用，发现所有引用全部黄色警告提示，判断所有引用失效。</p><h3 id="准备首先是Nuget包管理无法打开，点击无反应。"><a href="#准备首先是Nuget包管理无法打开，点击无反应。" class="headerlink" title="准备首先是Nuget包管理无法打开，点击无反应。"></a>准备首先是Nuget包管理无法打开，点击无反应。</h3><p>因为需要Sln文件之后才可以NuGet管理，所以应该先创建，所以可以先退出项目，会提示修改出一个sln文件。<br>点击确定，重新通过sln文件打开项目。发现Nuget包管理可以正常弹出界面。</p><h3 id="已下载，但是还是提示没有找到或配置"><a href="#已下载，但是还是提示没有找到或配置" class="headerlink" title="已下载，但是还是提示没有找到或配置"></a>已下载，但是还是提示没有找到或配置</h3><p>Nuget包会自动提示下载那些已经配置的包，下载完成后还是提示，重新启动项目还是会报错。<br>错误提示类似这样，开头就是提示包没有。<br><a href="https://imgse.com/i/p9lEmLD"><img src="https://s1.ax1x.com/2023/04/28/p9lEmLD.md.png" alt="p9lEmLD.md.png"></a></p><p>怀疑是NUGET的预编译的大坑。编译的记录报错下来了，所以我们需要重新生成。<br>打开csproj项目，删除文件内下面所有内容：</p><pre class="language-none"><code class="language-none">&lt;Import Project&#x3D;&quot;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&quot; Condition&#x3D;&quot;Exists(&#39;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#39;)&quot; &#x2F;&gt; &lt;Target Name&#x3D;&quot;EnsureNuGetPackageBuildImports&quot; BeforeTargets&#x3D;&quot;PrepareForBuild&quot;&gt;   &lt;PropertyGroup&gt;     &lt;ErrorText&gt;这台计算机上缺少此项目引用的 NuGet 程序包。使用“NuGet 程序包还原”可下载这些程序包。有关更多信息，请参见 http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;322105。缺少的文件是 &#123;0&#125;。&lt;&#x2F;ErrorText&gt;   &lt;&#x2F;PropertyGroup&gt;   &lt;Error Condition&#x3D;&quot;!Exists(&#39;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#39;)&quot; Text&#x3D;&quot;$([System.String]::Format(&#39;$(ErrorText)&#39;, &#39;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#39;))&quot; &#x2F;&gt; &lt;&#x2F;Target&gt;</code></pre><p>删除完毕，重新打开。问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win服务-知错就改</title>
      <link href="/2023/10/18/win%E6%9C%8D%E5%8A%A1-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/"/>
      <url>/2023/10/18/win%E6%9C%8D%E5%8A%A1-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="win服务的坑"><a href="#win服务的坑" class="headerlink" title="win服务的坑"></a>win服务的坑</h1><h2 id="1-系统错误5，拒绝访问"><a href="#1-系统错误5，拒绝访问" class="headerlink" title="1 系统错误5，拒绝访问"></a>1 系统错误5，拒绝访问</h2><p>已经管理员依旧现实拒绝访问5<br><a href="https://imgse.com/i/p9BjHUK"><img src="https://s1.ax1x.com/2023/05/10/p9BjHUK.md.png" alt="p9BjHUK.md.png"></a>  </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>在任务管理器中选择对应的服务，右键选择打开服务。找到对应的服务<br><a href="https://imgse.com/i/p9Bjjvd"><img src="https://s1.ax1x.com/2023/05/10/p9Bjjvd.png" alt="p9Bjjvd.png"></a>  </li><li>请检查登陆，是不是本地用户登陆。请选择本地系统账户。<br><a href="https://imgse.com/i/p9Bvmbq"><img src="https://s1.ax1x.com/2023/05/10/p9Bvmbq.png" alt="p9Bvmbq.png"></a><br>这个时候重新启动服务执行成功</li></ol><pre class="language-cmd" data-language="cmd"><code class="language-cmd">net start 服务名称</code></pre><p>这是临时补救方案，重新安装还是会出现问题。<br>下面是永久方案。<br>在项目中点击ProjectInstaller.cs<br>点击serviceProcessInstaller1,属性页中把Account修改成为LocalSystem<br><a href="https://imgse.com/i/p9BxQeI"><img src="https://s1.ax1x.com/2023/05/10/p9BxQeI.png" alt="p9BxQeI.png"></a>  </p><ol start="3"><li>如果步骤2在报错的时候还是提示错误，右键选择属性，把禁用修改成为自动或者手动<br><a href="https://imgse.com/i/p9BvA2Q"><img src="https://s1.ax1x.com/2023/05/10/p9BvA2Q.png" alt="p9BvA2Q.png"></a></li></ol><h2 id="2-系统错误，无法启动服务，原因可能是已经被禁用或与其相关联的设备没有启动。"><a href="#2-系统错误，无法启动服务，原因可能是已经被禁用或与其相关联的设备没有启动。" class="headerlink" title="2 系统错误，无法启动服务，原因可能是已经被禁用或与其相关联的设备没有启动。"></a>2 系统错误，无法启动服务，原因可能是已经被禁用或与其相关联的设备没有启动。</h2><p>卸载安装之后，提示如下错误<br><a href="https://imgse.com/i/p9Bv8xJ"><img src="https://s1.ax1x.com/2023/05/10/p9Bv8xJ.md.png" alt="p9Bv8xJ.md.png"></a><br>但是查看依存关系，发现并没有任何依存。<br><a href="https://imgse.com/i/p9Bv0PO"><img src="https://s1.ax1x.com/2023/05/10/p9Bv0PO.png" alt="p9Bv0PO.png"></a><br>可能是你卸载了，但是没有死透。<br>我就是，之前有打开任务管理器此时窗口A，进入服务界面，右键打开服务了，此时打开新窗口B。<br>查看服务，然后窗口B最小化。<br>此时卸载服务a，卸载流程很顺利，但是此时把最小化的窗口B打开发现服务a还在，右键刷新服务a也在。<br>此时应该关闭这个窗口B，重新安装即可。  </p><h2 id="3-如果服务的stop有问题，就无法关闭服务"><a href="#3-如果服务的stop有问题，就无法关闭服务" class="headerlink" title="3 如果服务的stop有问题，就无法关闭服务"></a>3 如果服务的stop有问题，就无法关闭服务</h2><p>当服务的关闭的代码运行会出现错误，这个时候服务就无法通过手动或者直接的关闭方案。只能强行关闭。  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">taskkill &#x2F;f &#x2F;pid pidNum</code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中事件，action等讲解</title>
      <link href="/2023/10/18/CSharp%E4%B8%AD%E4%BA%8B%E4%BB%B6%EF%BC%8Caction%E7%AD%89%E8%AE%B2%E8%A7%A3/"/>
      <url>/2023/10/18/CSharp%E4%B8%AD%E4%BA%8B%E4%BB%B6%EF%BC%8Caction%E7%AD%89%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="delegate-event-Action-Func关系讲解"><a href="#delegate-event-Action-Func关系讲解" class="headerlink" title="delegate,event,Action,Func关系讲解"></a>delegate,event,Action,Func关系讲解</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><p>delegate是一切的基础。</p></li><li><p>event是实践中优化的使用，比delegate多了点限制。现在常用：比如winform中的内容。</p></li><li><p>Action，Func是delegate的更加的简写方案。</p></li></ul><h2 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h2><p>这个定义的是一个委托类型。也相当于方法的类型（指定了输入输出的内容）。</p><p>delegate用法目前两种：</p><ol><li>函数泛型</li><li>订阅发布</li></ol><p>理解下来其实都是一样的做法，它们都是订阅。这个函数类型其实可以理解成为一样的。</p><blockquote><p>前者是把声明出来的delegate作为函数的类型来使用。</p><p>后者是把声明出来的方法类型再次实例化。具体到某种方法A，开放A出来给所有程序调用去订阅。订阅的要求就是方法B必须与方法A具有相同的输入输出。</p></blockquote><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>可以指定某种方法的使用以及返回值</p><p>定义泛型方法和相对应的方法</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public delegate double MathFunction(double x, double y);    public double CatDie(double oldVal, double currentVal)    &#123;        Console.WriteLine(&quot;cat die&quot;);        return oldVal - currentVal;    &#125;    public double CatBirth(double current, double newVal)    &#123;        Console.WriteLine(&quot;cat give birth&quot;);        return newVal + current;    &#125;    public void GetActualCatNum(MathFunction mathFunction,double x,double y)    &#123;        var value&#x3D;mathFunction(x,y);        Console.WriteLine(&quot;current value:&quot;+value);    &#125;&#125;</code></pre><p>在另外的类中使用</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();cat.GetActualCatNum(cat.CatDie, 12, 3);Console.ReadLine();</code></pre><h3 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h3><p>工作中经常使用的对象：订阅一个内容。让其他方法去接收订阅的消息。</p><p>在多线程的环境中非常常见。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>演示一个简单订阅发布模式；</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public delegate double MathFunction(double x, double y);    public MathFunction CatChange;&#125;</code></pre><p>订阅者：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Mouse&#123;    public double CatAlarm(double x,double y)    &#123;        Console.WriteLine(&quot;Cat number change&quot;);        return 0;    &#125;&#125;</code></pre><p>订阅与发生地点：</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();Mouse mouse &#x3D; new Mouse();cat.CatChange +&#x3D; mouse.CatAlarm;cat.CatChange.Invoke(28,4);</code></pre><blockquote><p>对案例进行分析。在cat中创建一个发布者，mouse创建了一个订阅者。在第三方进行订阅，并触发猫数目变化。此时订阅者就收到消息，打印相应内容。</p></blockquote><h4 id="用法讲解"><a href="#用法讲解" class="headerlink" title="用法讲解"></a>用法讲解</h4><p>示例中使用+&#x3D;，此外还有-&#x3D; ，&#x3D;这几个符号来进行订阅发布。</p><p>多个订阅，按照顺序依次向下。</p><p>多个订阅，其中一个抛出异常，后续订阅不进行。</p><p>多个订阅，异步的订阅会以异步的形式完成。</p><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p>这个是为了解决delegate的一些问题出现的。比如前者&#x3D;这个有可能会误用导致前面的订阅内容清空，并不是很好的情况。</p><p>事件event是一种特殊的委托，它只能+&#x3D;，-&#x3D;，不能直接用&#x3D;。event在定义类中（发布者）是可以直接&#x3D;的，但是在其他类中（订阅者）就只能+&#x3D; -&#x3D;了，<strong>也就是说发布者发布一个事件后，订阅者针对他只能进行自身的订阅和取消。</strong></p><p>相比较delegate的一些优化内容：</p><ul><li>订阅者只能进行自身的订阅和取消，不能全部清空。</li><li>事件的触发只能在事件的发布者内容，外部不能触发。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>事件的发布者：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public delegate double MathFunction(double x, double y);    public event MathFunction CatEvent;    public void OnCatEvent()    &#123;        CatEvent(38, 5);        CatEvent.Invoke(38, 5);    &#125;&#125;</code></pre><p>事件的订阅者</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Mouse&#123;    public double CatAlarm(double x,double y)    &#123;        Console.WriteLine(&quot;Cat number change&quot;);        return 0;    &#125;&#125;</code></pre><p>事件进行订阅</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();Mouse mouse &#x3D; new Mouse();cat.CatEvent +&#x3D; mouse.CatAlarm;</code></pre><h4 id="规范使用"><a href="#规范使用" class="headerlink" title="规范使用"></a>规范使用</h4><p>经过长久的经验积累后，人们发现，绝大多数事件的定义，是用public delegate void XXX(object sender, EventArgs e);这样一个委托原型进行定义的，是一件重复性的工作，于是，EventHandler应运而生。它的出现就是为了避免这种重复性工作，并建议尽量使用该类型作为事件的原型。</p><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;@sender: 引发事件的对象&#x2F;&#x2F;@e: 传递的参数public delegate void EventHandler(object sender, myEventArgs e);&#x2F;&#x2F;使用public event EventHandler emd;</code></pre><p>其中：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class MyEventArgs:EventArgs&#123;    public string name;&#125;</code></pre><p>常见命名规范：以EventHandler结尾，以EventArgs结尾</p><h2 id="Action，Func"><a href="#Action，Func" class="headerlink" title="Action，Func"></a>Action，Func</h2><p>本文最开始探讨委托，然后直接顺到了事件的相关话题上。其实，关于委托还有一个重点话题漏掉了，那就是Func与Action。</p><p>在委托delegate出现了很久以后，微软的.NET设计者们终于领悟到，其实所有的委托定义都可以归纳并简化成只用Func与Action这两个语法糖来表示。其中，Func代表有返回值的委托，Action代表无返回值的委托。有了它们两，我们以后就不再需要用关键字delegate来定义委托了。</p><p>比如一下方案：</p><pre class="language-C#" data-language="C#"><code class="language-C#">public delegate double MathFunction1(double x, double y);public delegate double MathFunction2(double x, double y);&#x2F;&#x2F;无论在泛型方案还是说在发布订阅中都完全相同的作用。没有区别。&#x2F;&#x2F;完全可以直接使用Func&lt;double,double,double&gt;&#x2F;&#x2F;来代替。</code></pre><blockquote><p>综上Action，Func就是delegate的简写方法。</p></blockquote><h3 id="简化delegate中的示例"><a href="#简化delegate中的示例" class="headerlink" title="简化delegate中的示例"></a>简化delegate中的示例</h3><p>此处就简写一下上面的示例</p><h4 id="泛型方案"><a href="#泛型方案" class="headerlink" title="泛型方案"></a>泛型方案</h4><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public void GetActualCatNum_2(Func&lt;double,double,double&gt; myFunc, double x, double y)    &#123;        var value &#x3D; myFunc(x, y);        Console.WriteLine(&quot;current value:&quot; + value);    &#125;&#125;</code></pre><p>使用泛型</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();cat.GetActualCatNum_2(cat.CatDie, 12, 3);</code></pre><h4 id="发布订阅-delegate篇"><a href="#发布订阅-delegate篇" class="headerlink" title="发布订阅-delegate篇"></a>发布订阅-delegate篇</h4><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public Func&lt;double,double,double&gt; CatChange_2;&#125;</code></pre><p>订阅者：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Mouse&#123;    public double CatAlarm(double x,double y)    &#123;        Console.WriteLine(&quot;Cat number change&quot;);        return 0;    &#125;&#125;</code></pre><p>订阅与发生地点：</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();Mouse mouse &#x3D; new Mouse();cat.CatChange_2 +&#x3D; mouse.CatAlarm;cat.CatChange_2.Invoke(28,4);</code></pre><h4 id="发布订阅-event篇"><a href="#发布订阅-event篇" class="headerlink" title="发布订阅-event篇"></a>发布订阅-event篇</h4><p>发布者：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Cat&#123;    public event Func&lt;double, double, double&gt; CatEvent_2;    public void OnCatEvent()    &#123;        CatEvent_2(40, 3);        CatEvent_2.Invoke(40, 3);    &#125;&#125;</code></pre><p>订阅者：</p><pre class="language-C#" data-language="C#"><code class="language-C#">class Mouse&#123;    public double CatAlarm(double x,double y)    &#123;        Console.WriteLine(&quot;Cat number change&quot;);        return 0;    &#125;&#125;</code></pre><p>进行订阅：</p><pre class="language-C#" data-language="C#"><code class="language-C#">Cat cat &#x3D; new Cat();Mouse mouse &#x3D; new Mouse();cat.CatEvent_2 +&#x3D; mouse.CatAlarm;cat.OnCatEvent();</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[参考资料](<a href="https://zhuanlan.zhihu.com/p/413733828">C#中委托（delegate）与事件（event）的快速理解 - 知乎 (zhihu.com)</a>)</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub绑定域名</title>
      <link href="/2023/10/18/GitHub%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/10/18/GitHub%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub绑定域名"><a href="#GitHub绑定域名" class="headerlink" title="GitHub绑定域名"></a>GitHub绑定域名</h1><p>今天突发奇想把github的博客绑定好上自己的域名。下面是一些步骤和遇到的问题</p><p>步骤：</p><ol><li>记录ipv4的信息。</li><li>将域名绑定到原本的github的page的地址</li><li>在github的pages中绑定域名。</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="不满足启用https的条件"><a href="#不满足启用https的条件" class="headerlink" title="不满足启用https的条件"></a>不满足启用https的条件</h3><p>enforce https为灰色</p><p>提示：There isn’t a GitHub Pages site here. If you’re trying to publish one, read the full documentation to learn how to set up GitHub Pages for your repository, organization, or user account.</p><p>解决方案：</p><ol><li>cloundflare中开启了tls。将tls关闭。删除github中绑定的域名。重新添加。</li><li>该方案来自网络。此处仅仅是收集做参考。可以删除域名之后，重新添加并且绑定。即可。</li></ol><h3 id="绑定成功但是页面没有显示。直接为空。"><a href="#绑定成功但是页面没有显示。直接为空。" class="headerlink" title="绑定成功但是页面没有显示。直接为空。"></a>绑定成功但是页面没有显示。直接为空。</h3><p>我在操作的时候开始是没有按照步骤完成的。首先进行了操作2.并没有进行操作1就会导致这个问题。</p><h3 id="绑定成功访问并没有访问到我的页面。但是界面中已经出现github的404"><a href="#绑定成功访问并没有访问到我的页面。但是界面中已经出现github的404" class="headerlink" title="绑定成功访问并没有访问到我的页面。但是界面中已经出现github的404."></a>绑定成功访问并没有访问到我的页面。但是界面中已经出现github的404.</h3><p>这个我没有遇到，但是此处给一个排查的思路。</p><p>我是在GitHub的绑定域名已经成功，但是此时还没有启用https。此时我如果在github的界面中进行删除绑定的域名就会出现这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 域名绑定 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区分不同的下载版本</title>
      <link href="/2023/10/18/%E5%8C%BA%E5%88%86%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%89%88%E6%9C%AC/"/>
      <url>/2023/10/18/%E5%8C%BA%E5%88%86%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="下载版本区别"><a href="#下载版本区别" class="headerlink" title="下载版本区别"></a>下载版本区别</h1><p>在网上下载软件的时候会有各种版本的区别。<br><a href="https://imgse.com/i/p9YLOB9"><img src="https://s1.ax1x.com/2023/05/04/p9YLOB9.md.png" alt="p9YLOB9.md.png"></a><br>特别是github上，所以怎么区别各种版本呢，它们之间有什么区别。  </p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>普通windows基本就是下载win_x86_64版本就好，或者说直接amd-64(intel自己开发的已经自己都不用了改用amd64)  </p><h2 id="架构区分"><a href="#架构区分" class="headerlink" title="架构区分"></a>架构区分</h2><p>arm架构与x86架构都是架构上的区别，最重要的区分应该就是指令集上的区分</p><ul><li>arm简单指令集RISC</li><li>x86复杂指令集CISC</li></ul><h2 id="计算区别"><a href="#计算区别" class="headerlink" title="计算区别"></a>计算区别</h2><p>arm架构与x86架构都有32位与64位运算的区别。<br>arm架构是由arm开发，于2011年发布了ARMv8 64位架构，这是为了下一代ARM指令集架构工作若干年后的结晶。为了基于原有的原则和指令集，开发一个简明的64位架构，ARMv8使用了两种执行模式，AArch32和AArch64。顾名思义，一个运行32位代码，一个运行64位代码（详情戳）。ARM设计的巧妙之处，是处理器在运行中可以无缝地在两种模式间切换。这意味着64位指令的解码器是全新设计的，不用兼顾32位指令，而处理器依然可以向后兼容。<br>对于64位计算，ARM和Intel也有一些显著区别。Intel并没有开发64位版本的x86指令集。64位的指令集名为x86-64（有时简称为x64），实际上是AMD设计开发的。Intel想做64位计算，它知道如果从自己的32位x86架构进化出64位架构，新架构效率会很低，于是它搞了一个新64位处理器项目名为IA64。由此制造出了Itanium系列处理器。<br>同时AMD知道自己造不出能与IA64兼容的处理器，于是它把x86扩展一下，加入了64位寻址和64位寄存器。最终出来的架构，就是 AMD64，成为了64位版本的x86处理器的标准。IA64项目并不算得上成功，现如今基本被放弃了。Intel最终采用了AMD64。Intel当前给出的移动方案，是采用了AMD开发的64位指令集（有些许差别）的64位处理器。<br>综合一下，其实x86架构中就是intel开发了x86指令集，amd开发了x64指令集，intel与amd互相授权对方使用各自的指令集。<br>arm架构都是由arm开发的x86与x64，可以向后兼容。  </p><h2 id="使用场景区别"><a href="#使用场景区别" class="headerlink" title="使用场景区别"></a>使用场景区别</h2><p>由于架构设计上的区别，arm的功耗比较低，所以最常用于移动领域，m1芯片就是arm架构。<br>x86架构就是服务器与pc上的老大。</p>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6的新增语法</title>
      <link href="/2023/10/18/es6%E7%9A%84%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/10/18/es6%E7%9A%84%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="es的特殊语法"><a href="#es的特殊语法" class="headerlink" title="es的特殊语法"></a>es的特殊语法</h1><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>有的时候对象的某些属性我们并不需要，然后它的存在又影响自己进行赋值或者遍历的时候就需要把这个属性给剔除出来。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  gender<span class="token operator">:</span> <span class="token string">'female'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> gender<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'Alice', age: 30 &#125;</span></code></pre><p>在这个示例代码中，我们定义了一个名为 <code>obj</code> 的对象，它包含了 <code>name</code>、<code>age</code> 和 <code>gender</code> 三个属性。然后，我们使用对象解构语法来将 <code>gender</code> 属性剔除出去，并将剩余的属性存储在名为 <code>rest</code> 的新对象中。最后，我们使用 <code>console.log()</code> 方法来输出 <code>rest</code> 对象的内容，可以看到它只包含了 <code>name</code> 和 <code>age</code> 两个属性。</p><p>需要注意的是，对象解构语法只是将一个对象中的属性提取出来，并将它们存储在新的变量中。如果你需要修改原始对象，你仍然需要使用对象的赋值语法来进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts的特殊类型</title>
      <link href="/2023/10/18/ts%E7%9A%84%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/10/18/ts%E7%9A%84%E7%89%B9%E6%AE%8A%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="ts中的特殊类型"><a href="#ts中的特殊类型" class="headerlink" title="ts中的特殊类型"></a>ts中的特殊类型</h1><h2 id="Record-lt-K-T-gt"><a href="#Record-lt-K-T-gt" class="headerlink" title="Record&lt;K,T&gt;"></a>Record&lt;K,T&gt;</h2><p>有的时候我们并不能知道后台传递过来对象中的属性的名称，与属性的数目。可能只是知道对象的名称。这个时候可以怎么接收有一个特殊的类型***RecordRecord&lt;K, T&gt;***类型。</p><p><code>Record</code> 是 TypeScript 中的一个泛型类型，它表示一个由指定类型的属性名和属性值组成的对象类型。具体来说，<code>Record&lt;K, T&gt;</code> 表示一个对象类型，它的属性名为类型 <code>K</code> 中的值，属性值为类型 <code>T</code> 中的值。</p><p>例如，如果你想要定义一个类型为 <code>&#123; name: string, age: number &#125;</code> 的对象类型，你可以使用 <code>Record</code> 类型来定义它： </p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">'name'</span> <span class="token operator">|</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>在这个示例代码中，我们使用 <code>Record</code> 类型来定义了一个名为 <code>Person</code> 的类型，它的属性名为 <code>&#39;name&#39;</code> 和 <code>&#39;age&#39;</code>，属性值为 <code>string</code> 和 <code>number</code>。然后，我们定义了一个名为 <code>person</code> 的变量，它的类型为 <code>Person</code>，并将一个包含了 <code>name</code> 和 <code>age</code> 两个属性的对象赋值给它。</p><p>需要注意的是，<code>Record</code> 类型只是一个泛型类型，它并不会创建一个对象。如果你需要创建一个对象，你仍然需要使用对象字面量或者 <code>new</code> 关键字来进行创建。</p>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生产开发环境的分别配置</title>
      <link href="/2023/10/18/vue%E7%94%9F%E4%BA%A7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%86%E5%88%AB%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/10/18/vue%E7%94%9F%E4%BA%A7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%86%E5%88%AB%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vue不同模式下基础配置实现"><a href="#vue不同模式下基础配置实现" class="headerlink" title="vue不同模式下基础配置实现"></a>vue不同模式下基础配置实现</h1><p>有的时候开发环境与实际环境还是有一定的区别。需要我们根据情况选择部分内容是否启用。比如：后台服务的网址、是否启用代理等。所以最舒服的情况下可以把这些配置放在一起。方便我们使用。</p><p>示例：</p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed/pictures/Code_w9YFkNIli0.png" alt="image-20231016103348389"></p><p>文件名称：</p><pre><code>- .env- .env.production- .env.development</code></pre><h2 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h2><p>通用环境配置，也可以说是基础配置。</p><pre class="language-latex" data-language="latex"><code class="language-latex"># 资源公共路径,需要以 /开头和结尾VITE_PUBLIC_PATH = '/'# 是否hash路由模式VITE_USE_HASH = false# base apiVITE_BASE_API = '/api'# 是否启用MOCKVITE_USE_MOCK = false# 是否启用压缩VITE_USE_COMPRESS = true# 压缩类型VITE_COMPRESS_TYPE = gzip# api路径VITE_BASE_URL = 'http://localhost:3003'VITE_RESOURCE_BASE_URL = 'http://localhost:3003'</code></pre><h2 id="env-production"><a href="#env-production" class="headerlink" title=".env.production"></a>.env.production</h2><p>生产环境。下的配置。</p><h2 id="env-development"><a href="#env-development" class="headerlink" title=".env.development"></a>.env.development</h2><p>开发环境下的配置。</p><h2 id="信息的引入"><a href="#信息的引入" class="headerlink" title="信息的引入"></a>信息的引入</h2><p>在对应的文件中引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_URL</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过这样的方案。就比较容易做一些全局的管理了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue按需引入</title>
      <link href="/2023/10/18/vue%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5/"/>
      <url>/2023/10/18/vue%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="vue按需引入"><a href="#vue按需引入" class="headerlink" title="vue按需引入"></a>vue按需引入</h1><p><a href="https://juejin.cn/post/7232223238808404026">vue3+Vite+Ts 中使用自动引入，解放双手 - 掘金 (juejin.cn)</a></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>vue组件与element ui的快速引入</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="unplugin-auto-import"><a href="#unplugin-auto-import" class="headerlink" title="unplugin-auto-import"></a>unplugin-auto-import</h3><p>这是用于配置的关键插件</p><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><ol><li><p>安装vite插件：<code>unplugin-auto-import</code> yarn add unplugin-auto-import -D</p></li><li><pre><code class="ts">import &#123; defineConfig &#125; from &#39;vite&#39;;import vue from &#39;@vitejs/plugin-vue&#39;;import AutoImport from &#39;unplugin-auto-import/vite&#39;;export default defineConfig(&#123;  plugins: [    vue(),    AutoImport(&#123;      // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等      imports: [&#39;vue&#39;],    &#125;),  ],&#125;);<pre class="language-none"><code class="language-none">### element ui组件的自动引入其中注意，elmessage在js中也就是个变量与ref，reactive差不多的类型。所以这个的引入需要自己思考。&gt; 参考官网 用到&#96;unplugin-vue-components &#96;和 &#96;unplugin-auto-import&#96;这两款插件&#96;&#96;&#96;ts&#x2F;&#x2F; vite.config.tsimport &#123; defineConfig &#125; from &#39;vite&#39;import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39;import Components from &#39;unplugin-vue-components&#x2F;vite&#39;import &#123; ElementPlusResolver &#125; from &#39;unplugin-vue-components&#x2F;resolvers&#39;export default defineConfig(&#123;  &#x2F;&#x2F; ...  plugins: [    &#x2F;&#x2F; ...    AutoImport(&#123;    &#x2F;&#x2F; 自动导入element相关函数，如：ElMessage, ElMessageBox..      resolvers: [ElementPlusResolver()],    &#125;),    Components(&#123;    &#x2F;&#x2F; 自动导入element相关组件      resolvers: [ElementPlusResolver()],    &#125;),  ],&#125;)</code></pre></code></pre></li></ol><p>说明：</p><p><code>unplugin-auto-import</code>会默认在要目录生成<code>auto-imports.d.ts</code>文件，<code>unplugin-vue-components</code>对应会在根目录生成<code>components.d.ts</code>文件，分别描述自动导入的 API、component。通过在tsconfig.json的include中引入对应配置文件，避免TS报错。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token comment">// 配置文件生成位置，默认是根目录 /auto-imports.d.ts</span>  <span class="token comment">// dts: './auto-imports.d.ts',</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token comment">// 配置文件生成位置，默认是根目录 /components.d.ts</span>  <span class="token comment">// dts: './components.d.ts',</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-可能遇到ts-eslint不识别而导入报错的问题"><a href="#1-可能遇到ts-eslint不识别而导入报错的问题" class="headerlink" title="1. 可能遇到ts,eslint不识别而导入报错的问题"></a>1. 可能遇到ts,eslint不识别而导入报错的问题</h3><p>1、typescript 报错：<code>&#39;reactive&#39; is not defined.</code> 原因：TS未识别到vue api,没有相应的模块声明文件</p><p>处理：在vite中配置并生成auto-imports.d.ts ，并在tsconfig.json中引入</p><p>&#x2F;&#x2F; vite.config.js</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// vite.config.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span>      imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 生成自动导入的TS声明文件</span>       dts<span class="token operator">:</span> <span class="token string">"./auto-imports.d.ts"</span><span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&#x2F;&#x2F; tsconfig.json</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>     <span class="token string-property property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"src/**/*.d.ts"</span><span class="token punctuation">,</span>        <span class="token string">"./*.d.ts"</span><span class="token punctuation">,</span>        <span class="token string">"./auto-imports.d.ts"</span> <span class="token comment">// 导入上一步生成的配置文件</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h2 id="eslint不识别报错-error-39-reactive-39-is-not-defined-no-undef"><a href="#eslint不识别报错-error-39-reactive-39-is-not-defined-no-undef" class="headerlink" title="eslint不识别报错 error &#39;reactive&#39; is not defined no-undef"></a>eslint不识别报错 <code>error &#39;reactive&#39; is not defined no-undef</code></h2><p>原因：未配置自动导入相应的eslint规则<br>处理：通过autoimport中的配置生成对应<code>.eslintrc-auto-import.json</code>配置文件，并在.eslintrc中引入 生成之后enbled:false 避免重复生成</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// vite.config.js  </span><span class="token punctuation">&#123;</span><span class="token comment">// ......</span> <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      resolvers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dts<span class="token operator">:</span> <span class="token string">"/auto-import.d.ts"</span><span class="token punctuation">,</span>      eslintrc<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 1、改为true用于生成eslint配置。2、生成后改回false，避免重复生成消耗</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-配置src-x2F-component目录下的组件自动引入-96"><a href="#3-配置src-x2F-component目录下的组件自动引入-96" class="headerlink" title="3 配置src&#x2F;component目录下的组件自动引入&#96;"></a>3 配置src&#x2F;component目录下的组件自动引入&#96;</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">'unplugin-auto-import/vite'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">'unplugin-vue-components/vite'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span>      imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 指定自动导入的组件位置，默认是 src/components</span>       dirs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'src/components'</span><span class="token punctuation">,</span><span class="token string">'src/otherComponents'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue运行提示创建文件夹权限错误</title>
      <link href="/2023/10/18/vue%E8%BF%90%E8%A1%8C%E6%8F%90%E7%A4%BA%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF/"/>
      <url>/2023/10/18/vue%E8%BF%90%E8%A1%8C%E6%8F%90%E7%A4%BA%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%83%E9%99%90%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="vue运行出错"><a href="#vue运行出错" class="headerlink" title="vue运行出错"></a>vue运行出错</h1><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed/pictures/image-20231017115515390.png" alt="image-20231017115515390"></p><p>错误原因：</p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed/pictures/image-20231017131804640.png" alt="image-20231017131804640"></p><p>其中dts路径错误</p><p>之前错误的路径：</p><pre class="language-text" data-language="text"><code class="language-text">dts:"/auto-imports.d.ts"</code></pre><p>，表示写在根目录下某个文件。根目录又是系统文件集中区域，nodeJs是没有相应的权限的。修改成上图所示路径后问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现字符串超出部分隐藏</title>
      <link href="/2023/10/18/vue%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E9%9A%90%E8%97%8F/"/>
      <url>/2023/10/18/vue%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%B6%85%E5%87%BA%E9%83%A8%E5%88%86%E9%9A%90%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="vue实现字符串超出部分隐藏"><a href="#vue实现字符串超出部分隐藏" class="headerlink" title="vue实现字符串超出部分隐藏"></a>vue实现字符串超出部分隐藏</h1><p>有的时候在一些地方会放置字符串。比如昵称。但是往往由于布局的设置，如果完完整整的显示出出来，会出现比如压榨后面的组件的空间。导致组件错位等。所以在这个时候我们希望能把超出部分的内容给隐藏起来。</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;span :title&#x3D;&quot;props.title&quot; class&#x3D;&quot;title-span&quot;&gt;&#123;&#123; props.title &#125;&#125;&lt;&#x2F;span&gt;</code></pre><p>对应的样式：</p><pre class="language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.title-span </span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment">//要求是这个格式</span>    <span class="token property">max-width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span><span class="token comment">//控制最大的宽度</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token comment">// /* 禁止文本换行 */</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment">// /* 超出宽度的文本用省略号代替 */</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">// /* 超出容器宽度的部分进行隐藏 */</span><span class="token punctuation">&#125;</span></code></pre><p>其中display：block是因为只有块级元素才有宽与高，但是span是行级元素。</p>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apifox的使用</title>
      <link href="/2023/10/18/apifox%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/10/18/apifox%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Apifox的使用"><a href="#Apifox的使用" class="headerlink" title="Apifox的使用"></a>Apifox的使用</h1><p>看到有推荐这个的看到了这个软件。于是自己拿来使用。现在做一些记录。</p><h2 id="关于mock的部分"><a href="#关于mock的部分" class="headerlink" title="关于mock的部分"></a>关于mock的部分</h2><p>语法请参考<a href="http://mockjs.com/examples.html#DPD">Mock.js (mockjs.com)</a></p><h3 id="1-1-在固定的一组字符串中返回其中一个"><a href="#1-1-在固定的一组字符串中返回其中一个" class="headerlink" title="1-1. 在固定的一组字符串中返回其中一个"></a>1-1. 在固定的一组字符串中返回其中一个</h3><pre class="language-mockjs" data-language="mockjs"><code class="language-mockjs">&#123;  &quot;message&quot;: &quot;&quot;,  &quot;success&quot;: true,  &quot;content&quot;: &#123;    &quot;code&quot;: &quot;@city()&quot;,    &quot;status|1&quot;: [&#39;Auto&#39;,&#39;Manual&#39;,&#39;Stop&#39;,&#39;Warn&#39;,&#39;error&#39;    ],    &quot;stopNum&quot;:&#39;@integer(2,    500)&#39;,    &quot;workLastingTime&quot;:‘@Date&#39;,    &quot;highestCTTime&quot;:‘@Date&#39;,    &quot;stopLastingTime&quot;:‘@Date&#39;,    &quot;data|1&quot;: [      &#123;        &quot;temp&quot;:&#39;@name&#39;,        &quot;phone&quot;:&#39;@phone&#39;      &#125;    ]  &#125;,  &quot;errorCode&quot;: 0&#125;</code></pre><h3 id="1-2-特点：返回固定长度的浮点数组"><a href="#1-2-特点：返回固定长度的浮点数组" class="headerlink" title="1-2. 特点：返回固定长度的浮点数组"></a>1-2. 特点：返回固定长度的浮点数组</h3><pre class="language-mockjs" data-language="mockjs"><code class="language-mockjs">&#123;    &quot;message&quot;: &quot;&quot;,    &quot;success&quot;: true,    &quot;content&quot;: &#123;        &quot;uclX&quot;: 3.9590502,        &quot;lclX&quot;: 3.02845,        &quot;uclR&quot;: 0.80858266,        &quot;lclR&quot;: 0,        &quot;averages|9999&quot;: [            &#39;@float(3, 4.5, 2,3)&#39;        ],        &quot;ranges|9999&quot;: [            &#39;@float(0, 1, 2,3)&#39;        ]    &#125;,    &quot;errorCode&quot;: 0&#125;</code></pre><h3 id="2-1-脚本编辑-特点：可以获取到请求携带的数据。"><a href="#2-1-脚本编辑-特点：可以获取到请求携带的数据。" class="headerlink" title="2-1. 脚本编辑-特点：可以获取到请求携带的数据。"></a>2-1. 脚本编辑-特点：可以获取到请求携带的数据。</h3><p>生成浮点数区间：</p><pre class="language-mockjs" data-language="mockjs"><code class="language-mockjs">Math.random() * (max-min) + min;</code></pre><p>实现方案</p><pre class="language-mockjs" data-language="mockjs"><code class="language-mockjs">var MockJs &#x3D; require(&#39;mockjs&#39;);&#x2F;&#x2F; 获取“智能 Mock”自动生成的 jsonvar responseJson &#x3D; fox.mockResponse.json();var productNum&#x3D;parseInt(fox.mockRequest.getParam(&#39;productType&#39;));responseJson.content.averages&#x3D;[];responseJson.content.ranges&#x3D;[];responseJson.content.uclX&#x3D;Math.random() * (4.5-4) + 4;responseJson.content.lclX&#x3D;Math.random() * (3-2) + 2;responseJson.content.uclR&#x3D;Math.random() * ( 1-0.9) + 0.9;responseJson.content.lclR&#x3D;Math.random() * ( 0.1-0) + 0;for(let i&#x3D;0;i&lt;productNum;i++)&#123;    responseJson.content.averages.push(Math.random() * ( 4.5-3) + 3)    responseJson.content.ranges.push(Math.random() * (1-0) + 0)&#125;responseJson.success&#x3D;true;fox.mockResponse.setBody(responseJson)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习路线 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
            <tag> apifox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apifox中的mock的url错误</title>
      <link href="/2023/10/18/apifox%E4%B8%AD%E7%9A%84mock%E7%9A%84url%E9%94%99%E8%AF%AF/"/>
      <url>/2023/10/18/apifox%E4%B8%AD%E7%9A%84mock%E7%9A%84url%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="知错就改Apifox-mock的url错误"><a href="#知错就改Apifox-mock的url错误" class="headerlink" title="知错就改Apifox-mock的url错误"></a>知错就改Apifox-mock的url错误</h1><h2 id="错误现象"><a href="#错误现象" class="headerlink" title="错误现象"></a>错误现象</h2><p>我在正常进行测试页面的时候，突然返回404了。我于是检查Apifox的mock内容。在apifox发送请求还是404于是判定，apifox的mock模块应该出现问题了。检查发现mock的url发生了改变。后缀跟着的是一串数字，而不是路径信息。</p><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>查询官方的<a href="https://apifox.com/help/api-mock/intro-to-mock">Mock 功能简介 | Apifox 帮助文档</a>后确定，此处的url是id模式，而不是之前的路径模式，所以之前的url才会404.现在的问题就是怎么把这个id模式修改成为路径模式。</p><p>然后一条信息抓住了我的眼球：必须以&#x2F;作为开头。转会Apifox检查。发现get的接口路径的确不知道何时修改成为完整的url而不是只有后缀的部分。修改url为之前的路径。修改完成。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改get接口的url从完整的url到部分路径部分。修改完成。</p>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知错就改 </tag>
            
            <tag> apifox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中与ts中的遍历</title>
      <link href="/2023/10/18/vue%E4%B8%AD%E4%B8%8Ets%E4%B8%AD%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2023/10/18/vue%E4%B8%AD%E4%B8%8Ets%E4%B8%AD%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中与ts中的遍历"><a href="#vue中与ts中的遍历" class="headerlink" title="vue中与ts中的遍历"></a>vue中与ts中的遍历</h1><p>在vue中经常遇见遍历某个数组或者遍历某个对象中的全部属性的情况。</p><ol><li>遍历对象中的全部属性</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;el-descriptions title&#x3D;&quot;设备基础信息&quot; :border&#x3D;&quot;true&quot;&gt;    &lt;el-descriptions-itemv-for&#x3D;&quot;(value,key) in deviceBaseData&quot;         :label&#x3D;&quot;key&quot;&gt;        &#123;&#123;value&#125;&#125;    &lt;&#x2F;el-descriptions-item&gt;&lt;&#x2F;el-descriptions&gt;</code></pre><ol start="2"><li>遍历数组中的全部内容</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;el-select v-model&#x3D;&quot;form.checkItemCode&quot;&gt;    &lt;el-optionv-for&#x3D;&quot;item in formConfig.checkItemOptions&quot;         :value&#x3D;&quot;item&quot;         :key&#x3D;&quot;item&quot;        :label&#x3D;&quot;item&quot; &#x2F;&gt;&lt;&#x2F;el-select&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ts </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger-学习路线-开始使用</title>
      <link href="/2023/08/08/Swagger-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/08/Swagger-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p><a href="https://so.csdn.net/so/search?q=Swagger&spm=1001.2101.3001.7020">Swagger</a> 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-学习路线-开始使用</title>
      <link href="/2023/08/08/Mybatis-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/08/Mybatis-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token comment">//配置以来</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//配置扫描</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.test.chat.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hyper-v虚拟机安装-Ubuntu</title>
      <link href="/2023/08/05/Hyper-v%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-Ubuntu/"/>
      <url>/2023/08/05/Hyper-v%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hypera-v虚拟机安装Ubuntu"><a href="#Hypera-v虚拟机安装Ubuntu" class="headerlink" title="Hypera-v虚拟机安装Ubuntu"></a>Hypera-v虚拟机安装Ubuntu</h1><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="开启Hypera-v"><a href="#开启Hypera-v" class="headerlink" title="开启Hypera-v"></a>开启Hypera-v</h3><ol><li>打开设置</li><li>应用</li><li>可选功能</li><li>更多Windows功能</li><li>在其中勾选开启“Hypre-V冰点击确认保存即可</li></ol><h3 id="下载Uabuntu"><a href="#下载Uabuntu" class="headerlink" title="下载Uabuntu"></a>下载Uabuntu</h3><ol><li>下载的网址：[UBuntu下载的官方网址](<a href="https://ubuntu.com/download">Get Ubuntu | Download | Ubuntu</a>)</li><li>选择下载的版本</li></ol><p>试了下，安装非常简单。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-vue3%E4%B8%8E2%E5%AF%B9%E6%AF%94/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-vue3%E4%B8%8E2%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-vue3与2对比"><a href="#vue-学习路线-vue3与2对比" class="headerlink" title="vue-学习路线-vue3与2对比"></a>vue-学习路线-vue3与2对比</h1><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202307312336144.png" alt="image-20230731233645075"></p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202307312337937.png" alt="image-20230731233748888"></p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202307312338569.png" alt="image-20230731233831523"></p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202307312339613.png" alt="image-20230731233938567"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Suspense%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Suspense%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-Suspense组件"><a href="#vue-学习路线-Suspense组件" class="headerlink" title="vue-学习路线-Suspense组件"></a>vue-学习路线-Suspense组件</h1><p>还在开发中，后续的api什么的可能改变</p><p>动态组件，作用让两个组件同时出现，异步引入</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;sun&#x2F;&gt;  &lt;Suspense&gt;      &lt;template v-solt:default&gt;          &#x2F;&#x2F;真正的组件  &lt;&#x2F;template&gt;       &lt;template v-solt:fallback&gt;&#x2F;&#x2F;加载中的时候显示的组件  &lt;&#x2F;template&gt;      &lt;&#x2F;Suspense&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;import &#123;defineAsyncComponent&#125; from &#39;vue&#39;import son from &#39;&#x2F;**&#x2F;**&#x2F;**.vue&#39;const son&#x3D;defineAsyncComponent(()&#x3D;&gt;import(&quot;..&#x2F;..&#x2F;..&#x2F;**.vue&quot;))&#x2F;&#x2F;动态引入export default&#123;    components:&#123;son&#125;,&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><p>这个代表可以使用suspense中的组件，其中的组件可以使用promise作为返回值了。以前不能使用的原因是会直接白给，现在也可以的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Teleport%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Teleport%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-Teleport组件"><a href="#vue-学习路线-Teleport组件" class="headerlink" title="vue-学习路线-Teleport组件"></a>vue-学习路线-Teleport组件</h1><p>作用，传送</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;   &lt;div v-bind:style&#x3D;&quot;&#123; animation: &#39;my-animation 2s ease-in-out infinite&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;   &lt;teleport to&#x3D;&#39;body&#39;&gt;        &lt;&#x2F;teleport&gt;&lt;&#x2F;template&gt;&lt;script &gt;&lt;&#x2F;script&gt;&lt;style&gt;    @keyframes my-animation&#123;        form &#123;            transform:translateX(-100%)        &#125;        to &#123;            transfrom:translateX(0)        &#125;        &#125;&lt;&#x2F;style&gt;</code></pre><p>就是把这个transport中的内容发送给别的组件。比如有些内容组件的位置想要在最中间，但是默认这个组件就在左上角的。这样就很简单的。把许多零件租金去</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Fragment/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-Fragment/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-Fragment"><a href="#vue-学习路线-Fragment" class="headerlink" title="vue-学习路线-Fragment"></a>vue-学习路线-Fragment</h1><p>在vue2必须要有一个根标签</p><p>也就是必须要有一个东西包裹着</p><p>但是在vue3中就是可以不用，但是其实内置有一个fragment的标签包裹</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%A4%E6%96%AD/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-响应式数据的判断"><a href="#vue-学习路线-响应式数据的判断" class="headerlink" title="vue-学习路线-响应式数据的判断"></a>vue-学习路线-响应式数据的判断</h1><ul><li>isRef:是否是一个ref创建的对象</li><li>isReactive：是否一个reactive创建的对象</li><li>isReadonly：是否是一个只读的对象</li><li>isProxy：检查一个对象是不是由ref或者reactivee创建的对象</li></ul><p>readOnly的修饰后的依旧还是一个代理的类型的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-provide%E4%B8%8Einject/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-provide%E4%B8%8Einject/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-provide与inject"><a href="#vue-学习路线-provide与inject" class="headerlink" title="vue-学习路线-provide与inject"></a>vue-学习路线-provide与inject</h1><p>作用：实现祖孙组件间通信。也就是跨级组件之间通信。</p><p>其实在子组件也可以得到，但是有props的情况下，基本用不着</p><p>祖组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;child&#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;import child from &#39;&#x2F;**&#x2F;**&#x2F;**.vue&#39;import &#123;reactive ,toRefs,provide&#125; from &#39;vue&#39;    export default&#123;    name:&#39;App&#39;    components:&#123;child&#125;,    setup()&#123;    let car&#x3D;reactive(&#123;name:&#39;奔驰&#39;,price:&#39;40w&#39;&#125;)        provide(&#39;car&#39;,car)&#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><p>子组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;sun&#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;import son from &#39;&#x2F;**&#x2F;**&#x2F;**.vue&#39;export default&#123;    components:&#123;son&#125;,&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><p>孙组件</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link replace :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;import &#123;inject&#125; from &#39;vue&#39;export default&#123;    name:&#39;son&#39;,    setup()&#123;        let car &#x3D; inject(&#39;car&#39;)        return &#123;car&#125;    &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-customRef/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-customRef/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-customRef"><a href="#vue-学习路线-customRef" class="headerlink" title="vue-学习路线-customRef"></a>vue-学习路线-customRef</h1><p>作用：创建一个自定义的ref，并对其依赖项追踪和更新出发进行显式控制。</p><p>eg:页面防抖效果</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;&lt;h3&gt;        &#123;&#123;keyword&#125;&#125;    &lt;&#x2F;h3&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;ref,customRef&#125; from &#39;vue&#39;export default&#123;    name:&#39;App&#39;,    setup()&#123;        &#x2F;&#x2F;自定义一个ref：myref        function myRef(value)&#123;            let timer            &#x2F;&#x2F;方法要返回一个东西吧，不然干嘛            return customRef((track,trigger)&#x3D;&gt;&#123;                &#x2F;&#x2F;必须要返回一个对象且必须要有get，set                return &#123;                    get:function()&#123;                        console.log(&quot;324&quot;)                        track()&#x2F;&#x2F;追踪value的改变，不然的话后续改变，获取不到最新的值。                        return value                    &#125;,                    set:funtion(newValue)&#123;                    console.log(&quot;324&quot;)                        clearTimeout(timer)&#x2F;&#x2F;在每次赋值前清楚前一个定时器，避免出现之前的定时器，设置文字，导致在连续点击的时候，速度较快，出现数值不断变换成之前的数据。                        timer&#x3D;setTimeOut(()&#x3D;&gt;&#123;                              value &#x3D; newValue                trigger()&#x2F;&#x2F;通知vue重新解析模板，也就是在set之后让界面认识到改变                        &#125;,500)                &#125;,                    &#x2F;&#x2F;上面简化的写法                    get()&#123;&#125;,                    set()&#123;&#125;                &#125;                                         &#125;)                        console.log(&#39;myRef&#39;)        &#125;        &#x2F;&#x2F;let keyworf&#x3D;ref(&#39;helleo&#39;)&#x2F;&#x2F;使用vue提供的ref        let keyworf&#x3D;myRef(&#39;helleo&#39;)&#x2F;&#x2F;使用vue提供的ref        return &#123;            keyword        &#125;    &#125;&#125;&lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-toRow%E4%B8%8EmarkRow/"/>
      <url>/2023/07/31/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-toRow%E4%B8%8EmarkRow/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-toRaw与markRaw"><a href="#vue-学习路线-toRaw与markRaw" class="headerlink" title="vue-学习路线-toRaw与markRaw"></a>vue-学习路线-toRaw与markRaw</h1><h2 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h2><p>toRaw作用把响应式的转成原始的</p><p>只能处理reactive处理响应式对象</p><pre class="language-vue" data-language="vue"><code class="language-vue">import &#123;toRaw,reactive&#125; from &#39;vue&#39;let person&#x3D;reactive(&#123;name:”张三&quot;,age:18&#125;)function showRawPerson()&#123;const p&#x3D;toRaw(person)&#125;</code></pre><h2 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h2><p>场景原本的对象没有这个属性，但是通过某种方法之后添加这个属性。如果dom中使用的话，setup阶段是undfined，如果是通过…refs(person)提交出去的信息，则直接没有对象的信息。</p><p>但是如果新添加的属性，添加上去的信息默认是响应式的，但是如果没有响应式的需求，那就可以这么做。</p><p>eg：你在某个对象中引入了一个第三类库的东西，但是因为第三方的东西内部属性什么的比较多，但是实际上又不太需要改变，就可以用于这种情况</p><pre class="language-vue" data-language="vue"><code class="language-vue">import &#123;toRaw,reactive&#125; from &#39;vue&#39;let person&#x3D;reactive(&#123;name:”张三&quot;,age:18&#125;)function showRawPerson()&#123;let persion&#x3D;ref(&#123;name:&quot;adw&quot;,age&#x3D;23&#125;)person.car&#x3D;markRaw(car)&#125;</code></pre><p>这个和readOnly的不同点。这个数据是后台改变，但是前端是没有改变。实际上改变的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-router-link的replace</title>
      <link href="/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-router-link%E7%9A%84replace/"/>
      <url>/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-router-link%E7%9A%84replace/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-router-link的replace"><a href="#vue-学习路线-router-link的replace" class="headerlink" title="vue-学习路线-router-link的replace"></a>vue-学习路线-router-link的replace</h1><p>页面切换有两种模式：</p><pre><code>- 页面的页面切换的时候就是类似数组的push方法。压栈。所以页面的前进与后退都是修改指针前后。- 页面的切换还有replace方式。就是不保存之前的记录，生成新的，消灭旧的。</code></pre><p>正常网页默认的就是push模式，如何使用第二种replace的方式。</p><p>就是在router-link配置replace的属性为ture</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link replace :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><blockquote><p>直接写这个属性就是表示默认给true。当然可以勤劳点       :replace&#x3D;’true’</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - replace </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 动画replace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-路由的props配置</title>
      <link href="/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84props%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84props%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-路由的props配置"><a href="#vue-学习路线-路由的props配置" class="headerlink" title="vue-学习路线-路由的props配置"></a>vue-学习路线-路由的props配置</h1><p>三种写法。第三种写法的局限性最小，也最容易管理。建议使用第三种写法的前两个的方案。</p><h2 id="第一种写法props的固定对象传递"><a href="#第一种写法props的固定对象传递" class="headerlink" title="第一种写法props的固定对象传递"></a>第一种写法props的固定对象传递</h2><p>无法动态给与数据</p><ol><li>接受参数</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; &#123;&#123;id&#125;&#125; &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;        export default&#123;        props:[&#39;id&#39;,&#39;title&#39;]    &#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>路由修改</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">  routes: [    &#123;      path: &#39;&#x2F;home&#x2F;messgae&#x2F;detail&#39;,      name: &#39;home&#39;,      component: HomeView,&#x2F;&#x2F;第一种写法，值为对象，该对象中所有key-value都会以props组件形式进行接受  props: &#123;id:1,title:&#39;helleo&#39;&#125;    &#125;,</code></pre><h2 id="props的第二种写法"><a href="#props的第二种写法" class="headerlink" title="props的第二种写法"></a>props的第二种写法</h2><p>只能传递params参数，不能传递query参数</p><ol><li>传递参数</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#123;                        name:&#39;jia&#39;,                        params:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>路由修改</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue"> routes: [   &#123;     path: &#39;&#x2F;home&#x2F;messgae&#x2F;detail&#39;,     name: &#39;home&#39;,     component: HomeView,&#x2F;&#x2F;第二种写法，值为布尔值，如果布尔值为true，就会把该路由组件收到的所有params参数，以props的形式传给该组件  props: true   &#125;,</code></pre><ol start="3"><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; &#123;&#123;id&#125;&#125; &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;        export default&#123;        props:[&#39;id&#39;,&#39;title&#39;]    &#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><h2 id="props的第三种写法"><a href="#props的第三种写法" class="headerlink" title="props的第三种写法"></a>props的第三种写法</h2><p>传递的是一个方法过去。使用route作为回调参数</p><ol><li>xxxxxxxxxx $route.params.id$route.params.titlevue</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#123;                        name:&#39;jia&#39;,                        params:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>路由修改</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">  routes: [    &#123;      path: &#39;&#x2F;home&#x2F;messgae&#x2F;detail&#39;,      name: &#39;home&#39;,      component: HomeView,&#x2F;&#x2F;第三种写法，值为函数  props($route)&#123;return &#123;id:$route.query.id,title:$route.query.title&#125;&#125;&#x2F;&#x2F;和上面等价。只是更简化了部分信息  props(&#123;query&#125;&#125;)&#123;return &#123;id:query.id,title:query.title&#125;&#125;&#x2F;&#x2F;和上面等价。只是更加解构赋值。当然可读性有所下降  props(&#123;query：&#123;id,title&#125;&#125;&#125;)&#123;return &#123;id,title&#125;&#125;    &#125;,</code></pre><ol start="3"><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; &#123;&#123;id&#125;&#125; &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;        export default&#123;        props:[&#39;id&#39;,&#39;title&#39;]    &#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - query </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> props </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-路由的params参数</title>
      <link href="/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84params%E5%8F%82%E6%95%B0/"/>
      <url>/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84params%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-路由的params参数"><a href="#vue-学习路线-路由的params参数" class="headerlink" title="vue-学习路线-路由的params参数"></a>vue-学习路线-路由的params参数</h1><h2 id="携带params参数的字符串写法"><a href="#携带params参数的字符串写法" class="headerlink" title="携带params参数的字符串写法"></a>携带params参数的字符串写法</h2><ol><li>传递参数</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;mid&#x2F;mtitle&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>路由修改</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">routes: [  &#123;    path: &#39;&#x2F;home&#x2F;messgae&#x2F;detail&#x2F;:id&#x2F;:title&#39;,    name: &#39;home&#39;,    component: HomeView  &#125;,</code></pre><ol start="3"><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">$route.params.id$route.params.title</code></pre><h2 id="携带query参数的对象写法"><a href="#携带query参数的对象写法" class="headerlink" title="携带query参数的对象写法"></a>携带query参数的对象写法</h2><p>router只能通过name都可跳转。</p><p>当然name需要提前有所配置。</p><ol><li>传递参数<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#123;                        name:&#39;jia&#39;,                        params:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre></li></ol><p>这个写法会直接报错，也就是说不能用path的</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&#x2F;&#x2F;这种写法是会报错的  &lt;router-link :to&#x3D;&quot;&#123;                        path:&#39;&#x2F;home&#39;,                        params:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&#x2F;&#x2F;这种写法ok  &lt;router-link :to&#x3D;&quot;&#123;                        name:&#39;jia&#39;,                        params:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>路由修改：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">routes: [  &#123;    path: &#39;&#x2F;home&#x2F;messgae&#x2F;detail&#x2F;:id&#x2F;:title&#39;,    name: &#39;home&#39;,    component: HomeView  &#125;,</code></pre><ol start="2"><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">$route.params.id$route.params.title</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - params </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> params </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-路由的query参数</title>
      <link href="/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84query%E5%8F%82%E6%95%B0/"/>
      <url>/2023/07/25/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%B7%AF%E7%94%B1%E7%9A%84query%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-路由的query参数"><a href="#vue-学习路线-路由的query参数" class="headerlink" title="vue-学习路线-路由的query参数"></a>vue-学习路线-路由的query参数</h1><h2 id="携带query参数的字符串写法"><a href="#携带query参数的字符串写法" class="headerlink" title="携带query参数的字符串写法"></a>携带query参数的字符串写法</h2><ol><li>传递参数</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;mId&#125;&amp;title&#x3D;$&#123;mTitle&#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><ol start="2"><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">$route.query.id$route.query.title</code></pre><h2 id="携带query参数的对象写法"><a href="#携带query参数的对象写法" class="headerlink" title="携带query参数的对象写法"></a>携带query参数的对象写法</h2><p>router可以通过path和name都可跳转。</p><p>当然name需要提前有所配置。</p><ol><li>传递参数<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;router-link :to&#x3D;&quot;&#123;                        path:&#39;&#x2F;home&#39;,                        query:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;  &lt;router-link :to&#x3D;&quot;&#123;                        name:&#39;jia&#39;,                        query:&#123;                        id:mId,                        title:myTitle                        &#125;                    &#125;&quot;&gt; link &lt;&#x2F;router-link&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre></li><li>接受参数：</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">$route.query.id$route.query.title</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - query </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> query </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-插槽slot</title>
      <link href="/2023/07/20/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E6%8F%92%E6%A7%BDslot/"/>
      <url>/2023/07/20/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E6%8F%92%E6%A7%BDslot/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-插槽slot"><a href="#vue-学习路线-插槽slot" class="headerlink" title="vue-学习路线-插槽slot"></a>vue-学习路线-插槽slot</h1><p>插槽可以分为三类</p><ul><li>默认插槽</li><li>具名插槽</li><li>作用域插槽</li></ul><p>各自有各自的特点。</p><h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><p>特点：简单实用，不需要命名，直接将对应的内容放到插槽对应的地方。</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;RouterView &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;  RouterView &#125; from &#39;vue-router&#39;&lt;&#x2F;script&gt;&lt;style scoped&gt;    &lt;&#x2F;style&gt;</code></pre><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>特点：如果有多个插槽的地区，比如图片与文字，所需要的给的地方是不一样的。</p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>特点：在子组件中如果需要给与不同的样式，但是信息的内容又差不多。可以通过这样的方案。比如特殊显示某个类型的信息。但是这个类型的信息实际内容其实是和其他内容没有什么大的不同的情况</p>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - slot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-第三方动画库</title>
      <link href="/2023/07/16/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8A%A8%E7%94%BB%E5%BA%93/"/>
      <url>/2023/07/16/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-第三方动画库"><a href="#vue-学习路线-第三方动画库" class="headerlink" title="vue-学习路线-第三方动画库"></a>vue-学习路线-第三方动画库</h1><p>首先提到的是一个css的库[animate.css官方链接](<a href="https://animate.style/">Animate.css | A cross-browser library of CSS animations.</a>)</p><ol><li>安装库</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">npm install animate.css --save</code></pre><ol start="2"><li>在组件中引入使用</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div        name&#x3D;&#39;animate__animated animate__bounce&#39;       enter-active-class&#x3D;&quot;从官网上找对应的名字&quot;       leave-active-class&#x3D;&quot;从官网上找对应的名字&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script &gt;    import &#39;animate.css&#39;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 第三方动画库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 第三方动画库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-动画组</title>
      <link href="/2023/07/15/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%8A%A8%E7%94%BB%E7%BB%84/"/>
      <url>/2023/07/15/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%8A%A8%E7%94%BB%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-动画组"><a href="#vue-学习路线-动画组" class="headerlink" title="vue-学习路线-动画组"></a>vue-学习路线-动画组</h1><p>之前有学习过利用transform来让其中的元素具有动画效果，也可以用name的方案来让动画效果在不同的位置上有所区别。但是这个也有一定的限制，里面只能有一个元素。虽然可以用div标签这样同生共死，但是还是可以有其他方案，让他们效果一样，但是并不用一起出现。那就是transition-group</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;transition-group name&#x3D;&quot;fade&quot;&gt;  &lt;div v-if&#x3D;&quot;show&quot;&gt;Hello, world!&lt;&#x2F;div&gt;&lt;transition name&#x3D;&quot;fade&quot;&gt;  &lt;div v-if&#x3D;&quot;show&quot;&gt;Hello, world!&lt;&#x2F;div&gt;&lt;&#x2F;transition-group&gt;&lt;script &gt;&lt;&#x2F;script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: my-animation opacity 0.5s ease-in-out;&#125;.fade-enter, .fade-leave-to &#123;  opacity: transform:translateX(-100%);&#125;.fade-enter-to, .fade-leave &#123;  opacity: transfrom:translateX(0);&#125;&lt;&#x2F;transition&gt;&lt;script scoped&gt;&lt;&#x2F;script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: my-animation opacity 0.5s ease-in-out;&#125;.fade-enter, .fade-leave-to &#123;  opacity: transform:translateX(-100%);&#125;.fade-enter-to, .fade-leave &#123;  opacity: transfrom:translateX(0);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 动画组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 动画组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-动画效果</title>
      <link href="/2023/07/14/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
      <url>/2023/07/14/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-动画效果"><a href="#vue-学习路线-动画效果" class="headerlink" title="vue-学习路线-动画效果"></a>vue-学习路线-动画效果</h1><h2 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h2><p>css中使用@keyframes作为关键字实现动画</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div v-bind:style&#x3D;&quot;&#123; animation: &#39;my-animation 2s ease-in-out infinite&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script &gt;&lt;&#x2F;script&gt;&lt;style&gt;    @keyframes my-animation&#123;        form &#123;            transform:translateX(-100%)        &#125;        to &#123;            transfrom:translateX(0)        &#125;        &#125;&lt;&#x2F;style&gt;</code></pre><h2 id="vue官方给与的方案-动画方案"><a href="#vue官方给与的方案-动画方案" class="headerlink" title="vue官方给与的方案-动画方案"></a>vue官方给与的方案-动画方案</h2><p>fade可以替换为任何自定义名称，如果不设置name。则默认为名称为v</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;fade&quot; :apprear&#x3D;&#39;true&#39;&gt;  &lt;div v-if&#x3D;&quot;show&quot; &gt;Hello, world!&lt;&#x2F;div&gt;&lt;&#x2F;transition&gt;&lt;script &gt;&lt;&#x2F;script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: my-animation 0.5s ease-in-out;&#125; @keyframes my-animation&#123;        form &#123;            transform:translateX(-100%)        &#125;        to &#123;            transfrom:translateX(0)        &#125;        &#125;      &lt;&#x2F;style&gt;</code></pre><p>这里，我们使用了 <code>.fade-enter-active</code> 和 <code>.fade-leave-active</code> 类来设置动画效果的持续时间、缓动函数等属性，使用 <code>.fade-enter</code> 和 <code>.fade-leave-to</code> 类来设置动画开始和结束时的样式。</p><p>active实际就是意思在执行开始的时候执行对应的css效果。</p><p>apprear属性表示在第一次加载出现的时候就执行这个动画效果，否则是不执行对应的动画效果的。</p><h2 id="vue官方给与的方案-过度效果"><a href="#vue官方给与的方案-过度效果" class="headerlink" title="vue官方给与的方案-过度效果"></a>vue官方给与的方案-过度效果</h2><p>  fade可以替换为任何自定义名称，如果不设置name。则默认为名称为v</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;fade&quot;&gt;  &lt;div v-if&#x3D;&quot;show&quot;&gt;Hello, world!&lt;&#x2F;div&gt;&lt;&#x2F;transition&gt;&lt;script scoped&gt;&lt;&#x2F;script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: my-animation opacity 0.5s ease-in-out;&#125;.fade-enter, .fade-leave-to &#123;  opacity: transform:translateX(-100%);&#125;.fade-enter-to, .fade-leave &#123;  opacity: transfrom:translateX(0);&#125;    &lt;&#x2F;style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 动画效果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 动画效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见GitHub访问失败汇总</title>
      <link href="/2023/07/11/%E5%B8%B8%E8%A7%81GitHub%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5%E6%B1%87%E6%80%BB/"/>
      <url>/2023/07/11/%E5%B8%B8%E8%A7%81GitHub%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="常见情况的github访问失败的汇总"><a href="#常见情况的github访问失败的汇总" class="headerlink" title="常见情况的github访问失败的汇总"></a>常见情况的github访问失败的汇总</h1><p>作为程序员，在github上的操作是避免不了的。但是由于某些原因，github的访问经常会出现各种问题，比如超时。现在汇总一下各种情况下如何解决。</p><h2 id="TimeOut"><a href="#TimeOut" class="headerlink" title="TimeOut"></a>TimeOut</h2><p>这是最常见的问题。在各种环境都存在。</p><h3 id="Git-GUI"><a href="#Git-GUI" class="headerlink" title="Git GUI"></a>Git GUI</h3><p>Git GUI往往都是在上传我的博客的时候会出现的问题。我现在的操作方案是修改了一下网文GitHub的网址的描述方案。</p><p>之前也曾经尝试过一些乱七八糟的方案，</p><ul><li><p>比如最为常见的设置代理再取消代理。———-有时有效</p></li><li><p>开全局代理————————————————无效.应该是git并不走代理的原因，就像uwp应用默认也不进行代理。</p></li></ul><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>在这里是用于上传Github图床，有时就会出现这个问题。</p><p>这个的操作方式目前，目前是通过steam++的加速Github的PAC模式进行操作。</p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>这里需要上传自己的文件到GitHub进行备份等，主要是超时问题。</p><p>目前是通过设置电脑代理，代理127.0.0.1的10809端口，然后在git的界面中设置代理这个端口。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">git config --global http.proxy &#39;127.0.0.1:10809&#39;git config --global https.proxy &#39;127.0.0.1:10809&#39;</code></pre><p>如果需要取消代理</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">git config --global --unset http.proxygit config --global --unset https.proxy</code></pre>]]></content>
      
      
      <categories>
          
          <category> 实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-放弃幻想认清现实</title>
      <link href="/2023/07/11/%E6%97%A5%E8%AE%B0-%E6%94%BE%E5%BC%83%E5%B9%BB%E6%83%B3%E8%AE%A4%E6%B8%85%E7%8E%B0%E5%AE%9E/"/>
      <url>/2023/07/11/%E6%97%A5%E8%AE%B0-%E6%94%BE%E5%BC%83%E5%B9%BB%E6%83%B3%E8%AE%A4%E6%B8%85%E7%8E%B0%E5%AE%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="有些事情无法调和"><a href="#有些事情无法调和" class="headerlink" title="有些事情无法调和"></a>有些事情无法调和</h1><p>一个人总是会孤单，想起不该想的人<br>该给自己一个结论<br>她不会再回来了。<br>当初分手的原因很多。缺少关心，不信任，得不到对方家里的祝福!<br>没有祝福的家是不会圆满的。归根结底，自己还是不够好，做不到一定ok，哈哈哈哈啊哈。<br>现在她是别人的小傻子，和我有什么关系吗？并没有！<br>作为前男友，我搞个屁，就不去折腾了。<br>至于缺点嘛，一个是其实真的很没有动力，和我一样，失去了理解的心。<br>她只是被我绑上战车的人，自己并没有充足的动力，只是好奇有个关心的人罢了，灰烬的余火。<br>我以为是两个人的惺惺相惜，实际却是一个人的单相情愿，她的心里只是好奇，一个人冲进了她的生活，带来很很多的风景<br>有些话在慢慢讲，讲完了，就散了吧。风景看完了，人不能停留，我们终究会屈服于现实，一个充满人情事故的现实。<br>你会考虑到家里人的态度，你会执着于如何为什么对方不够优秀，不能满足基本的需求。<br>你我都不理解，大家只是懂得事情，没有去有情感上的共鸣。<br>情感上没有共鸣，哪里来的依据呢。<br>我想着事情去共鸣，但是我没有做好，省钱干嘛呢，哈哈哈。<br>不如去套话，去顺着她讲。去聊天，去认识到新的人的情感。<br>慢慢的两个人都烦了，我是真的好烦啊。<br>她总是那么冷漠，脾气那么大，动不动喜欢删除联系方式。<br>不爱讲话沟通，冷战，平时也不想讲话。很冰，聊天讲不了话，生气讲不了话。不理她过一段时间就是删除好友<br>好难伺候。<br>现在还来得及，大家还有很多的机会。是放弃吧。<br>嘿嘿欸黑</p><p>现在，给自己一个目标。<br>2024.1.1 65kg<br>给自己的交代。<br>配一台主机，就是想玩</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-部署项目</title>
      <link href="/2023/07/11/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/07/11/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-部署项目"><a href="#vue-学习路线-部署项目" class="headerlink" title="vue-学习路线-部署项目"></a>vue-学习路线-部署项目</h1><p>无论前面学习怎么样，最终还是落到项目的部署上来。</p><ol><li>下载并安装nginx</li><li>配置nginx</li><li>下载并安装node.js</li><li>打包vue项目</li></ol><h2 id="下载并安装nginx"><a href="#下载并安装nginx" class="headerlink" title="下载并安装nginx"></a>下载并安装nginx</h2><p>下载网址：<a href="http://nginx.org/en/download.html">nginx官方下载网址</a></p><p>版本区别：</p><ul><li><p><strong>Mainline version</strong>：正在开发中的版本，可以理解成开发版本</p></li><li><p><strong>Stable version</strong>：稳定版本，生产环境必备</p></li><li><p><strong>Legacy versions</strong>：历史版本</p></li></ul><p>此处我下载的是最新的windows稳定版本，下载之后，解压缩就好像可以直接使用。</p><p>停止的命令：</p><ol><li><p>cd到nginx的执行目录</p></li><li><p>这种是比较温和的，完成当前任务后停止：</p></li></ol><pre class="language-cmd" data-language="cmd"><code class="language-cmd">nginx -s quit</code></pre><p>这种比较强力，直接停止：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">nginx -s stop</code></pre><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><ol><li>修改&#x2F;conf&#x2F;nginx.conf文件</li><li>配置如下：</li></ol><p><img src="https://cdn.jsdelivr.net/2508838014/DrawingBed/pictures/pictures/image-20230711190712772.png" alt="image-20230711190712772"></p><ol><li><p>执行命令：测试配置是否正确</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">nginx -t</code></pre></li><li><p>打开对应程序</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">start nginx</code></pre></li><li><p>在地址栏检查对应的内容是否ok</p></li></ol><h2 id="下载并安装node-js"><a href="#下载并安装node-js" class="headerlink" title="下载并安装node.js"></a>下载并安装node.js</h2><p>下载网址：<a href="https://nodejs.org/en">node.js官方下载网址</a></p><p>肯定是安装lst（long support stable）版本。</p><p>点击msi，一路接受就ok了。</p><h2 id="打包vue项目"><a href="#打包vue项目" class="headerlink" title="打包vue项目"></a>打包vue项目</h2><p>正常只需要执行下面这个命令就可以</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm run build</code></pre><p>然后把dist文件夹copy至nginx的配置中所设定的位置。</p><p>重新启动nginx就可以访问成功</p><h2 id="设为开机自启动"><a href="#设为开机自启动" class="headerlink" title="设为开机自启动"></a>设为开机自启动</h2><p>如果前面的设置没有问题，那就是没有问题了。现在做一些额外的内容，比如这个开机自启动。</p><p>把nginx.exe创建快捷方式，并且copy到</p><pre class="language-none"><code class="language-none">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><p>这样就可以实现开启自启动了。</p>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 部署项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 部署项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日祝福</title>
      <link href="/2023/07/11/%E7%94%9F%E6%97%A5%E7%A5%9D%E7%A6%8F/"/>
      <url>/2023/07/11/%E7%94%9F%E6%97%A5%E7%A5%9D%E7%A6%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="生日华语"><a href="#生日华语" class="headerlink" title="生日华语"></a>生日华语</h1><p>冲姐姐，23岁生日快乐！<br>欢迎来到这个世界<strong>小时</strong>秒</p><p>xxxxxxxxxx cd C:\windows\system32\drivers\etccmd</p><p>愿生辰快乐，</p><p>春去秋往，万事胜意，</p><p>四方梦想，如愿以偿。</p><pre><code>                        &lt;div class=&quot;fb7-page-book&quot;&gt;                                &lt;h1&gt;目录&lt;/h1&gt;                                &lt;h6&gt;有些事我还记着&lt;/h6&gt;                                &lt;ol&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;幸福莫过于初见&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;打打闹闹，往前奔跑&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;短暂的暑假&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;步入大学&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;Timeam sententiae nam at, vim eu harum quaerendum.&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;Ea quo illum aliquando.&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;Facete temporibus consectetuer id per, erant numquam rationibus cu his&lt;/a&gt;.&lt;/li&gt;                                &lt;/ol&gt;                                &lt;h6&gt;故事风起云涌&lt;/h6&gt;                                &lt;ol&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;漫长的拉扯&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;拉力赛冠军&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;诸多的第一次&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;大大方方向前走&lt;/a&gt;.&lt;/li&gt;                                &lt;/ol&gt;                                &lt;h6&gt;不经历风雨怎么见彩虹&lt;/h6&gt;                                &lt;ol&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;深夜emo&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;游戏后的争吵&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;消失的好友&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;重归于好&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;逐步冷血&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;现实的无奈&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;不够努力的自己&lt;/a&gt;.&lt;/li&gt;                                &lt;/ol&gt;                                &lt;h6&gt;梦想的征途&lt;/h6&gt;                                &lt;ol&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;大步向前&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;认清自己&lt;/a&gt;&lt;/li&gt;                                &lt;li&gt;&lt;a href=&quot;javascript:setPage(4)&quot;&gt;未来共勉&lt;/a&gt;&lt;/li&gt;                                &lt;/ol&gt;                                                &lt;/div&gt;       </code></pre><p>今年的生日没有礼物。就自己做了个网站给姐姐庆生。<br>哇，从遇见你已经好久好久了啊。17岁高二遇见了你。当时看到你其实第一眼看着没有多少感受，就是很正常啊，天天在那里看小说，哪里来的儿女情长。<br>最开始相见的记忆已经模糊不清，但是在高中同一片屋檐下学习的日子却逐步烙印在心中。<br>当时慢慢发现和你聊天挺有意思的，捉弄着你，吸引你的注意力是真的有意思。<br>现在想想那就是来自青春的荷尔蒙在涌动吧，当时还没有想到我们能有那么多的交际。<br>配图：回忆相关</p><p>你第一次在我心中留下深刻的印象是一次周末回来。<br>记不清当时为什么，你请了你周围一圈喝奶茶。我第一次得到来自女孩子的奶茶，当时突然就觉得你这个人很好。<br>心中认定，你是一个值得结交的人。<br>高中的生活那么平淡且幸福。<br>看小说，捉弄你，睡觉，学习。<br>看小说，捉弄你，睡觉，学习。<br>看小说，捉弄你，睡觉，学习。<br>看小说，捉弄你，睡觉，学习。<br>高中结束了。<br>配图高中教室</p><p>来到了人生中少有的没有后续学习压力的第一个暑假。<br>焦急的等待着自己的分数。在高考查分的那一天。我心里压力拉满。<br>还记得那是一个下午查分的时刻，真正开始查询分数的时间比官方通知的时间提前了几个小时。<br>我一个人在家，查到的分数与一本线进行对比，感觉有点低。也算不出所料吧。<br>接下来就是打听身边人的分数，在听到姐姐与我同分的时候是有点小确幸的。想听着你的志愿，一起步入大学。<br>但是自己还是太胆小了，后面你第一批没有成功心中我也在为你可惜，心中也是重新燃起一丝希望，我们似乎真的可以在同一个大学。在同一个省份。<br>在得知你远在哈尔滨之后，我搜索了下哈尔滨的位置，太远了。路费有点小贵。没有前往哈尔滨和姐姐带过一段时间可以说是我在大学中最后悔的事情了。<br>在这个暑假里，我第一次得到了和你独处的机会。和后来的你一样，还是喜欢躺在床上，看着你呼呼大睡的样子，我可以说是心中有了一些小想法。<br>想让你成为我的女朋友。<br>嘿嘿嘿。<br>配图小猪睡床</p><p>步入大学的校门。一切那么陌生，你算少有的同龄人，成为了交流的对象。<br>步入了一个新的阶段。</p><p>风起云涌</p><p>步入大学，脸皮越来越厚。<br>经常在qq里调戏姐姐，把姐姐撩的很。但是异地恋的痛苦让姐姐又很不愿意接受。<br>我开始死缠烂打，在中间也慢慢了解姐姐，了解姐姐的身世，了解姐姐的性格，明白姐姐喜怒哀乐。<br>成为姐姐的男友也慢慢稳步推进。<br>但是异地恋的难处，也让两个人望而却步。<br>感情的升温与现实的冷漠成了两人之间深深的隔阂。</p><p>终究凭借着三寸不烂之舌我说服了姐姐。<br>修成正果！<br>配图:qq截图同意女朋友</p><p>有了女朋友之后，就可以解锁好多好多的成就了。<br>第一次异性的电影<br>第一次和女友逛街<br>第一次接吻<br>第一次那么温暖的抱抱<br>。。。。。。</p><p>我们一起约定，好好的。<br>郎才女貌。<br>一起有个温暖的家<br>明媒正娶，不要孩子，好好过二人世界。<br>那段时间眼中只有彼此。</p><p>好事多磨<br>我们之后开始有了争执，<br>印象最深的时候，那是一个夜晚，半夜一两点了。我收到了来自姐姐二十多个电话，惊得我连忙回拨回去。<br>很幸运接通了，当时具体在讲什么呢？大致是挽留吧，当时我出了宿舍门，你也在楼道口，讲了好久好久的电话。<br>现在想想，因为大家都是有点期待吧，电话哪怕是道歉，可是也可以讲好久，接听的人也可以听好久。大家都支持很久。<br>许多的问题我现在还记得，我不回消息，打电话也不接。大晚上讲话讲着讲着，我居然是睡着了。老猪了。<br>我对姐姐也是提了一堆要求的样子，要求姐姐接受我，虽然我优点没看到，但是脸皮是看到了。</p><p>哇，当时打游戏也是一堆问题。<br>印象中还是我带你打的王者，当时趁着你很菜的时候，欺骗你做了你的师傅，还在1v1的时候没有丝毫手下留情，各种花式吊打。<br>可惜，我终究还是个菜鸡，情商也低，在双排的时候不能眼观六路，救姐姐于水火，还不能带姐姐夺取胜利。<br>玩了许多局，就像一根木头，不讲话，默默输掉，疯狂掉分，不像双排，怨气越来越大。<br>最后都不乐意一起双排了。双排成为了负担。交流的信息越来越少了。</p><p>两人的矛盾越来越多，终究开始的删除好友，大家各自开始。<br>我们俩也会在轮流服软，各自找个阶梯，一次次删除再加上好友。<br>消耗了热情，问题却还有，我们之间需要一个变数，一个很大的变数。<br>这个变数要么是开辟新的方向，足以让我们俩消耗精力在其中，就比如热恋中的畅谈。<br>要么是环境的变化，两人生活在一起，可以经常见面交流，很舒服。<br>可惜，我们都没有这种的变化，<br>我们走向的是分开，环境还是那样，正如我一开始看到的，我觉得两人的家距离很近，很方便的，你觉得很远，不能天天见面交流。<br>这个后面也的确不算什么，但是在学生的我们的眼中，的确很远。<br>热情消散了。</p><p>这中间我又发起了冲锋，勇敢牛牛，不怕困难。<br>我们又好了一段时间，可是我们俩都没有说，问题他还在，需要一个变量，不然就是慢性死亡。<br>这个变量，我期待着毕业，你说考研，我说考公，大家走了不同的路，交流越来越少。<br>不过我们还是情侣。<br>很有意思的情侣，很特殊，因为我周围的人都看好我，却也知道，又分手了，却不知道什么时候会又复合了。</p><p>两人两条路，大家都在走着，姐姐却因为疫情，失败了。<br>我也因为选错了赛道，落选了。<br>幸运没有眷顾着我们俩，<br>爱神也没有眷顾，在我们最需要彼此抱团取暖的时刻，我们却相隔一方。<br>血越来越冷。</p><p>毕业了，我们俩真的失业了。<br>新的噩耗，传到我的耳中，我父亲出了变故。那段时间你奔波在外，谋取生路。<br>我在照顾一段时间后，毅然放弃原有的想法，踏上了谋取生存的道路。<br>可是我的心态变了，我不是那个能够笑呵呵说着我娶你啊，我知道，我现在不够。<br>我是个社会上的人了，面临了更多的要求。<br>娶一个人，基本的要求都满足不了，那怎么有用呢？<br>现实很骨感。</p><p>这中间其实我也有很多的机会，但是我很差，没有满足要求。<br>我记得比如当时说要减肥，直到现在，我估计我也就是稳定在70公斤这样。<br>有许多的要求，我都不能满足。<br>娶姐姐的要求真的很低啊。这么低的要求，我没有理由去吐槽，去要求更低。<br>姐姐的要求也很低啊，光明正大的谈个恋爱，怎么了，没有问题啊。<br>一米八。<br>不错的身材。<br>对你好。<br>不算多的彩礼。<br>我真的不够好吧，我只能自己在其他方向上发光发热了。</p><p>梦想的征途<br>现在相隔不远，但是心中的距离很远。<br>那个是世人的眼光，是心底对于认可的要求。<br>大家年龄不大，还可以选择路。<br>踏上自己的征程吧</p><p>想了下我自己。<br>我的优点也就剩下，目前工资其实还好，但是可惜还要还房贷，呜呜呜呜。<br>也就剩下对女友好了，全心全意的好，我会真的想去摘星星，摘不下来就画下来，把星星让心爱的人捧起。</p><p>未来的路，大家共同向前。</p><p>姐姐，满意这个生日礼物嘛。<br>接下来是评价环节。<br>如果姐姐有男友。那我麻溜的走开，发个邮件<a href="mailto:&#x32;&#53;&#48;&#x38;&#56;&#x33;&#x38;&#48;&#49;&#52;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;">&#x32;&#53;&#48;&#x38;&#56;&#x33;&#x38;&#48;&#49;&#52;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a>给我，告诉我你真的有男友，还有满意度<br>满意，一般般，渣渣<br>最好附上优化意见，求求你了。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 - 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生日祝福 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps流量消失事件</title>
      <link href="/2023/07/11/vps%E6%B5%81%E9%87%8F%E6%B6%88%E5%A4%B1%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/07/11/vps%E6%B5%81%E9%87%8F%E6%B6%88%E5%A4%B1%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="记录vps流量离奇消失案件。"><a href="#记录vps流量离奇消失案件。" class="headerlink" title="记录vps流量离奇消失案件。"></a>记录vps流量离奇消失案件。</h1><p>在想要使用，发现打不开，然后自己的端口也没有。在自己的服务主页，发现商品的被管理员关闭。通过工单询问后得知，因为带宽被消耗一空，向管理员进行申诉。<br>未来怎么避免再此发生。</p><h1 id="记录自己的VPS盗刷"><a href="#记录自己的VPS盗刷" class="headerlink" title="记录自己的VPS盗刷"></a>记录自己的VPS盗刷</h1><p>首先定位为什么被盗刷。<br>分析已知信息。自己被盗刷的时间应该是25号左右。盗刷时间大概一整天。结合25号自己的作为，有这么几种可能性：</p><ul><li>自己的上传与下载信息没有加密，新建了一个链接，导致被人抓取，意外导致事情的发生。</li><li>VNC软件有问题，被人窃取电脑信息，导致连接。顺便说一嘴，公司也正好发生了不应该的上传信息。但是幸好，经过判断不是自己的账号，但是人魂都被吓走了</li></ul><p>那如何判断呢？<br>如果自己重新登陆上去的时候，发现x-ui面板上有流量统计不正常的记录，那大概率就是因为加密问题。<br>删除不安全的链接。<br>如果上去没有异常现象，那我最好是重置一些密码，把</p><p>自己的VPS搭建成功后并没有每天去巡视，以后有经验的了，必须做一个限制。之后我要上机看看是什么导致的这个原因。<br>可以看到我的流量在不知道什么情况下，流量全部被消耗一空。</p><h1 id="最终结论"><a href="#最终结论" class="headerlink" title="最终结论"></a>最终结论</h1><p>我把账号密码重置为复杂版本就ok了</p><p>说明简单的0000会被强行撞库撞出来。</p>]]></content>
      
      
      <categories>
          
          <category> vps - 知错就改 - 流量消失 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps - 流量消失 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-知错就改-http500</title>
      <link href="/2023/07/11/nginx-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9-http500/"/>
      <url>/2023/07/11/nginx-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9-http500/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-知错就改-http500"><a href="#nginx-知错就改-http500" class="headerlink" title="nginx-知错就改-http500"></a>nginx-知错就改-http500</h1><h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>在logs的error中可以看到</p><p>rewrite or internal redirection cycle while internally redirecting to “&#x2F;index.html”, client: 192.168.*.62, server: localhost, request: “GET &#x2F; HTTP&#x2F;1.1”, host: “192.168.*.62”</p><p>这样的错误提示。</p><p>浏览主页显示也不正常；提示错误500</p><p><img src="https://github.com/2508838014/DrawingBed/blob/main/pictures/image-20230711195233711.png" alt="image-20230711195233711"></p><h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>因为就是路径不正确。需要认真考虑好路径</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>检查root的路径是否有问题。改正问题</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>新知识get</p>]]></content>
      
      
      <categories>
          
          <category> ngnix - 知错就改 - http500 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx - 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-学习路线-基础配置</title>
      <link href="/2023/07/11/nginx-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/07/11/nginx-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-学习路线-基础配置"><a href="#nginx-学习路线-基础配置" class="headerlink" title="nginx-学习路线-基础配置"></a>nginx-学习路线-基础配置</h1><p>今天开始准备了nginx的配置，发现还是有很多的坑等内容的。</p><ol><li>root</li><li>index</li><li>location</li><li>server_name</li></ol><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p>很直白，根目录的意思，但是这个需要注意的是填写内容的方式。</p><p>根据我的亲身体验，默认的起始地址有点可能是nginx.exe所在的位置。</p><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>我对这个的认知理解就是到所匹配的根目录后索要匹配的文件。</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>这个就是重定向的关键</p><pre class="language-conf" data-language="conf"><code class="language-conf">server&#123;#监听的端口listern   80;#监听的ip&#x2F;域名（一台设备可以有多个域名，多个ip）server_name  localhost;#匹配&#x2F;images&#x2F;开头过来的urllocation &#x2F;images&#x2F; &#123;#如果location中与外部有重叠，内部为准server_name    example2;&#125;#没有做任何额外匹配，可以理解成默认情况location &#x2F; &#123;root   &#x2F;34&#x2F;index  index.html index htm&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx - 学习路线 - 基础配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx - 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github与JSDelivr与PicGo与Typora免费图床</title>
      <link href="/2023/07/11/Github%E4%B8%8EJSDelivr%E4%B8%8EPicGo%E4%B8%8ETypora%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/07/11/Github%E4%B8%8EJSDelivr%E4%B8%8EPicGo%E4%B8%8ETypora%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www2014.aspxhtml.com/post-23469/">GitHub+JSDelivr+PicGo+Typora免费白嫖高速稳定图床 - AspxHtml学习分享网</a><br>上面是关注链接，下面是上面的内容的搬运，防止对方消息</p><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>注册&#x2F;登录自己的 GitHub，创建一个新的名字任意的公开仓库。然后上传图片到仓库中，这里我直接使用浏览器端上传的，也可以使用 Git 进行上传。</p><ul><li>在创建的仓库中Upload files。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202306301923325.png" alt="image-20230630191927757"></p><ul><li><p>选择上传的图片，然后提交</p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202306301924822.png" alt="image-20230630192032685"></p></li><li><p>提交之后，就可以在浏览器通过地址进行访问</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;raw.githubusercontent.com&#x2F;你的用户名&#x2F;你的仓库名&#x2F;main&#x2F;文件路径</code></pre></li><li><p>之后就是使用链接进行访问即可</p></li></ul><h2 id="使用jsDelivr进行CDN加速"><a href="#使用jsDelivr进行CDN加速" class="headerlink" title="使用jsDelivr进行CDN加速"></a>使用jsDelivr进行CDN加速</h2><p>前面已经利用 GitHub 仓库实现了图床功能，但是大家都知道，GitHub 在国内访问很慢，甚至经常打不开，那么我们的图片就存在加载速度慢的问题，怎么办呢？<strong>jsDelivr</strong> 可以解决此问题，显著提高图片访问的响应速度，并且开源免费！其官网为：<a href="https://www.jsdelivr.com/">jsDelivr - A free, fast, and reliable CDN for open source</a>。</p><p>使用方法也非常的简单，直接在浏览器通过地址<code>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code>就可以访问 GitHub 上的图片，并且响应速度非常快！其中@发布的版本号可以直接省略，默认加载最新版本，即直接可以简写为<code>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名/文件路径</code></p><p>比如：&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;yifeng-talking&#x2F;pictures&#x2F;avatar.jpg</p><h2 id="使用PicGo上传图片"><a href="#使用PicGo上传图片" class="headerlink" title="使用PicGo上传图片"></a>使用PicGo上传图片</h2><p>前面实现了 GitHub 仓库作为图床，jsDelivr 对图片进行加速。但是每次我们都需要使用 Git 工具或者在 GitHub 仓库中进行上传图片，并且要自己拼接图片地址，非常麻烦，有没有更快速更简洁的方式呢？此时神器 <strong>PicGo</strong> 就派上了用场，同样开源免费！</p><p>PicGo 是一个用于快速上传图片并获取图片 URL 链接的工具，支持多个图床进行使用，其中当然包括我们现在使用的 GitHub 图床了，它同时支持 Windows、macOS、Linux平台，详情可见：<a href="https://github.com/Molunerfinn/PicGo">Molunerfinn&#x2F;PicGo: A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder (github.com)</a></p><p>这里以 Windows 为例，说明 PicGo 的使用方法。</p><ul><li><p>下载并安装 PicGo，&#x2F;&#x2F;github.com&#x2F;Molunerfinn&#x2F;PicGo&#x2F;releases&#x2F;download&#x2F;v2.2.2&#x2F;PicGo-Setup-2.2.2.exe</p></li><li><p>打开 PicGo 软件，找到<code>图床设置</code>中的<code>GitHub图床</code>，填写相关信息。</p><ul><li><p><strong>设定仓库名【必填】</strong>：填写<code>你的用户名/你的仓库名</code>，比如我的 yifeng-talking&#x2F;pictures</p></li><li><p><strong>设定分支名【必填】</strong>：填写<code>main</code></p></li><li><p><strong>设定Token【必填】</strong>：在Github主页点击自己头像后，依次选择【Settings】-&gt;【Developer settings】-&gt;【Personal access tokens】-&gt;【Generate new token】，填写Note描述（随便），设置过期时间Expiration为永不过期No expiration，设定勾选【repo】，然后点击下方的【Generate token】生成一个Token，这个Token只会显示一次，自行保存，然后复制到 PicGo 中。</p></li><li><p>指定存储路径【选填】：填写图片要存储的路径，比如填【images&#x2F;】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中，这里不填。</p></li><li><p><strong>设定自定义域名【选填】</strong>：图片上传后，PicGo 会按照【自定义域名+上传的图片名】的方式生成访问链接，放到剪贴板上，因为我们要使用 jsDeliver 进行加速，因而这里设置为<code>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code>，比如我设置为**&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;yifeng-talking&#x2F;pictures**</p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202306301934822.png" alt="image-20230630193403797"></p><ul><li><p>接着就可以在<code>上传区</code>，将自己的图片上传，甚至可以直接将剪切板的截图上传，上传成功后会直接将相应链接复制到剪切板中，我们就可以直接复制到博客（MarkDown 编辑器）中。</p></li><li><p>在<code>PicGo设置中</code>，可以自定义一些设置，比如上传前重命名、时间戳重命名等，自行设置。</p></li></ul></li></ul></li></ul><h2 id="Typora配置PicGo上传"><a href="#Typora配置PicGo上传" class="headerlink" title="Typora配置PicGo上传"></a>Typora配置PicGo上传</h2><p>​      前面使用了 PicGo 工具快速上传图片并获取图片 URL 链接，方便了很多，但是每次都要先在 PicGo 中进行上传，然后将剪切板中链接复制到 MarkDown 编辑器中，有没有更优雅简便的方式，可以将两步合二为一呢？答案是<strong>Typera+PicGo</strong>。</p><p>Typera 是一款轻便简洁的 Markdown 编辑器，可以即时渲染，并且完全免费，推荐大家用此软件进行写作，其官网为：<a href="https://www.typora.io/">Typora — a markdown editor, markdown reader.</a></p><p>下面介绍 Typora 结合 PicGo 实现上传功能。</p><ul><li><p>下载 Typora，网址<a href="https://www.typora.io/#windows">Typora — a markdown editor, markdown reader.</a></p></li><li><p>打开 PicGo，在<code>PicGo设置</code>中，点击【设置 Server 】，将监听端口修改为：36677</p></li><li><p>打开 Typera，点击【文件】 -&gt; 【偏好设置】-&gt; 【图像】，然后进行如下配置，其中 PicGo 路径是你的 PicGo 的安装路径。</p><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202306301936343.png" alt="image-20230630193601321"></p></li><li><p>在 Typera 中书写文章，插入图片（也可以直接将截图复制）时会自动将图片进行上传，并显示在文章中，非常的方便。当然插入图片时也可以不选择上传图片，也就是不自动上传图片，可以手动在图片上右击上传图片。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed//pictures/202306301936975.png" alt="image-20230630193647949"></p><p>以上就是使用 <code>GitHub</code> + <code>jsDelivr</code> + <code>PicGo</code> + <code>TyPora</code> 搭建免费稳定图床的全过程，希望对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 小工具 - 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-学习路线-删除文章</title>
      <link href="/2023/07/10/hexo-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/10/hexo-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-学习路线-删除文章"><a href="#hexo-学习路线-删除文章" class="headerlink" title="hexo-学习路线-删除文章"></a>hexo-学习路线-删除文章</h1><p>有的时候有些文章我们需要删除，因为写的太烂。但是怎么删除也是一个问题。直接删除好像是会导致文件的生成错误。</p><p>所以需要进行一些额外的操作。</p><ol><li><p>打开source目录下_post文件夹下的需要删除的文章，进行删除</p></li><li><p>进入hexo的界面。执行</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo g -d</code></pre></li><li><p>删除完成。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 学习路线 </category>
          
          <category> 删除文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 删除文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-学习路线-tags与categories的认识</title>
      <link href="/2023/07/10/hexo-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-tags%E4%B8%8Ecategories%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
      <url>/2023/07/10/hexo-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-tags%E4%B8%8Ecategories%E7%9A%84%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-学习路线-tags-categories"><a href="#hexo-学习路线-tags-categories" class="headerlink" title="hexo-学习路线-tags,categories"></a>hexo-学习路线-tags,categories</h1><p>虽然自己写了很多次的博客，但是tags与categories还是没有分清区别。这里就进行一次区分。</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><ul><li><p>顺序性：不区分先后</p></li><li><p>层级：不区分层级</p></li></ul><h2 id="categories"><a href="#categories" class="headerlink" title="categories"></a>categories</h2><ul><li><p>顺序性：顺序有一定的影响</p></li><li><p>层级：区分多层层级</p></li></ul><pre class="language-markdown" data-language="markdown"><code class="language-markdown">categories:<span class="token list punctuation">-</span> category1<span class="token list punctuation">-</span> category2</code></pre><p>等价于</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">categories:<span class="token list punctuation">-</span> category1<span class="token list punctuation">-</span> category2</code></pre><p>等价于</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">categories:<span class="token list punctuation">-</span> [category1,category2]</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> 学习路线 </category>
          
          <category> tags </category>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> tags </tag>
            
            <tag> [object Object] </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-自定义事件的解绑</title>
      <link href="/2023/07/10/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A7%A3%E7%BB%91/"/>
      <url>/2023/07/10/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A7%A3%E7%BB%91/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-自定义事件的解绑"><a href="#vue-学习路线-自定义事件的解绑" class="headerlink" title="vue-学习路线-自定义事件的解绑"></a>vue-学习路线-自定义事件的解绑</h1><p>在vue中可能会出现自己需要把自己定义的事件从之前的组件上解绑</p><h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><p>解绑事件有多个方案:</p><ul><li>在被绑定的组件内</li></ul><pre class="language-vue" data-language="vue"><code class="language-vue">methods: &#123;unbindmethod1()&#123;this.$off(&#39;eventName&#39;)&#x2F;&#x2F;解绑自定义事件&#125;unbindmethod2()&#123;this.$off(&#39;eventName1&#39;,&#39;eventName2&#39;)&#x2F;&#x2F;解绑多个自定义事件&#125;unbindmethod3()&#123;this.$off()&#x2F;&#x2F;解绑多个自定义事件&#125;&#125;</code></pre><p>注意：在组件被销毁之后，自定义事件全部销毁，但是原生事件还是可以生效的。</p><ul><li>在父组件内</li></ul><pre><code class="vue">&lt;template&gt;    &lt;myComponent @myEventName1=&#39;myMethodName1&#39;&gt;&lt;/myComponent&gt;    &lt;myComponent @myEventName1=&#39;myMethodName2(value)&#39;&gt;&lt;/myComponent&gt;&lt;/template&gt;&lt;script&gt;    methods:&#123;        //无参绑定        myMethosName1()&#123;            console.log(&quot;123&quot;)        &#125;,       //有参绑定       myMethosName2(value)&#123;            console.log(&quot;123&quot;)        &#125;,    &#125;&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 自定义事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 自定义事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-学习路线-自定义事件的绑定</title>
      <link href="/2023/07/10/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A/"/>
      <url>/2023/07/10/vue-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-学习路线-自定义事件绑定"><a href="#vue-学习路线-自定义事件绑定" class="headerlink" title="vue-学习路线-自定义事件绑定"></a>vue-学习路线-自定义事件绑定</h1><h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>首先自定义的事件是通过两个方面来进行绑定的。一个是父组件，一个是子组件。</p><h2 id="事件的绑定-1"><a href="#事件的绑定-1" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>首先在父组件中填入内容：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;myComponent @myEventName1&#x3D;&#39;myMethodName1&#39;&gt;&lt;&#x2F;myComponent&gt;&lt;myComponent @myEventName1&#x3D;&#39;myMethodName2(value)&#39;&gt;&lt;&#x2F;myComponent&gt;&lt;&#x2F;template&gt;&lt;script&gt;    methods:&#123;        &#x2F;&#x2F;无参绑定        myMethosName1()&#123;            console.log(&quot;123&quot;)        &#125;,       &#x2F;&#x2F;有参绑定       myMethosName2(value)&#123;            console.log(&quot;123&quot;)        &#125;,    &#125;&lt;&#x2F;script&gt;</code></pre><p>子组件myComponent中填入如下内容</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;button @ckick&#x3D;&#39;myChildMethodName1&#39;&gt;&lt;&#x2F;button&gt;&lt;button @ckick&#x3D;&#39;myChildMethodName2(value)&#39;&gt;&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;    methods:&#123;        无参绑定        myChildMethosName1()&#123;            console.log(&quot;234&quot;)            this.e$emit(&quot;myEventName1&quot;)        &#125;,        &#x2F;&#x2F;有参绑定        myChildMethosName2(value)&#123;            console.log(&quot;234&quot;)            this.e$emit(&quot;myEventName1&quot;,value)        &#125;,    &#125;&lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue - 学习路线 - 自定义事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习路线 </tag>
            
            <tag> 自定义事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水上漂流的奇妙之旅</title>
      <link href="/2023/07/02/%E6%B0%B4%E4%B8%8A%E6%BC%82%E6%B5%81%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/"/>
      <url>/2023/07/02/%E6%B0%B4%E4%B8%8A%E6%BC%82%E6%B5%81%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h1 id="水上漂流的奇妙之旅"><a href="#水上漂流的奇妙之旅" class="headerlink" title="水上漂流的奇妙之旅"></a>水上漂流的奇妙之旅</h1><p>故事的开头还要从一次水上乐园开始。</p><h2 id="事情的开章"><a href="#事情的开章" class="headerlink" title="事情的开章"></a>事情的开章</h2><p>夏日炎炎，一行三人甲乙丙，三个当代大学生准备前往水上乐园欣赏夏日的美景与感受玩水的乐趣。</p><p>三人在游玩了几个惊险刺激的项目后，突然一个水上漂流的内容引起了三人的注意。作为这个水上乐园唯一的内部收费项目，它必然有着自己独到的特点才能脱颖而出。于是三人很快啊，就交了租金，租三个单人的橡皮船，踏上了漂流之旅。却不曾想，这成为了不幸的开端。</p><p>甲没有学过游泳之类的，手脚比较笨重，在坐到橡皮船上，一招不慎，翻了个底朝天。但也幸好水不深，很快就站稳了脚步，准备重新出发。在工作人员的帮助下，也顺利坐了上去。其余两人手脚伶俐的坐到了属于自己的橡皮船上。即将开始漂流之旅。</p><p>漂流还没开始，乙就发现甲的眼镜不见了，顿时甲开始慌了神，立刻从橡皮船上翻了出来，开始寻找着眼镜，期盼着丢失的时间不长，还是可以找到。在甲寻找的时间里，乙丙也由于水流的作用，一路向下，但也心中牵挂着甲的事情，早早的结束了漂流，来到起点准备一起帮忙寻找。</p><h2 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h2><p>在这水道中找到一个小小的眼镜，就仿佛大海捞针。甲在经过翻来覆去的寻找之后，终究还是决定放弃，在水流的作用下，安静的享受这漂流的感受。慢慢的，顺着水流，甲终于还是回到了起点，在这里。甲乙丙三人再次碰了头。作为好兄弟，怎么能看着兄弟东西丢失自己无动于衷呢，于是三人再次燃起战火，开始了全地图的寻找。</p><h2 id="刻舟求剑"><a href="#刻舟求剑" class="headerlink" title="刻舟求剑"></a>刻舟求剑</h2><p>突然乙想出来了一个想法，我们这慢慢找和刻舟求剑有什么区别啊，不如我拿我眼镜测一下水速，不就能判断出大致位置，这不找的更快嘛。说干就干，乙叫来丙帮忙看着。并且嘱咐着，我一放手你就抓紧抓着，丙一听这个主意好啊。三，二，一，放手。只见眼镜入水一瞬间，便顺着水流快速跑去，乙一伸手，没摸到。丙这眼疾手快，右手一探，摸回来一把水，水道里却再也不见眼镜的踪影。</p><p>这下好了，一个人丢眼镜变成两个人丢眼镜。都是大学生，离开了眼镜仿佛一个睁眼瞎，大家这下找眼镜的需求变成了必须了，三人中出现两个瞎子可回不了家。幸好，整个水道不算那么长，整个一圈也就漂流三四十分钟的水准，一路摸索着，终究从起点，又即将到达起点。大家的士气也慢慢降下来，准备接受这个答案，回去先配眼镜去了。</p><h2 id="守株待兔"><a href="#守株待兔" class="headerlink" title="守株待兔"></a>守株待兔</h2><p>忽然，一个救生员游了过来，原来这一路上他们看到这三人的动作也帮忙找了眼镜，居然真的在接近终点的地方找到了一副眼镜，经过辨认。这是来自甲的眼镜，这下三人的士气再次振奋起来，抛弃负重把橡皮船放到岸边，全力以赴找眼镜，既然能找到第一个，就可以找到第二个。大海捞针也未尝不可！</p><p>在询问过前面安全员怎么发现的方式，三人决定拉网，守株待兔的寻找。原来是在接近终点的地方发现的。原来水流这么强啊，不如我们三人就蹲在这守住，就看眼镜会不会飘过来。守株待兔模式启动。</p><p>伴随着守株待兔与时不时的调整位置，皇天不负有心人。终于是让乙脚下踩到了眼镜，刚出来一看，旁边就有一个女生说，这就是我的眼镜，乙简单辨认了一下，真的不是自己的眼镜，只好失望的把眼镜交还给了别人。但是有一就有二，三人一路上疯狂寻找，却也怎么都找不到另外的眼镜，太阳也慢慢的从天空中隐去了自己的身影。不找了，三人在最后的尝试后，决定放弃了寻找。</p><p>先把橡皮艇还回去吧，三人来到了之前放橡皮艇的地方。是这里吗？是这里吧！三人对视了一眼，原来放着其中两人橡皮船的地方赫然只剩下了一个。真TM倒霉啊，眼镜丢了，这橡皮船也丢了。三人郁闷的回到了起点，正打算让工作人员帮忙打听一下，做最后的安排的乙却突然发现，这旁边的一个人的橡皮船怎么和自己的一样啊，他们明明只有两个人，却有三个橡皮船。便上去交涉，居然真的是自己的橡皮船。失而复得的喜悦短暂的压住心情，来到归还地点，三人因为超时却也还又被扣了一笔钱。</p><p>眉笔，真的眉笔。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/02/Untitled/"/>
      <url>/2023/07/02/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/18/hello-world/"/>
      <url>/2023/06/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare-优选节点</title>
      <link href="/2023/06/08/cloudflare-%E4%BC%98%E9%80%89%E8%8A%82%E7%82%B9/"/>
      <url>/2023/06/08/cloudflare-%E4%BC%98%E9%80%89%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="cloudflare优选节点"><a href="#cloudflare优选节点" class="headerlink" title="cloudflare优选节点"></a>cloudflare优选节点</h1><p><a href="https://github.com/XIU2/CloudflareSpeedTest/tags">工具下载网址</a></p>]]></content>
      
      
      <categories>
          
          <category> cloudflare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-知错就改-正确密码却无法登录</title>
      <link href="/2023/06/08/centos7-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9-%E6%AD%A3%E7%A1%AE%E5%AF%86%E7%A0%81%E5%8D%B4%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/"/>
      <url>/2023/06/08/centos7-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9-%E6%AD%A3%E7%A1%AE%E5%AF%86%E7%A0%81%E5%8D%B4%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>CentOS7 root 用户正确密码提示:“sorry,that didn’t work.please try again”  </p><h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>CentOS 7.9版本 root用户密码输入正确，出现错误密码提示:“sorry,that didn’t work.please try</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>一，创建普通用户，以前通用户登录  </p><p> 打开终端：输入命令  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">sudo passwd root</code></pre><p>然后输入旧密码，新密码，再确认新密码（输入密码没有任何显示不用管）<br>二，重新以root用户登录，Ok</p>]]></content>
      
      
      <categories>
          
          <category> centos7 - 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知错就改 </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPF-触发多个事件</title>
      <link href="/2023/06/08/WPF-%E8%A7%A6%E5%8F%91%E5%A4%9A%E4%B8%AA%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/06/08/WPF-%E8%A7%A6%E5%8F%91%E5%A4%9A%E4%B8%AA%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="WPF-添加事件"><a href="#WPF-添加事件" class="headerlink" title="WPF-添加事件"></a>WPF-添加事件</h1><p>有时我们需要确定这样的情况。分类再分类。在不同的区域里来触发不同的事件。有的时候还需要叠加触发事件。所以叠加的时候也会有不同的需求。<br>所以我这边看到了一个如何针对进行来实现的表现。<br>在WPF中，事件处理程序的调用遵循事件路由的机制。事件路由指的是从WPF元素树的根节点开始，通过一系列的隧道和冒泡的过程，最终到达事件目标元素的过程。事件处理程序可以被添加到三种不同的路由策略中：   </p><ul><li>直接路由：直接将事件路由到目标元素，只有目标元素的事件处理程序被调用。</li><li>隧道路由：从根元素向下到达目标元素的过程中，先调用元素的事件处理程序，再向下路由。</li><li>冒泡路由：从目标元素向上到达根元素的过程中，先调用元素的事件处理程序，再向上路由。<br>当我们给一个元素添加事件处理程序时，我们可以通过设置handledEventsToo参数来指定事件处理程序是在隧道或冒泡过程中被调用，还是在直接路由中被调用，或者是在所有路由过程中都被调用。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>隧道路由</p><pre class="language-C#" data-language="C#"><code class="language-C#">yourElement.AddHandler(yourEvent, new YourEventHandler(yourMethod), true);</code></pre><p>冒泡路由</p><pre class="language-C#" data-language="C#"><code class="language-C#">yourElement.AddHandler(yourEvent, new YourEventHandler(yourMethod), false);</code></pre><p>四类：<br>isAuto&#x3D;true。仅仅需要修改自己的变量  </p><p>isDown&#x3D;true。  </p><p>两个按键，每个按键都有keydown，keyUp<br>down  </p><table><thead><tr><th align="center">fw&#x2F;bw</th><th align="center">isDown&#x2F;isUp</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">true</td><td align="center">true</td><td align="center">先给反信号false，再给正信号true</td></tr><tr><td align="center">false</td><td align="center">true</td><td align="center">先给正信号false，再给反信号true</td></tr><tr><td align="center">true</td><td align="center">false</td><td align="center">先给正信号false，读取颜色</td></tr><tr><td align="center">false</td><td align="center">false</td><td align="center">先给反信号false，读取颜色</td></tr></tbody></table><p>所以总结，有可能出现的问题，其实在按键结束的时候需要true-》false的发送消息，如果长按超过100ms才是这样的顺序。<br>不然就是false-&gt;true.或许是故意的？<br>长按是关闭，短按是打开。<br>fw是先给反信号false，再让正信号true-》false，读取fwIn颜色——–》它锁，需要先把相关信号关闭才能修改。修改自身<br>bw是先给正信号false，再让反信号true-》false，读取bwIn颜色——–》自锁，需要关闭自身信号关闭才能修改。修改相关信号<br>如果fw与be实际上是差不多的。其实如果把fw的正反信号传入变量互换位置。执行出来的效果就是bw  </p>]]></content>
      
      
      <categories>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基本结构</title>
      <link href="/2023/06/08/java-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/"/>
      <url>/2023/06/08/java-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="java基本结构"><a href="#java基本结构" class="headerlink" title="java基本结构"></a>java基本结构</h1><p>在传统的Java企业应用架构中，通常使用经典的三层架构或四层架构来组织代码。在这些架构中，DAO层通常被归类为数据访问层，而与DAO平级的层级包括以下几个：  </p><ul><li><p>Service层：Service层是业务逻辑层，主要负责处理业务逻辑、事务管理和调用DAO层进行数据访问。在Service层中，通常会对多个DAO方法进行组合，以完成复杂的业务逻辑。同时，Service层还负责对外提供API接口，供其他应用程序或服务调用。  </p></li><li><p>Controller层：Controller层是表现层，主要负责接收请求、处理请求参数、调用Service层处理业务逻辑，并将处理结果返回给客户端。在Web应用程序中，Controller层通常是由Servlet、Struts、Spring MVC等框架来实现。  </p></li><li><p>Utils层：Utils层是工具层，主要负责提供一些工具类和工具方法，用于辅助实现系统的其他功能。例如，日期时间处理、字符串处理、文件上传下载、加密解密等。  </p></li><li><p>Model层：Model层是模型层，主要负责定义业务实体对象和数据传输对象，以及对应的业务逻辑和数据访问方法。在基于Spring框架的应用程序中，Model层通常由POJO（Plain Old Java Object）对象来表示，这些对象包含了与业务实体对象对应的属性和方法。</p></li></ul><p>需要注意的是，以上几个层级的划分是一种常见的做法，实际应用中可能会根据具体的需求和实际情况进行调整和扩展。  </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-ref与reactive</title>
      <link href="/2023/06/07/vue-ref%E4%B8%8Ereactive/"/>
      <url>/2023/06/07/vue-ref%E4%B8%8Ereactive/</url>
      
        <content type="html"><![CDATA[<h1 id="ref与reactive补充"><a href="#ref与reactive补充" class="headerlink" title="ref与reactive补充"></a>ref与reactive补充</h1><p><a href="https://images.cnblogs.com/cnblogs_com/IwishIcould/2021714/o_210828093341bokeyuan.jpg">不错的图像</a></p><h2 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h2><p>reactive与ref一样都是把数据变为响应式，即数据改变立刻在界面中刷新表现出来的数据。<br>ref本质也是reactive，ref(obj)等价于reactive({value: obj})  </p><blockquote><ul><li>vue3中实现响应式数据的方法是就是使用ref和reactive，所谓响应式就是界面和数据同步，能实现实时更新</li><li>vue2中响应式是通过defineProperty实现的，vue3中是通过ES6的Proxy来实现的</li></ul></blockquote><p><a href="https://imgse.com/i/p9uOXHe"><img src="https://s1.ax1x.com/2023/04/25/p9uOXHe.png" alt="p9uOXHe.png"></a></p><p>由于这个ref与reactive的这个等价关系，所以界面中即template中不需要.value,因为reactive会自动添加这个属性。</p><h2 id="差异性"><a href="#差异性" class="headerlink" title="差异性"></a>差异性</h2><p>但是两者还是有些许的区别。</p><ol><li>参数的区别</li></ol><ul><li>reactive中传递的参数必须是json对象或者数组。</li><li>如果传递了其他对象（比如new Date()），在默认情况下修改对象，界面不会自动更新，如果也需要具有响应式，可以通过重新赋值的方式实现。  </li><li>使用ref函数可以处理基本数据，使其变成响应式数据</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://juejin.cn/post/6977929393511514148">Vue3第一篇之ref和reactive详解扩展</a>。其中不止有这个讲解，还有shallowRef和shallowReactive之类的介绍。</li><li><a href="https://www.cnblogs.com/IwishIcould/p/15096750.html">vue3.0中reactive的正确使用姿势 </a></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSHARP-数据库连接插件</title>
      <link href="/2023/06/07/CSHARP-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/06/07/CSHARP-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="CSharp好用的数据库连接插件"><a href="#CSharp好用的数据库连接插件" class="headerlink" title="CSharp好用的数据库连接插件"></a>CSharp好用的数据库连接插件</h1><p>首先介绍个概念</p><h2 id="EF"><a href="#EF" class="headerlink" title="EF"></a>EF</h2><p>Entity Framework：在.NET3.5之前，我们经常编写ADO.NET代码或企业数据访问块来保存或检索底层数据库中的数据。做法是：打开过一个数据库的连接，创建一个DataSet来获取或提交数据到数据库，通过将DataSet中的数据和.NET对象相互转换来满足业务需求。这是一个麻烦且容易出错的过程。Microsoft提供了“Entity Framework”框架，用于自动地执行所有上述与数据库相关的活动。<br>EF是一个适用于.NET开发的开源ORM框架。它使开发人员能够通过领域对象来处理数据，而无需关注存储此数据的基础数据库。使用实体框架，开发人员在处理数据时可以在更高的抽象级别上工作，并且与传统应用程序相比，可以使用更少的代码创建和维护面向数据的应用程序。<br>官方定义：“实体框架是一种对象关系映射器（O&#x2F;RM），它使.NET开发人员能够通过.NET对象来操作数据库。它消除了开发人员通常需要编写的大多数数据访问代码的需求。“</p><p>实体框架工作在业务实体（域类）和数据库之间。它保存实体属性中的数据到数据库，也可以从数据库中检索数据并自动将其转换为实体对象。  </p><h3 id="EF特点"><a href="#EF特点" class="headerlink" title="EF特点"></a>EF特点</h3><ul><li>跨平台   EF Core是一个跨平台的框架，可以在Windows，Linux和Mac上运行。</li><li>建模     EF可以创建具有不同数据类型get &#x2F; set属性的EDM（Entity Data Model&#x2F;实体数据模型）。它使用此模型查询或保存底层数据库的数据。</li><li>查询     EF允许我们使用LINQ从底层数据库中检索数据，同时也支持直接对数据库执行原始SQL查询。</li><li>更改跟踪  EF会跟踪需要提交到数据库的实体实例（属性值）发生的更改。</li><li>保存     EF调用SaveChanges()方法时，根据实体发生的更改，对数据库执行INSERT，UPDATE和DELETE命令。EF还提供了异步的SaveChangesAsync()方法。</li><li>并发     默认情况下，从数据是从数据库中提取开始，EF使用乐观并发来避免我们做的修改被其他用户覆盖。</li><li>事务     EF在查询或保存数据时自动执行事务管理。它还提供自定义事务管理的选项。</li><li>缓存     EF包括开箱即用的第一级缓存。因此，重复查询将从缓存中返回数据，而不是访问数据库。</li><li>配置     EF允许我们使用注释属性配置EF模型，也可以使用Fluent API来覆盖默认约定。</li><li>迁移    EF提供了一组迁移命令，我们可以在NuGet Package Manager控制台或命令行界面中执行这些命令来创建或管理底层数据库计划。</li></ul><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>EF的组成简单总结如下：</p><ol><li>EDM(实体数据模型): EDM包含三个主要部分——概念模型,映射和存储模型。</li></ol><ul><li>概念模型（entity）: 概念模型包含了模型类和它们之间的关系。 这将是独立于数据库表设计。  </li><li>存储模型(data): 存储模型是数据库设计模型,包括表、视图、存储过程、以及它们之间的关系和钥匙。</li><li>映射(mapping): 映射由概念模型如何映射到存储模型的信息组成。</li></ul><ol start="2"><li><p>LINQ To Entity（L2E）: L2E是一种的查询实体对象的语言， 它返回在概念模型中定义的实体。 </p></li><li><p>Entity SQL: Entity SQL是一个类似于L2E的查询语言。 然而,它比L2E更加复杂。</p></li><li><p>Object Services(对象服务)：对象服务是访问数据库中的数据并返回数据的主要入口点。它负责数据实例化，把Entity Client Data Provider（下一层）的数据转换成实体对象。</p></li><li><p>Entity Client Data Provider：主要职责是将L2E或Entity Sql转换成数据库可以识别的Sql查询语句，它通过ADO.Net Data Provider向数据库发送或者索取数据。</p></li><li><p>ADO.Net Data Provider：使用标准的Ado.net与数据库通信。</p></li></ol><h2 id="freeSql"><a href="#freeSql" class="headerlink" title="freeSql"></a>freeSql</h2><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>ADO.NET</p>]]></content>
      
      
      <categories>
          
          <category> CSHARP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSHARP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-@type/@next</title>
      <link href="/2023/06/07/npm-type-next/"/>
      <url>/2023/06/07/npm-type-next/</url>
      
        <content type="html"><![CDATA[<h1 id="types-next"><a href="#types-next" class="headerlink" title="@types.@next"></a>@types.@next</h1><p>npm一般用于安装各种包，来辅助我们的开发<br>经常我们能看到一些命令</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install @types&#x2F;****</code></pre><p>这种就是在安装ts库中的包</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install @next&#x2F;****</code></pre><p>@types和@next是针对不同的情况而设置的不同的npm包。</p><h2 id="types"><a href="#types" class="headerlink" title="@types"></a>@types</h2><p>@types是TypeScript的类型定义文件，它们是由TypeScript社区创建的一组npm包，用于定义各种JavaScript库和框架的类型。当我们在TypeScript中使用JavaScript库时，需要引入相应的类型定义文件，以便在编译期间检查类型错误。 </p><p>例如，当我们想要在TypeScript中使用jQuery时，需要先安装jQuery的类型定义文件@types&#x2F;jquery，然后才能在代码中正确地使用jQuery。  </p><h2 id="next"><a href="#next" class="headerlink" title="@next"></a>@next</h2><p>@next则是用于指向下一个版本的npm包。通常情况下，当我们使用npm安装某个库或框架时，会安装最新的稳定版本。但是，有时我们可能想要尝试最新的测试版或开发版，这时就可以使用@next指向下一个版本。  </p><p>例如，在Vue 3发布之前，我们可以使用npm install vue@next命令来安装Vue 3的开发版。这样，我们就可以在项目中尝试Vue 3的新特性，同时也可以帮助Vue社区测试和改进Vue 3。  </p><p>总之，@types和@next是不同的npm包，分别用于类型定义和指向下一个版本。在使用时需要根据具体情况进行选择。 </p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-save,save-dev,D,S的区别</title>
      <link href="/2023/06/06/npm-save-save-dev-D-S%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/06/06/npm-save-save-dev-D-S%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="npm中的save-save-dev-D-S的区别"><a href="#npm中的save-save-dev-D-S的区别" class="headerlink" title="npm中的save,save-dev,D,S的区别"></a>npm中的save,save-dev,D,S的区别</h1><p>看到有些 node.js 的包安装的时候都加上 –save-dev 参数，不知道这参数是做什么的，加和不加有什么区别吗？  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install xxx --save-dev</code></pre><p>当你为你的模块安装一个依赖模块时，正常情况下你得先安装他们（在模块根目录下npm install module-name），然后连同版本号手动将他们添加到模块配置文件package.json中的依赖里（dependencies）。  </p><p>-save和save-dev可以省掉你手动修改package.json文件的步骤。  </p><h2 id="save，save-dev的区别"><a href="#save，save-dev的区别" class="headerlink" title="save，save-dev的区别"></a>save，save-dev的区别</h2><ul><li>save-配置在package.json中的dependencies中</li><li>save-dev配置在package.json的devdependencies中<br>dependencies与devdependencies的区别就是，前者是生产时的依赖，后者时开发时的依赖。<br>开发的依赖，顾名思义，在开发的时候会使用，但是开发结束，进行打包的时候，这部分内容就不打包进入了。<br>所以这里应该都是辅助我们开发的工具类  <pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span>  <span class="token property">"echarts"</span><span class="token operator">:</span> <span class="token string">"^5.4.1"</span><span class="token punctuation">,</span>  <span class="token property">"element-plus"</span><span class="token operator">:</span> <span class="token string">"^2.2.28"</span><span class="token punctuation">,</span>  <span class="token property">"v-viewer"</span><span class="token operator">:</span> <span class="token string">"^3.0.11"</span><span class="token punctuation">,</span>  <span class="token property">"vite-plugin-style-import"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^3.2.45"</span><span class="token punctuation">,</span>  <span class="token property">"vue-draggable-next"</span><span class="token operator">:</span> <span class="token string">"^2.1.1"</span><span class="token punctuation">,</span>  <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^17.0.1"</span><span class="token punctuation">,</span>  <span class="token property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"^4.1.6"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"@types/node"</span><span class="token operator">:</span> <span class="token string">"^18.11.19"</span><span class="token punctuation">,</span>  <span class="token property">"@vitejs/plugin-basic-ssl"</span><span class="token operator">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>  <span class="token property">"@vitejs/plugin-vue"</span><span class="token operator">:</span> <span class="token string">"4.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"@vue/tsconfig"</span><span class="token operator">:</span> <span class="token string">"^0.1.3"</span><span class="token punctuation">,</span>  <span class="token property">"npm-run-all"</span><span class="token operator">:</span> <span class="token string">"^4.1.5"</span><span class="token punctuation">,</span>  <span class="token property">"unplugin-auto-import"</span><span class="token operator">:</span> <span class="token string">"^0.13.0"</span><span class="token punctuation">,</span>  <span class="token property">"unplugin-vue-components"</span><span class="token operator">:</span> <span class="token string">"^0.23.0"</span><span class="token punctuation">,</span>  <span class="token property">"vite"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"vue-tsc"</span><span class="token operator">:</span> <span class="token string">"^1.0.12"</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="简写模式"><a href="#简写模式" class="headerlink" title="简写模式"></a>简写模式</h2><p>有的时候发现上面这两种都不是，而是一个大写字母，那其实就是简写模式。下面是对应的简写。</p><ul><li>-S, –save: Package will appear in your dependencies.</li><li>-D, –save-dev: Package will appear in your devDependencies.</li><li>-O, –save-optional: Package will appear in your optionalDependencies.</li></ul>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-mixin混合</title>
      <link href="/2023/06/05/vue-mixin%E6%B7%B7%E5%90%88/"/>
      <url>/2023/06/05/vue-mixin%E6%B7%B7%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h1><p>根据前面的知识，自己可以知道，vue可以拥有服用css的能力，但是不同的页面往往也有差不多的方法需要实现。<br>虽然说可以通过复用组件的方案进行表现，但是使用上还是不如直接复用一些函数来的舒服。<br>mixin的作用就是用于复用方法的东西。  </p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先复用方法，那肯定是一个js&#x2F;ts的文件用于存储。别的组件想要使用，也是先需要引用，再使用。<br>被复用的方法</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> hunhe <span class="token operator">=</span><span class="token punctuation">&#123;</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"被复用的方法"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>，mounted（）<span class="token punctuation">&#123;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"一些其他时间段的方法也可以使用"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>调用混合的vue组件</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">"showName"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>hunhe<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../mixin'</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"***"</span><span class="token punctuation">,</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>mixins<span class="token operator">:</span><span class="token punctuation">[</span>hunhe<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>其中注意，即便只有一个，也是要使用mixins。<br>不仅可以带入方法，也可以带入数据。但是如果有数据的名称重复，以vue组件的为主。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> hunhe2 <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"xuexiao"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"被复用的方法"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>，mounted（）<span class="token punctuation">&#123;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"一些其他时间段的方法也可以使用"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>上面提及data中会以为主，但是mounted中的方法不是说只存在一个，而是两个都有。即两个console.log都会打印出来相关的东西。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 学习系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 学习系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#Sharp-SQL-Server的连接池</title>
      <link href="/2023/05/21/C-Sharp-SQL-Server%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2023/05/21/C-Sharp-SQL-Server%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>连接池实际上都是由sqlServer进行管理的。<br>并且现在都是默认启动了。最小0，最大100.可以修改这个默认配置。<br>刚才其实是在搞如何实现内容。<br>刚刚在项如果我在同一个程序中有实例化了多个数据库套接字，创建了多个连接，而不在相同的连接池。<br>那样岂不是蠢，白白占用了更多的资源（连接池的最小数目*创建的套接字）。<br>所以目前的想法,是公用同一个套接字。那怎么实现，<br>静态变量可以。然后分散在多个程序中。<br>其中还有可以注意的。这里其实dispose与close是差不多的。<br>释放只是多了把中间的连接字符串清空，它也是返回了连接池，<br>close，是直接返回连接池。<br>如果真的是不返回连接池的话，那岂不是很多就是没有用的了。所以还是一致的。这个是从别人文章中看到的。不知道现在还是不是。<br>毕竟现在这些还是不好说的内容。那个文档还是2013年的了。<br><a href="https://blog.csdn.net/liuyaokai1990/article/details/110417590">wen</a></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis学习</title>
      <link href="/2023/05/21/mybatis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/05/21/mybatis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis使用"><a href="#mybatis使用" class="headerlink" title="mybatis使用"></a>mybatis使用</h1><p>第一次听到这个还是我在做毕业课设，现在的我终于想去了解一下<br>这个主要功能就是用于sql的增删改查。</p><h2 id="前世今生"><a href="#前世今生" class="headerlink" title="前世今生"></a>前世今生</h2><p>mybatis 本是apache的一个开源项目iBatis,<br>2010年这个项目由apache迁移到了googlecode，并且改名为MyBatis，2013年11月迁移到Github。<br>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。<br>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。<br>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(普通的 Java对象)映射成数据库中的记录<br>Mybatis官方文档 :<br><a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></p><p>GitHub :<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>总结一下，一共这几步</p><ol><li>创建数据库</li><li>导入jar包</li><li>编写xml配置，用于连接数据库的基本参数</li><li>编写工具类，用于连接数据库的实例</li><li>创建数据库对应的实例类</li><li>编写mapper接口，用于增删改查的方法的抽象层次。如果使用注解在其中使用sql语句，那就可以不要步骤七</li><li>编写Mapper.xml 文件。由于我们使用了mybatis,所以这的xml文件相当于我们原来dao得实现类daoimpl。namespace属性对应着接口，不能写错，标签表示是个查询语句。id 属性对应着接口的方法，result Type代表返回得类型，即对应这pojo实体。实际也就是具体的查询语句</li></ol><p>具体操作图片等待后续实现。<br>感觉还是很舒服的使用。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.cnblogs.com/xiezhr/p/17343390.html">全文的主要参照物</a></p>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-踩坑记录-控件不显示</title>
      <link href="/2023/04/25/vue-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E6%8E%A7%E4%BB%B6%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
      <url>/2023/04/25/vue-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E6%8E%A7%E4%BB%B6%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue知错就改"><a href="#Vue知错就改" class="headerlink" title="Vue知错就改"></a>Vue知错就改</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>vue3+vite+ts+element Plus</li><li>vsCode</li><li>windows11</li></ul><h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p>没啥提示，就是<em>el-backtop</em>控件不能正确显示</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>现在想一想，应该是两个原因。</p><ol><li>一个是target应该绑定在实际要检测的组件上面，特别是它们具有overflow：auto这样的属性的时候。</li><li>自己的屏蔽广告之类的插件会不会有影响。我就是发现自己的代码没有问题，但是怎么都无法显示。vue插件查看，也只是有这个控件，强制显示也会报错。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试的时候尽量保证环境干净，避免有影响。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> el-backtop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> el-backtop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-踩坑记录-css与scss</title>
      <link href="/2023/04/25/vue-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-css%E4%B8%8Escss/"/>
      <url>/2023/04/25/vue-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-css%E4%B8%8Escss/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-踩坑记录"><a href="#Vue-踩坑记录" class="headerlink" title="Vue-踩坑记录"></a>Vue-踩坑记录</h1><p>因为贪图scss的语法很方便。于是使用了这个。同时我也用了.css文件存储了一些比较常用的变量。<br>通过src引入<br>使用lang&#x3D;’scss’设置style。  </p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>没有报错，就是发现使用scss语法的内容属性没有生效。f12查找对应属性，发现没有这个属性。但是可以在页面解析中发现的确引用了自定义的类。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>scss语法的部分因为某种原因丢失。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>经过查询得知src方案引入css文件与scss并不能共存。<br>将原来的src引入的css文件修改成scss文件。然后引入  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这么看scss有些很鸡肋。如果遇到一个页面中有多个样式。<br>引入是比引入css文件麻烦的。css文件会自动把全部引入。然后scss必须手动把样式匹配上去</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 踩坑记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-css处理顺序</title>
      <link href="/2023/04/25/vue-css%E5%A4%84%E7%90%86%E9%A1%BA%E5%BA%8F/"/>
      <url>/2023/04/25/vue-css%E5%A4%84%E7%90%86%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中css处理的顺序"><a href="#Vue中css处理的顺序" class="headerlink" title="Vue中css处理的顺序"></a>Vue中css处理的顺序</h1><h2 id="简单的介绍下顺序"><a href="#简单的介绍下顺序" class="headerlink" title="简单的介绍下顺序"></a>简单的介绍下顺序</h2><p>说明以下css样式处理的顺序。</p><ol><li>处理&lt;style&gt;标签中的CSS预处理器（例如Sass、Less等）。其实就是将预处理部分给处理成普通css</li><li>处理&lt;style&gt;标签中的CSS普通css。（style中编写的内容，）</li><li>处理&lt;style&gt;标签中的CSS模块（Module）。（style中编写的内容，）</li><li>处理&lt;style&gt;标签中的引入的CSS模块（Module）。（引入的css文件）</li><li>处理&lt;template&gt;标签中的普通CSS。（template中的style）</li><li>处理全局CSS。</li></ol><p>在Vue中，&lt;style&gt;标签中的普通CSS和模块CSS有以下区别：<br>作用域：普通CSS的作用域是全局的，而模块CSS的作用域是组件内部的。使用模块CSS可以避免样式污染全局作用域，同时也可以避免组件之间样式的冲突。<br>选择器：普通CSS可以使用全局选择器和后代选择器等高级选择器，而模块CSS只能使用基本选择器（如类选择器、标签选择器等）。这是因为模块CSS只能作用于当前组件内部，无法影响其他组件和全局作用域。<br>命名：普通CSS可以使用任何命名方式，而模块CSS只能使用类名（class）和属性选择器（[attr]）命名。这是因为在使用模块CSS时，类名和属性选择器可以通过编译器进行处理，从而生成唯一的类名，避免了组件之间的命名冲突。<br>引用方式：普通CSS可以通过&lt;link&gt;标签或@import语句引入外部CSS文件，而模块CSS只能通过&lt;style&gt;标签内嵌定义或import语句引入其他模块CSS。<br>需要注意的是，为了避免命名冲突，模块CSS的类名和属性选择器的命名应该具有语义化，同时也应该尽量短小精悍，以减小编译后的文件大小。  </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>CSS预处理器会被先处理，因为它们需要被转换为普通的CSS，以便后续的处理。<br>处理完CSS预处理器后，会处理普通的CSS。在处理普通CSS时，Vue3会自动将组件中的选择器转换为包含组件唯一ID的选择器，以防止全局污染。<br>处理完普通CSS后，会处理CSS模块。CSS模块是Vue3中新增的功能，它可以使组件内部的CSS样式只在组件内部有效，而不会影响其他组件。<br>在Vue中，使用@import等方式引入外部CSS文件时，这些CSS文件也会按照以上的顺序被处理。具体来说，Vue会将组件的模板和样式编译成一个渲染函数，并将这个渲染函数作为组件的渲染函数。在这个渲染函数中，Vue会将组件的数据和模板进行关联，并生成对应的DOM节点，然后将CSS样式应用到这些DOM节点上。<br>在应用CSS样式时，Vue会先处理组件中直接定义的样式，然后才会处理通过@import等方式引入的外部CSS文件中的样式。如果组件中的样式与外部CSS文件中的样式存在冲突，那么后面的样式会覆盖前面的样式。<br>最后，会处理全局CSS。全局CSS会影响整个应用程序，但是需要注意不要覆盖组件内部的样式。  </p><h2 id="自己测试"><a href="#自己测试" class="headerlink" title="自己测试"></a>自己测试</h2><p>自己测试<br>引入的文件中有样式A，style模块中有样式B依托于样式A。—–样式B没有正常显示。说明样式B先于样式A</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> css </category>
          
          <category> scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
            <tag> vue </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的命名规范</title>
      <link href="/2023/04/25/vue%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2023/04/25/vue%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>非常优秀<br><a href="https://blog.csdn.net/u011269322/article/details/120312226">参考链接</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 命名规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 命名规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机应用与小程序的开发</title>
      <link href="/2023/04/25/%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E4%B8%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%8F%91/"/>
      <url>/2023/04/25/%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E4%B8%8E%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="开发手机应用与小程序"><a href="#开发手机应用与小程序" class="headerlink" title="开发手机应用与小程序"></a>开发手机应用与小程序</h1><p>小程序平台与原生应用平台。<br>一些手机应用使用的是native+小程序这种方案。<br>native其实是表示的是原生应用。比如，安卓与ios。正常来说是两种不同的应用。<br>但是套个应用框架，后续的开发也是非常麻烦的。同样的功能需要写不同的代码。<br>所以出现了这种native+小程序的方案。<br>里面部分的功能通过小程序来实现。小程序虽然也是分不同的平台，比如微信，阿里巴巴，百度等。<br>但是还是有一些跨平台的应用框架。与跨平台的小程序应用框架。<br>在中国比较好用的跨平台开发框架有以下几种：  </p><ul><li>uni-app：由国内公司DCloud开发，使用Vue.js框架，可以编写跨平台应用程序，支持iOS、Android、Web、微信小程序、支付宝小程序、百度小程序、QQ小程序等平台。因为在国内受欢迎且易于上手，已经成为了许多中小型公司和开发者的首选。</li><li>Flutter：由Google开发，虽然是国外的框架，但在国内也有很多开发者使用，使用Dart语言编写，可以编写高性能、漂亮的应用程序，支持iOS、Android、Web、桌面平台等。Flutter在国内的发展速度也很快，逐渐被越来越多的开发者所接受。</li><li>React Native：由Facebook开发，使用JavaScript编写跨平台应用程序，支持iOS和Android平台。ReactN-ative在国内也有一定的使用率，但因为其学习曲线较陡峭，可能需要一定的技术积累才能掌握。  </li><li>Taro：由京东凹凸实验室开发，使用React框架，可以编写跨平台应用程序，支持微信小程序、支付宝小程序、百度小程序、H5、RN等平台。因为由国内大型企业开发，因此在国内也有不少的用户。<br>以上几种跨平台开发框架都有其优点和局限性，开发者可以根据自己的需求和技术背景选择合适的框架。</li></ul><p>搜索的时候也看到了filp这种<br>看到了许多软广。<br>区别就是uni-app与uniMPSDK生成的app仅仅支持自家生成的小程序格式，哪怕微信的原生语法一样，但是也不可以直接使用，需要套一层皮</p>]]></content>
      
      
      <categories>
          
          <category> 手机应用 </category>
          
          <category> 小程序 </category>
          
          <category> 跨平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机应用 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 跨平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps协议认识</title>
      <link href="/2023/04/25/vps%E5%8D%8F%E8%AE%AE%E8%AE%A4%E8%AF%86/"/>
      <url>/2023/04/25/vps%E5%8D%8F%E8%AE%AE%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建的vps通道继续详解"><a href="#搭建的vps通道继续详解" class="headerlink" title="搭建的vps通道继续详解"></a>搭建的vps通道继续详解</h1><p>我自己的vps测试用的<a href="https://my.racknerd.com/aff.php?aff=7790">vps推荐链接</a><br>这边也是跟着视频一知半解，所以这边就开始对于内容进行了一定的搜索，加强了认知。  </p><h2 id="vlmess"><a href="#vlmess" class="headerlink" title="vlmess"></a>vlmess</h2><p>Vlmess 是一种基于 VMess 协议的传输协议，可以支持多种不同的传输方式，包括 TCP、mKCP、WebSocket 和 QUIC 等。<br>而 TLS 和 WebSocket 则是两种常用的 Vlmess 传输方式。  </p><p>在 Vlmess 中，TLS 和 WebSocket 通常是配合使用的。<br>具体来说，TLS 用于对传输数据进行加密和认证，确保传输数据的安全性，<br>而 WebSocket 则用于建立一个双向通信的通道，使得客户端和服务器可以进行实时的双向数据传输。  </p><p>在使用 TLS 传输时，客户端和服务器之间需要先建立一个 TLS 连接。在连接建立之后，客户端会将 Vlmess 的数据包通过 TLS 连接发送到服务器，服务器会解密数据包并转发给目标服务器，同时将响应数据再次加密后发送回客户端。这样可以确保传输过程中的数据不被窃听和篡改。  </p><p>在使用 WebSocket 传输时，客户端和服务器之间需要先建立一个 WebSocket 连接。在连接建立之后，客户端会将 Vlmess 的数据包通过 WebSocket 连接发送到服务器，服务器会解析数据包并转发给目标服务器，同时将响应数据再次封装成 WebSocket 消息发送回客户端。这样可以实现双向通信和实时数据传输。  </p><p>综合起来，Vlmess 可以通过TLS和WebSocket 等协议来保证传输的安全性和稳定性，从而提升传输效率和用户体验。<br>先进行tls连接，然后进行websocket连接。<br>客户端向服务器发送 TLS 握手请求，建立 TLS 连接。<br>服务器验证客户端的身份并返回 TLS 握手响应，建立 TLS 连接。<br>在 TLS 连接上建立 WebSocket 连接。<br>客户端和服务器通过 WebSocket 连接交换 Vlmess 数据包，实现双向通信。</p>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> vlmess </tag>
            
            <tag> ws </tag>
            
            <tag> vmess </tag>
            
            <tag> TLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-css与scss引入</title>
      <link href="/2023/04/25/vue-css%E4%B8%8Escss%E5%BC%95%E5%85%A5/"/>
      <url>/2023/04/25/vue-css%E4%B8%8Escss%E5%BC%95%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue引入样式"><a href="#Vue引入样式" class="headerlink" title="Vue引入样式"></a>Vue引入样式</h1><p>目前知道的主要是两大类型的样式引入</p><ul><li>CSS文件</li><li>SCSS文件</li></ul><blockquote><p>Tips:如果使用lang&#x3D;scss，那样就不可以在此处引入css文件。其他组件内通过全局引入的css还是生效。如果还是引入css文件，css文件生效，但是style中如果使用scss语法的属性均解析失败，无法在界面上显示出来。</p></blockquote><h2 id="css文件"><a href="#css文件" class="headerlink" title="css文件"></a>css文件</h2><p>这个css文件的特点就是引入的话是里面的全部引入。添加到其中的style中。  </p><h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>style<span class="token operator">></span>@<span class="token keyword">import</span> <span class="token string">'@/components/css/home.css'</span><span class="token punctuation">;</span><span class="token comment">/* 在这里编写 该vue 样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="单个vue组件引入"><a href="#单个vue组件引入" class="headerlink" title="单个vue组件引入"></a>单个vue组件引入</h3><p>注意scoped不能忘记，不然就是全局样式</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>style src<span class="token operator">=</span><span class="token string">"@/components/css/home.css"</span> scoped<span class="token operator">></span><span class="token comment">/* 在这里编写 该vue 样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h2 id="SCSS文件"><a href="#SCSS文件" class="headerlink" title="SCSS文件"></a>SCSS文件</h2><h3 id="全局引入-1"><a href="#全局引入-1" class="headerlink" title="全局引入"></a>全局引入</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">></span>@<span class="token keyword">import</span> <span class="token string">"@/components/scss/home.scss"</span><span class="token punctuation">;</span> <span class="token comment">// 使用 @import 引入 SCSS 文件</span><span class="token comment">/* 在这里编写 SCSS 样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="单个vue组件引入-1"><a href="#单个vue组件引入-1" class="headerlink" title="单个vue组件引入"></a>单个vue组件引入</h3><p>此处必须要scope，不然就是全局样式的引入</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scope<span class="token operator">></span>@<span class="token keyword">import</span> <span class="token string">"@/components/scss/home.scss"</span><span class="token punctuation">;</span> <span class="token comment">// 使用 @import 引入 SCSS 文件</span><span class="token comment">/* 在这里编写 SCSS 样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="单个组件中单个内容引入"><a href="#单个组件中单个内容引入" class="headerlink" title="单个组件中单个内容引入"></a>单个组件中单个内容引入</h3><pre class="language-css" data-language="css"><code class="language-css">&lt;style lang=<span class="token string">"scss"</span>><span class="token atrule"><span class="token rule">@use</span> <span class="token string">"@/components/scss/home.scss"</span> with <span class="token punctuation">(</span><span class="token property">scope</span><span class="token punctuation">:</span> <span class="token string">".searchTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token selector">.searchTime</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token selector">span</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #606266<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>&lt;/style></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> css </category>
          
          <category> scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
            <tag> vue </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名证书</title>
      <link href="/2023/04/25/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
      <url>/2023/04/25/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="域名证书"><a href="#域名证书" class="headerlink" title="域名证书"></a>域名证书</h1><p>在互联网上大家用的比较多的还是https这种格式，但是http其实也还有。<br>那这两个的区别就是在域名证书的设定。那我就提一提什么是域名证书。  </p><h2 id="域名证书的作用"><a href="#域名证书的作用" class="headerlink" title="域名证书的作用"></a>域名证书的作用</h2><p>域名证书就是由一些证书颁发机构（CA）颁发的一种数字证书。<br>域名证书是用来证明域名的可靠性，不用域名而是使用ip就可以不用证书。<br>主要用于证明这个网站是安全的，确保网站的可信度与安全性。  </p><h2 id="域名证书的分级"><a href="#域名证书的分级" class="headerlink" title="域名证书的分级"></a>域名证书的分级</h2><p>域名证书通常分为三个不同的级别：DV、OV 和 EV。  </p><ol><li>DV 证书（Domain Validated Certificate）：DV证书是最基本的域名证书，只需要验证域名的所有权，证书颁发机构会发送验证邮件或者验证文件给网站的管理员，确认网站的所有权，然后签发证书。DV 证书的验证过程通常比较简单，成本较低，适合个人和小型企业网站。  </li><li>OV 证书（Organization Validated Certificate）：OV 证书比 DV证书更加严格，需要对网站和企业进行验证。除了验证域名的所有权外，证书颁发机构还需要验证企业的注册信息、地址和电话等信息。OV 证书比 DV 证书提供更高的安全保障，适合中型企业和电子商务网站等。</li><li>EV 证书（Extended Validation Certificate）：EV 证书是最高级别的域名证书，提供了最高级别的安全保障。证书颁发机构在签发 EV 证书之前，需要进行更加严格的验证，包括企业的法律和业务认证、组织结构、财务状况等。在浏览器地址栏中，使用 EV 证书的网站会显示绿色的地址栏，这是最高的信任标志，非常适合金融机构、电子支付和其他涉及高度敏感信息的网站。<br>总之，不同级别的域名证书提供不同级别的安全保障，根据网站的规模和业务需求，可以选择相应级别的证书来保护网站的安全。</li></ol><h2 id="x-ui面板申请泛域名证书"><a href="#x-ui面板申请泛域名证书" class="headerlink" title="x-ui面板申请泛域名证书"></a>x-ui面板申请泛域名证书</h2><p>cloundflare添加一个二级域名添加解析<br>但是ip是设置的一个泛域名解析。<br>所以我通过二级域名访问到我的vps：端口号，理论上应该是可以的。<br>那我为什么不直接用顶级域名呢，因为我配置的是一个泛域名证书，直接用二级域名就可以实现自己的目的。  </p>]]></content>
      
      
      <categories>
          
          <category> https </category>
          
          <category> 域名证书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
            <tag> 域名证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNC</title>
      <link href="/2023/04/25/VNC/"/>
      <url>/2023/04/25/VNC/</url>
      
        <content type="html"><![CDATA[<h1 id="远程连接与vnc"><a href="#远程连接与vnc" class="headerlink" title="远程连接与vnc"></a>远程连接与vnc</h1><p>普通winsdows主机都是有远程连接这个功能的。<br>然后在偶然情况下我了解到了vnc这个东西。也是实现远程连接的功能。<br>互联网上一般不会重复制造轮子的。所以，这两种必然有一定的区别。<br>接下来就分析一下两者的区别。  </p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>VNC使用的是RFB协议来做屏幕分享和远程操作的软件，由著名的AT&amp;T欧洲研究实验室开发。使用时需要客户端软件和服务器软件配合使用。  </p><h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><p>远程桌面使用RDP(Remote Desktop Protocol)远程桌面协议，大部分Windows都默认支持此协议，可以远程接入操作桌面。  </p><h2 id="RFB和RDP区别"><a href="#RFB和RDP区别" class="headerlink" title="RFB和RDP区别"></a>RFB和RDP区别</h2><p>RFB是在服务器端将窗口在显存中画好之后将图像传给客户端，客户端只充当一个图像解码显示的角色；  RDP则将画图的工作交给了客户端，服务器需要了解客户端显示能力的具体情况，以便作出相应调整。  </p><p>RFB主要传图像，RDP主要传指令。就一般应用而言，RFB数据量太大，RDP对客户端要求较高，因此RFB适用于瘦客户端，RDP适用于低速网络。<br>所以云主机应该就是类似RFB协议完成的内容。</p>]]></content>
      
      
      <categories>
          
          <category> VNC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/04/25/docker/"/>
      <url>/2023/04/25/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h2><p>一种虚拟环境的搭建系统，有点类似虚拟机，可以隔绝环境，一键布置。  </p><h2 id="docker的优点"><a href="#docker的优点" class="headerlink" title="docker的优点"></a>docker的优点</h2><p>但是比虚拟机可以更加方便的实现内容的同步。可以实现几个命令的就实现安装。<br>这样就不用考虑环境问题，方便copy别人的代码，你只用安装然后配置一些独有的参数即可完成相关内容。so easy!<br>思考以下我需要吗？<br>好像没有那么需要docker技术。这个是用于不同环境的开发。但是实际上我还是不需要考虑这种情况。  </p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5中的aria与role</title>
      <link href="/2023/04/25/HTML5%E4%B8%AD%E7%9A%84aria%E4%B8%8Erole/"/>
      <url>/2023/04/25/HTML5%E4%B8%AD%E7%9A%84aria%E4%B8%8Erole/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5中的aria与role"><a href="#HTML5中的aria与role" class="headerlink" title="HTML5中的aria与role"></a>HTML5中的aria与role</h1><p>这些都是HTML5针对html tag增加的属性，一般是为不方便的人士提供的功能，比如屏幕阅读器。<br><strong>role</strong>的作用是描述一个非标准的tag的实际作用。比如用div做button，那么设置div 的 role&#x3D;”button”，辅助工具就可以认出这实际上是个button。<br><strong>aria</strong>的意思是Accessible Rich Internet Application，aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如：  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">aria-checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。  </p><h2 id="aria-label"><a href="#aria-label" class="headerlink" title="aria-label"></a>aria-label</h2><p>正常情况下，会在表单里给input组件指定对应的label，当用户tab到输入框时，读屏软件就会读出相应label里的文本。  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>当没有给输入框设计对应的label文本的位置时，aria-label属性为组件指定内置的文本标签。它不在视觉上呈现。  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>此时，当焦点落到该输入框时，读屏软件就会读出aria-label里的内容，即”用户名”。<br>aria-label只有加在可被tab到的元素上，读屏才会读出其中的内容。以下情况，也是可以读出的：  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0″ aria-label=<span class="token punctuation">"</span></span><span class="token attr-name">标签提示内容"</span><span class="token punctuation">></span></span>可被tab的span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h2 id="aria-labelledby"><a href="#aria-labelledby" class="headerlink" title="aria-labelledby"></a>aria-labelledby</h2><p>当想要的标签文本已在其他元素中存在时，可以将其值为该元素的id  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用手机号码注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>表单区添加了role&#x3D;”form”，当跳转到该区域时，不仅会读出”表单区”，也会读出”使用手机号码注册”。  </p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://blog.csdn.net/dearcode/article/details/52218689">HTML5中的aria与role</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> html - aria与role </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> aria与role </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elemen-plus--Virtualized-Table</title>
      <link href="/2023/04/19/elemen-plus-Virtualized-Table/"/>
      <url>/2023/04/19/elemen-plus-Virtualized-Table/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟化的表格"><a href="#虚拟化的表格" class="headerlink" title="虚拟化的表格"></a>虚拟化的表格</h1><p>element plus中普通的表格虽然还是可以使用，但是面对比较大的数据的时候往往会有渲染的问题。特别是如果自己还是希望表格中的内容是可以编辑的情况下，那样这个表格就是table-cell中嵌套一个input框。前端页面的渲染压力更大了。根据我自己的实践经验，如果是嵌套的这种，在数据量到1000的时候就会导致页面渲染不出来直接页面卡死。<br>因此，这里选用Virtualized Table 虚拟化表格来解决这个问题。<br>官方网址<a href="https://element-plus.org/zh-CN/component/table-v2.html">element plus-Virtualized Table</a><br>其实官方给了示例，还是很容易看懂的，也是比较容易复现的。所以我主要是记录自己遇见的坑。<br>这个坑已经完结-最终没有完全选择这个方案，当数据量很大的时候，动态的可编辑的就渲染是很容易造成卡顿，我还是决定弹窗来进行变量的修改。这里只是提供一个自己的思路给大家以供参考。  </p><h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h2><p>这里我原本目标实现的是官方示例中的可编辑的表格。<br>但是与官方不同的是我是一排都需要进行编辑。这里就会有一些官方取巧的部分自己要想办法酌情进行解决。</p><h2 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2 实现思路"></a>2 实现思路</h2><h3 id="2-1-确定编辑位置"><a href="#2-1-确定编辑位置" class="headerlink" title="2.1 确定编辑位置"></a>2.1 确定编辑位置</h3><p>首先是与官方相同，依靠自定义的单元格渲染来实现对应的操作。<br>但是在点击需要编辑的单元格的时候，官方是将整行设置成可编辑，我这里是设置整行和整列来确定编辑的位置。<br>这样的选择的原因是在于：  </p><ol><li>前提，如果界面中是组件类型的渲染是十分消耗资源的。即如果是input状态滚动滚轮，会发现卡顿十分严重，但是官方的却十分丝滑就在于，它设置了如果焦点消失，那样就立刻退出编辑状态，那样仅仅是数据展示状态，就很丝滑。</li><li>官方因为仅仅需要修改一列，因此可以设置成为整行进行编辑，但是我们不行。关键就在于那个焦点消失的条件。如果简单的照搬会发现怎么也无法进入可编辑的状态。因为点击是进入编辑状态了，但是一行中其他列也进入了编辑状态，你在编辑第一列的时候，焦点是不在第二列的。因此此时焦点就判断退出了编辑，那样就将整行的编辑状态退出了。所以怎么点击也没有办法。</li></ol><h3 id="2-2-自定义的渲染器"><a href="#2-2-自定义的渲染器" class="headerlink" title="2.2 自定义的渲染器"></a>2.2 自定义的渲染器</h3><p>除此以外，我还自定义了一些其他的类型的组件比如ElSelect、ElSwitch与ElOption。来丰富界面可编辑选项。<br>但是这个也有一些特别点：</p><ol><li>ElSelect是需要ElOption一起使用的，不然会发现没有可选的选项。</li><li>ElSelect、ElSwitch我是直接在界面中设置编辑激活状态的，这个比一般的文本模式更加消耗资源，也是我最后这个方案被放弃的原因，页面还是有卡顿，但是我为什么还是要选择这种方案呢？</li></ol><ul><li>关键在于一个失去焦点的时机很难把握。</li><li>ElSelect如果像input一样的设置，那样单击的时候，并没有触发什么，但是已经进入编辑模式，此时滚动就很卡。如果设置成失去焦点，就退出编辑。就会引起问题，它的select的顺序是-失去焦点-值改变-收起下拉框。退出编辑模式的情况下是不能界面中改变值的。</li><li>因此这个时机是收起下拉框</li><li>另外要注意变量大小写一定要对，我就是因为ElSwitch的对应变量的开头大小写不对，折腾了一上午。</li></ul><blockquote><p>这个自定义的渲染器引起卡顿的现象还是挺严重的，感觉还是用户体验不太好。具体是因为鼠标浮动还是因为自定义的渲染器直接显示，导致的原因自己还没有测试。</p></blockquote><h2 id="3-实现的代码"><a href="#3-实现的代码" class="headerlink" title="3 实现的代码"></a>3 实现的代码</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 主要界面内容 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>routeContioner<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-backtop</span> <span class="token attr-name">:right</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">:bottom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#routeContioner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-backtop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span>20px 30px 10px 30px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Add Plc info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-steps</span> <span class="token attr-name">:space</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">:active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stepFlag<span class="token punctuation">"</span></span> <span class="token attr-name">finish-status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>                    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-step</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Basic Info<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-step</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Variables<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-step</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-steps</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Step 0 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">shadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stepFlag == 0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Add PLC Basic Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">label-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcFormRef<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoRules<span class="token punctuation">"</span></span>                    <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PlcCode<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcCode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.plcCode<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IP<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.ip<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Port<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.port<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RackNophoneNo<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rackNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.rackNo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SlotNo<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slotNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.slotNo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatDbNum<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatDbNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.heartBeatDbNum<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatShift<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatShift<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.heartBeatShift<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatLength<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatLength<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.heartBeatLength<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description <span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmForm(plcFormRef)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- Step 1 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">shadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stepFlag == 1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Add PLC vaiables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addVariable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Variable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-auto-resizer</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; height, width &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-v2</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoForm.variables<span class="token punctuation">"</span></span> <span class="token attr-name">:columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>columns<span class="token punctuation">"</span></span> <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width<span class="token punctuation">"</span></span> <span class="token attr-name">:height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>height<span class="token punctuation">"</span></span>                                 <span class="token attr-name">fixed</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-v2</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-auto-resizer</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span> <span class="token attr-name"><span class="token namespace">v-model:</span>file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>                        <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://192.168.4.66:7138/File/UpLoadVariableFile<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span>                        <span class="token attr-name">:on-preview</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handlePreview<span class="token punctuation">"</span></span> <span class="token attr-name">:on-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleRemove<span class="token punctuation">"</span></span> <span class="token attr-name">:before-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeRemove<span class="token punctuation">"</span></span> <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                        <span class="token attr-name">:on-exceed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleExceed<span class="token punctuation">"</span></span> <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onUploadSuccess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click to upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#tip</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__tip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                please chose the variable.csv                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit(plcFormRef, plcInfoForm)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        Submit                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stepFlag--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        Back                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- Step 2 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span> <span class="token attr-name">shadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stepFlag >= 2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>添加PLC成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pushToInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往Plc信息界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tsx<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> type Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'../../request/request.js'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElMessage<span class="token punctuation">,</span> ElMessageBox<span class="token punctuation">,</span> genFileId<span class="token punctuation">,</span> type UploadInstance<span class="token punctuation">,</span> type UploadRawFile<span class="token punctuation">,</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'../../../node_modules/element-plus/es/components/backtop/style/index'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> FormInstance<span class="token punctuation">,</span> FormRules<span class="token punctuation">,</span> UploadFile<span class="token punctuation">,</span> UploadFiles<span class="token punctuation">,</span> UploadProps<span class="token punctuation">,</span> UploadUserFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElInput<span class="token punctuation">,</span> ElButton<span class="token punctuation">,</span> ElSelect<span class="token punctuation">,</span> ElOption<span class="token punctuation">,</span>ElSwitch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> FunctionalComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> Column<span class="token punctuation">,</span> InputInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> CellRenderer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus/es/components/table-v2/src/types'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FixedDir <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus/es/components/table-v2/src/constants'</span><span class="token comment">// 控制上方进度条       </span><span class="token keyword">let</span> stepFlag <span class="token operator">=</span> ref<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//step0 form填写基本信息</span><span class="token keyword">const</span> plcFormRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>FormInstance<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">PlcInfo</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">plcCode</span><span class="token operator">:</span> string    <span class="token literal-property property">ip</span><span class="token operator">:</span> string    <span class="token literal-property property">port</span><span class="token operator">:</span> number    <span class="token literal-property property">rackNo</span><span class="token operator">:</span> number    <span class="token literal-property property">slotNo</span><span class="token operator">:</span> number    <span class="token literal-property property">heartBeatDbNum</span><span class="token operator">:</span> number    <span class="token literal-property property">heartBeatShift</span><span class="token operator">:</span> number    <span class="token literal-property property">heartBeatLength</span><span class="token operator">:</span> number    <span class="token literal-property property">createTime</span><span class="token operator">:</span> string    <span class="token literal-property property">updateTime</span><span class="token operator">:</span> string    <span class="token literal-property property">description</span><span class="token operator">:</span> string    <span class="token literal-property property">variables</span><span class="token operator">:</span> myvariable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">//变量的格式</span><span class="token keyword">interface</span> <span class="token class-name">myvariable</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">plcInfoId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationCode</span><span class="token operator">:</span> string    <span class="token literal-property property">interactType</span><span class="token operator">:</span> number    <span class="token literal-property property">dbBlockNum</span><span class="token operator">:</span> number    <span class="token literal-property property">variableName</span><span class="token operator">:</span> string    <span class="token literal-property property">shift</span><span class="token operator">:</span> number    <span class="token literal-property property">dataType</span><span class="token operator">:</span> string    <span class="token literal-property property">shifttBit</span><span class="token operator">:</span> number    <span class="token literal-property property">length</span><span class="token operator">:</span> number    <span class="token literal-property property">description</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span>    <span class="token literal-property property">checked</span><span class="token operator">:</span> boolean    <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> plcInfoForm <span class="token operator">=</span> ref<span class="token operator">&lt;</span>PlcInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">plcCode</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">ip</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token literal-property property">rackNo</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">slotNo</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">createTime</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">updateTime</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token literal-property property">heartBeatDbNum</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">heartBeatShift</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">heartBeatLength</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> plcInfoRules <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>FormRules<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">plcCode</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">ip</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">heartBeatDbNum</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">heartBeatShift</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">heartBeatLength</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">rackNo</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">slotNo</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">confirmForm</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plcFormRef</span><span class="token operator">:</span> FormInstance <span class="token operator">|</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plcFormRef<span class="token punctuation">)</span> <span class="token keyword">return</span>    plcFormRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stepFlag<span class="token punctuation">.</span>value<span class="token operator">++</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Please check the input'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//step1 table填入变量</span>type SelectionCellProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> string    intermediate<span class="token operator">?</span><span class="token operator">:</span> boolean    <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>    <span class="token function-variable function">forwardRef</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> InputInstance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token literal-property property">InputCell</span><span class="token operator">:</span> FunctionalComponent<span class="token operator">&lt;</span>SelectionCellProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>    value<span class="token punctuation">,</span>    onChange<span class="token punctuation">,</span>    forwardRef<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>ElInput ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>forwardRef <span class="token keyword">as</span> any<span class="token punctuation">&#125;</span> onInput<span class="token operator">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span> modelValue<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//创建input类型的编辑渲染方案</span><span class="token keyword">const</span> <span class="token literal-property property">editableCellRenderer</span><span class="token operator">:</span> CellRenderer<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> rowData<span class="token punctuation">,</span> column <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isEditable <span class="token operator">=</span> rowData<span class="token punctuation">.</span>editing <span class="token operator">&amp;&amp;</span> column<span class="token punctuation">.</span>editable<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onEnterEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        column<span class="token punctuation">.</span>editable <span class="token operator">=</span> <span class="token boolean">true</span>        rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onExitEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        column<span class="token punctuation">.</span>editable <span class="token operator">=</span> <span class="token boolean">false</span>        rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">setRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>focus<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> isEditable <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>InputCell                    forwardRef<span class="token operator">=</span><span class="token punctuation">&#123;</span>setRef<span class="token punctuation">&#125;</span>            value<span class="token operator">=</span><span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>            onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span>            onBlur<span class="token operator">=</span><span class="token punctuation">&#123;</span>onExitEditMode<span class="token punctuation">&#125;</span>            onKeydownEnter<span class="token operator">=</span><span class="token punctuation">&#123;</span>onExitEditMode<span class="token punctuation">&#125;</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"table-v2-inline-editing-trigger"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onEnterEditMode<span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建action类型的编辑渲染方案</span><span class="token keyword">const</span> <span class="token literal-property property">buttonCellRenderer</span><span class="token operator">:</span> CellRenderer<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> rowData<span class="token punctuation">,</span> column <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickDelete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        plcInfoForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>rowData<span class="token punctuation">.</span>$index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"table-v2-inline-editing-action"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onClickDelete<span class="token punctuation">&#125;</span><span class="token operator">></span>            Delete        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'BOOL'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'BOOL'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'STRING'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'STRING'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'INT'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'INT'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'REAL'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'REAL'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建select Type类型的编辑渲染方案</span><span class="token keyword">const</span> <span class="token literal-property property">selectCellRenderer</span><span class="token operator">:</span> CellRenderer<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> rowData<span class="token punctuation">,</span> column <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isEditable <span class="token operator">=</span> rowData<span class="token punctuation">.</span>editing <span class="token operator">||</span> column<span class="token punctuation">.</span>editable<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onEnterEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onExitEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">drop</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>drop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">setRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>focus<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onEnterEditMode<span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ElSelect                            placeholder<span class="token operator">=</span><span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>                forwardRef<span class="token operator">=</span><span class="token punctuation">&#123;</span>setRef<span class="token punctuation">&#125;</span>                value<span class="token operator">=</span><span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>                onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span>                onVisible<span class="token operator">-</span>change<span class="token operator">=</span><span class="token punctuation">&#123;</span>onExitEditMode<span class="token punctuation">&#125;</span>            <span class="token operator">></span>                <span class="token operator">&lt;</span>ElOption label<span class="token operator">=</span><span class="token string">"BOOL"</span> value<span class="token operator">=</span><span class="token string">"BOOL"</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ElOption label<span class="token operator">=</span><span class="token string">"STRING"</span> value<span class="token operator">=</span><span class="token string">"STRING"</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ElOption label<span class="token operator">=</span><span class="token string">"INT"</span> value<span class="token operator">=</span><span class="token string">"INT"</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ElOption label<span class="token operator">=</span><span class="token string">"RARE"</span> value<span class="token operator">=</span><span class="token string">"RARE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ElSelect<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建select Station类型的编辑渲染方案</span><span class="token keyword">const</span> <span class="token literal-property property">selectStationCellRenderer</span><span class="token operator">:</span> CellRenderer<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> rowData<span class="token punctuation">,</span> column <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isEditable <span class="token operator">=</span> rowData<span class="token punctuation">.</span>editing <span class="token operator">||</span> column<span class="token punctuation">.</span>editable<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onEnterEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onExitEditMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">drop</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>drop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rowData<span class="token punctuation">.</span>editing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">setRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> el<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            el<span class="token punctuation">.</span>focus<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>onEnterEditMode<span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ElSelect                forwardRef<span class="token operator">=</span><span class="token punctuation">&#123;</span>setRef<span class="token punctuation">&#125;</span>                placeholder<span class="token operator">=</span><span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>                onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span>                onVisible<span class="token operator">-</span>change<span class="token operator">=</span><span class="token punctuation">&#123;</span>onExitEditMode<span class="token punctuation">&#125;</span>            <span class="token operator">></span>                <span class="token punctuation">&#123;</span>stationOptions<span class="token punctuation">.</span>value                    <span class="token operator">?</span> stationOptions<span class="token operator">!</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">station</span> <span class="token operator">=></span> <span class="token punctuation">(</span>                        <span class="token operator">&lt;</span>ElOption                            key<span class="token operator">=</span><span class="token punctuation">&#123;</span>station<span class="token punctuation">.</span>wsCode<span class="token punctuation">&#125;</span>                            label<span class="token operator">=</span><span class="token punctuation">&#123;</span>station<span class="token punctuation">.</span>wsCode<span class="token punctuation">&#125;</span>                            value<span class="token operator">=</span><span class="token punctuation">&#123;</span>station<span class="token punctuation">.</span>wsCode<span class="token punctuation">&#125;</span>                        <span class="token operator">></span><span class="token punctuation">&#123;</span>station<span class="token punctuation">.</span>wsCode<span class="token punctuation">&#125;</span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>ElOption<span class="token operator">></span>                    <span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">:</span> <span class="token operator">&lt;</span>ElOption label<span class="token operator">=</span><span class="token string">"--"</span> value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ElOption<span class="token operator">></span> <span class="token comment">// 添加一个空的选项</span>                <span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ElSelect<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建switch类型的编辑渲染方案</span><span class="token keyword">const</span> <span class="token literal-property property">switchCellRenderer</span><span class="token operator">:</span> CellRenderer<span class="token operator">&lt;</span>boolean<span class="token operator">|</span>number<span class="token operator">|</span>string<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> rowData<span class="token punctuation">,</span> column <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onChange</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span>boolean<span class="token operator">|</span>number<span class="token operator">|</span>string</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">=</span>val    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span>  <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div <span class="token operator">></span>                    <span class="token operator">&lt;</span>ElSwitch        <span class="token literal-property property">onUpdate</span><span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> boolean<span class="token operator">|</span>number<span class="token operator">|</span>string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token punctuation">&#123;</span>rowData<span class="token punctuation">[</span>column<span class="token punctuation">.</span>dataKey<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token literal-property property">columns</span><span class="token operator">:</span> Column<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Code'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'workStationCode'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'workStationCode'</span><span class="token punctuation">,</span>        <span class="token literal-property property">fixed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> selectStationCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'interactType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'interactType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'interactType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'dbBlockNum'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'dbBlockNum'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'dbBlockNum'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'variableName'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'variableName'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'variableName'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'shift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'shift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'shift'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'dataType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'dataType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'dataType'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> selectCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'shifttBit'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'shifttBit'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'shifttBit'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'length'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'length'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'length'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'defaultValue'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'defaultValue'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'defaultValue'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> editableCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'checked'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'checked'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataKey</span><span class="token operator">:</span> <span class="token string">'checked'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span>switchCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'Action'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>        <span class="token literal-property property">fixed</span><span class="token operator">:</span> FixedDir<span class="token punctuation">.</span><span class="token constant">RIGHT</span><span class="token punctuation">,</span> <span class="token comment">// 将该列设置为右侧固定列</span>        <span class="token literal-property property">cellRenderer</span><span class="token operator">:</span> buttonCellRenderer    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">interface</span> <span class="token class-name">stationOption</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">wsCode</span><span class="token operator">:</span> string<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token literal-property property">stationOptions</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>stationOption<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">LoadStations</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plcId</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/WorkStation/GetWorkStationNoBinding/"</span> <span class="token operator">+</span> plcId<span class="token punctuation">,</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resInfo <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token keyword">if</span> <span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stationOptions<span class="token punctuation">.</span>value <span class="token operator">=</span> resInfo<span class="token punctuation">.</span>content            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'please check the network, etc.'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> fileList <span class="token operator">=</span> ref<span class="token operator">&lt;</span>UploadUserFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token literal-property property">handleRemove</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onRemove'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> uploadFiles</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token literal-property property">handlePreview</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onPreview'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">uploadFile</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> upload <span class="token operator">=</span> ref<span class="token operator">&lt;</span>UploadInstance<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token literal-property property">handleExceed</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onExceed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    upload<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clearFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> UploadRawFile    file<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token function">genFileId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    upload<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">handleStart</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token literal-property property">beforeRemove</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'beforeRemove'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">uploadFile<span class="token punctuation">,</span> uploadFiles</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ElMessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cancel the transfert of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>uploadFile<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ?</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">resData</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> string<span class="token punctuation">,</span>    <span class="token literal-property property">success</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> any<span class="token punctuation">,</span>    <span class="token literal-property property">errorCode</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token literal-property property">resInfo</span><span class="token operator">:</span> resData<span class="token keyword">const</span> <span class="token function-variable function">onUploadSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">response</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">uploadFile</span><span class="token operator">:</span> UploadFile<span class="token punctuation">,</span> <span class="token literal-property property">uploadFiles</span><span class="token operator">:</span> UploadFiles</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    resInfo <span class="token operator">=</span> response    <span class="token keyword">if</span> <span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        plcInfoForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables <span class="token operator">=</span> resInfo<span class="token punctuation">.</span>content    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Submit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plcFormRef</span><span class="token operator">:</span> FormInstance <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">form</span><span class="token operator">:</span> PlcInfo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plcFormRef<span class="token punctuation">)</span> <span class="token keyword">return</span>    plcFormRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/PlcInfos/AddPlcInfos"</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    resInfo <span class="token operator">=</span> res<span class="token punctuation">.</span>data                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        stepFlag<span class="token punctuation">.</span>value <span class="token operator">=</span> stepFlag<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">2</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>message<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'please check the network, etc.'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Please check the input'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">addVariable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    plcInfoForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">plcInfoId</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">workStationId</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">workStationCode</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token literal-property property">interactType</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">dbBlockNum</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">variableName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">shift</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token literal-property property">shifttBit</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token literal-property property">checked</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plcInfoDelete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> myvariable</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"PLC has at least one variable"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    plcInfoForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//step2 给予反馈，成功与否</span><span class="token keyword">function</span> <span class="token function">pushToInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/plcInfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> typeOptions <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'BOOL'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'STRING'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'INT'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'REAL'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// let typeOptions=mapGetters(['getMytypeOptions'])</span><span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">LoadStations</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span>  <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../../components/scss/table.scss"</span><span class="token punctuation">;</span></span><span class="token selector">:deep(.header-cell-style)</span> <span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@include</span> table-header-cell-style<span class="token punctuation">;</span></span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.expanded-header-cell-style)</span> <span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@include</span> table-expanded-header-cell-style<span class="token punctuation">;</span></span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.table-v2-inline-editing-trigger)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px transparent dotted<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.table-v2-inline-editing-action)</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px transparent dotted<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #78C3F3<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.table-v2-inline-editing-swich)</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.table-v2-inline-editing-trigger:hover)</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--el-color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">// 圆圈.loader</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 4px solid <span class="token function">rgba</span><span class="token punctuation">(</span>165<span class="token punctuation">,</span> 220<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span> #A5DC86<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> animation_collect 1s linear 1 both<span class="token punctuation">;</span> //infinite永远执行<span class="token punctuation">&#125;</span>// 圆圈动画代码<span class="token atrule"><span class="token rule">@keyframes</span> animation_collect</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> #A5DC86<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> #A5DC86<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> #A5DC86<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">75%</span> <span class="token punctuation">&#123;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> #A5DC86<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">border-left-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>165<span class="token punctuation">,</span> 220<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">//对号.loader::before</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 4px solid #A5DC86<span class="token punctuation">;</span>    <span class="token property">border-left-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border-bottom-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>-1<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>    // 设置动画延迟1s执行，先执行外层圆圈动画 结束后执行该动画    <span class="token property">animation</span><span class="token punctuation">:</span> animation_true 0.5s 1s linear 1 both<span class="token punctuation">;</span>    // <span class="token property">外层执行动画执行时，里面不显示，但是不能使用display</span><span class="token punctuation">:</span>none<span class="token punctuation">,</span>所以用opacity代替    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> animation_true</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">33%</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.button-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="4-技术点分析"><a href="#4-技术点分析" class="headerlink" title="4 技术点分析"></a>4 技术点分析</h2><p>主要在于一个自定义渲染器</p>]]></content>
      
      
      <categories>
          
          <category> element plus </category>
          
          <category> Virtualized Table </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element plus </tag>
            
            <tag> Virtualized Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scss-语法</title>
      <link href="/2023/04/19/Scss-%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/04/19/Scss-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="scss的语法"><a href="#scss的语法" class="headerlink" title="scss的语法"></a>scss的语法</h1><p>SCSS 是 Sass 的一种语法格式，它是 CSS 的一种扩展，可以在 CSS 中使用变量、嵌套、函数等功能，使得 CSS 更加简洁、易读、易维护。下面是 SCSS 的一些语法特点：  </p><ul><li>变量</li><li>嵌套</li><li>混合器</li><li>继承</li><li>条件语句</li></ul><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h2><p>使用 $ 符号定义变量，例如：</p><pre class="language-css" data-language="css"><code class="language-css">$<span class="token property">primary-color</span><span class="token punctuation">:</span> #007bff<span class="token punctuation">;</span></code></pre><p>然后可以在代码中使用该变量，例如：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> $primary-color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2 嵌套"></a>2 嵌套</h2><p>可以使用嵌套的方式，使得代码更加清晰，例如：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">nav</span> <span class="token punctuation">&#123;</span>  <span class="token selector">ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token selector">li</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>      <span class="token selector">a</span> <span class="token punctuation">&#123;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-混合器"><a href="#3-混合器" class="headerlink" title="3 混合器"></a>3 混合器</h2><p>可以使用混合器来定义一组样式，然后在代码中引用该样式，例如：</p><pre class="language-less" data-language="less"><code class="language-less"><span class="token atrule">@mixin border-radius<span class="token punctuation">(</span>$radius<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span>  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token variable">@include</span> <span class="token function">border-radius</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-继承"><a href="#4-继承" class="headerlink" title="4 继承"></a>4 继承</h2><p>可以使用 @extend 关键字，继承另一个选择器的样式，例如：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.error</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ff0000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.error--important</span> <span class="token punctuation">&#123;</span>  <span class="token atrule"><span class="token rule">@extend</span> .error<span class="token punctuation">;</span></span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-条件语句"><a href="#5-条件语句" class="headerlink" title="5 条件语句"></a>5 条件语句</h2><p>可以使用条件语句，例如：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@if</span> <span class="token function">lightness</span><span class="token punctuation">(</span>$color<span class="token punctuation">)</span> > 50%</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token atrule"><span class="token rule">@else</span></span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 预处理器 - scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
            <tag> 预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-父组件与子组件之间互相传值</title>
      <link href="/2023/04/19/Vue-%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BA%92%E7%9B%B8%E4%BC%A0%E5%80%BC/"/>
      <url>/2023/04/19/Vue-%E7%88%B6%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E4%BA%92%E7%9B%B8%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="父子组件之间的传值"><a href="#父子组件之间的传值" class="headerlink" title="父子组件之间的传值"></a>父子组件之间的传值</h1><p>今天自己写东西的时候遇见了需要在vue组件之间相互传值。其实就是简单的布局。  我需要将header的收缩图标的点击事件引起的bool的变化传递给也是组件的侧边栏。<br>也就是父组件A，子组件B，C。B中的值首先传递给A，然后A传递给C。<br>这同时涉及到了父组件传值给子组件，子组件传值给父组件。  </p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>vue3</li><li>ts</li></ul><h2 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h2><p>在vue3中不可绕过的就是setup语法糖了。我也当然是使用的爱好者。<br>下面内容分为父组件。  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">：chaildVariable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentVariable<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123; valueFromChild &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span>import &#123; defineEmits &#125; from 'vue'const parentVariable = ref('parentVariable_1')</code></pre><p>子组件代码如下</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">></span></span>get Value from Parent &#123;&#123;props.chaildVariable&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">chaildVariable</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这种传值其实比较简单，直接通过props把值传递给子组件，只要父组件中这个值是响应式的，那样子组件也会不断的接受父组件中这个值不断的改变。</p><h2 id="子组件传值给父组件"><a href="#子组件传值给父组件" class="headerlink" title="子组件传值给父组件"></a>子组件传值给父组件</h2><p>下面内容分为父组件。  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name"><span class="token namespace">@update:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123; valueFromChild &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span>import &#123; defineEmits &#125; from 'vue'const emits = defineEmits(['update:value'])function sendValue() &#123;  emits('update:value', 'Hello from Child')&#125;</code></pre><p>子组件代码如下</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Send Value to Parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineEmits <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">sendValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'update:value'</span><span class="token punctuation">,</span> <span class="token string">'Hello from Child'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>简单介绍下使用。其实父组件是监听名称为‘update：value’的变量。子组件在使用sendValue的方法的时候会把这个update：value这个变量给一个值hello from child。这样父组件就监听到了变化然后把值给记录下来。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 传值 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arrayA+B结合-低时间复杂度方案</title>
      <link href="/2023/04/06/arrayA-B%E7%BB%93%E5%90%88-%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%96%B9%E6%A1%88/"/>
      <url>/2023/04/06/arrayA-B%E7%BB%93%E5%90%88-%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="一个降低时间复杂度的方案"><a href="#一个降低时间复杂度的方案" class="headerlink" title="一个降低时间复杂度的方案"></a>一个降低时间复杂度的方案</h1><p>查找arrayA{id,age},ArrayB{id,name}.如何把对应的id中的B添加到A中。形成arrayA{id,age,name}。  </p><p>这个是用大量的空间复杂度换取时间复杂度的减少  </p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 临时数组对象C</span><span class="token keyword">var</span> arrayC <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历数组B，以id的值作为数组的key，name的值作为数组的value,存放到临时数组arrayC</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayB<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 为arrayC添加名称为arrayB[i].id的属性字段，值等于arrayB[i].name</span>  arrayC<span class="token punctuation">[</span>arrayB<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> arrayB<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token comment">// 遍历数组A，以name作为key，arrayC中对应当前id的key的值作为value</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayA<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//为arrayA[i]添加名称为name的属性字段，值等于arrayC[arrayA[i].id]</span>  arrayA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> arrayC<span class="token punctuation">[</span>arrayA<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token comment">//降低的关键就是在这里，认为array是个数组。第多少个就是可以通过固定空间的读取去实现。而不是遍历arrayC的内容。</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 时间复杂度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-开发规范</title>
      <link href="/2023/04/06/Vue-%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2023/04/06/Vue-%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue开发规范"><a href="#Vue开发规范" class="headerlink" title="Vue开发规范"></a>Vue开发规范</h1><ul><li><p>&#x2F;dist——打包之后的文件夹，此文件夹被发布到真正的服务器上，项目完成之后，执行npm run build会形成此文件夹</p></li><li><p>&#x2F;public——此目录下的文件并不会被Webpack处理，它们会直接被复制到最终的打包目录，即&#x2F;dist下，此文件夹里存放一些不会变动的文件，比如项目运行在浏览器时显示的小图标</p></li><li><p>&#x2F;node_modules——保存npm加载的项目依赖模块，即第三方包所存放的目录，使用npm install可以下载</p></li><li><p>&#x2F;src——存放源代码</p><ul><li>&#x2F;src&#x2F;api——接口文件目录，即连接服务器接口时所写代码的存放目录</li><li>&#x2F;src&#x2F;assets——存放项目所包含的图片以及css样式，为了结构更加清晰，通常又创建img文件夹和css文件夹，分别来存放图片和样式</li><li>&#x2F;src&#x2F;components——公共组件目录，存放项目里所包含的公共组件</li><li>&#x2F;src&#x2F;router——路由文件，在&#x2F;src&#x2F;router文件夹里创建router.js文件，设置路由映射关系</li><li>&#x2F;src&#x2F;store——VueX所存放的目录，用来定义全局数据</li><li>&#x2F;src&#x2F;utils——公共函数文件目录，用来保存一些js文件</li><li>&#x2F;src&#x2F;views——视图组件，包含项目里所包含的一些详细的组件，但又不是公用的组件</li></ul></li><li><p>main.js——入口文件，初始化vue实例并使用需要的插件</p></li><li><p>App.vue——主组件，所有页面都是在App.vue下进行切换的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-图片放大</title>
      <link href="/2023/04/06/Vue-%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7/"/>
      <url>/2023/04/06/Vue-%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue添加图片放大功能-手动轮播图"><a href="#Vue添加图片放大功能-手动轮播图" class="headerlink" title="Vue添加图片放大功能+手动轮播图"></a>Vue添加图片放大功能+手动轮播图</h1><p>有一个点击图片，图片放大的功能需要实现。  </p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>通过查询有一个viview的插件可以实现这个功能。  </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install v-viewer --save</code></pre><h3 id="配置-采用全局引用的方案。"><a href="#配置-采用全局引用的方案。" class="headerlink" title="配置-采用全局引用的方案。"></a>配置-采用全局引用的方案。</h3><p>在main.ts中添加以下配置</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span><span class="token keyword">import</span> VueViewer <span class="token keyword">from</span> <span class="token string">'v-viewer'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueViewer<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    defaultOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'inline'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">'button'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//右上角按钮</span>      <span class="token string-property property">"navbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//底部缩略图</span>      <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//当前图片标题</span>      <span class="token string-property property">"toolbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//底部工具栏</span>      <span class="token string-property property">"tooltip"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//显示缩放百分比</span>      <span class="token string-property property">"movable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可以移动</span>      <span class="token string-property property">"zoomable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可以缩放</span>      <span class="token string-property property">"rotatable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可旋转</span>      <span class="token string-property property">"scalable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否可翻转</span>      <span class="token string-property property">"transition"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用 CSS3 过度</span>      <span class="token string-property property">"fullscreen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//播放时是否全屏</span>      <span class="token string-property property">"keyboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否支持键盘</span>    <span class="token comment">//   "url": "data-source",</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><blockquote><p>tip:如果不把url注释会有错误，不产生效果</p></blockquote><h3 id="界面中使用"><a href="#界面中使用" class="headerlink" title="界面中使用"></a>界面中使用</h3><p>由于采用全局配置的方案，所以可以直接使用.<br>此处使用多个照片体现效果  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>viewer</span> <span class="token attr-name">:images</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in images<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgIndex === index<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>viewer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/testPicture/image.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image2.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image3.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image4.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image5.png'</span><span class="token punctuation">]</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>下面是搭配手动轮播图  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>viewer</span> <span class="token attr-name">:images</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in images<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgIndex === index<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>viewer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changePage(prevIndex)<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&amp;lt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changePage(prevIndex)<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&amp;gt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/testPicture/image.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image2.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image3.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image4.png'</span><span class="token punctuation">,</span> <span class="token string">'/testPicture/image5.png'</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">changePage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    imgIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> imgIndex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> prevIndex <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imgIndex<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> images<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> imgIndex<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> nextIndex <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imgIndex<span class="token punctuation">.</span>value <span class="token operator">==</span> images<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> imgIndex<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment">/* position: relative; */</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token comment">/* z-index: 2000; */</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #474447<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.left:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">;.right</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token comment">/* z-index: 2000; */</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #474447<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><a href="https://www.jianshu.com/p/1fd3b4e6911c">参考资料</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> viview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> viview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-添加端口访问</title>
      <link href="/2023/04/06/Vue-%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE/"/>
      <url>/2023/04/06/Vue-%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue添加端口访问"><a href="#Vue添加端口访问" class="headerlink" title="Vue添加端口访问"></a>Vue添加端口访问</h1><p>正常情况下，vue+vite是通过localhost进行访问。<br>但是在一起开发的时候我们希望它是能够通过外部ip进行访问相关的数据。<br>下面是如何实现。  </p><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>vue3+vite+ts</p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p>steps：</p><ul><li>设置ip端口</li><li>如果启动https需要添加伪装的ssh</li></ul><h3 id="step1：设置端口"><a href="#step1：设置端口" class="headerlink" title="step1：设置端口"></a>step1：设置端口</h3><p>在vite.config.ts中添加相关内容</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    server<span class="token operator">:</span><span class="token punctuation">&#123;</span>      host<span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>      port<span class="token operator">:</span> <span class="token number">5173</span><span class="token punctuation">,</span>      <span class="token comment">// 是否开启 https</span>    https<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="step2：安装插件并布置"><a href="#step2：安装插件并布置" class="headerlink" title="step2：安装插件并布置"></a>step2：安装插件并布置</h3><p>vite升级之后，如果你默认用了https，那么最后npm run dev之后，网页是打不开的。<br>有个报错：配置ssl使用了不受支持的协议。 ERR_SSL_VERSION_OR_CIPHER_MISMATCH。<br>就是说，使用了https，但是没有签名。搞这个签名，也麻烦。<br>所以，vite官方提供了一个插件，可以模拟一个签名，使得我们本地开发顺利进行。  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm i -D @vitejs&#x2F;plugin-basic-ssl</code></pre><p> 最后在vite.config.ts中使用：<br> <pre class="language-typescript" data-language="typescript"><code class="language-typescript"> <span class="token comment">// vite.config.js</span><span class="token keyword">import</span> basicSsl <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-basic-ssl'</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">basicSsl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><br> 最后重启npm run dev<br> <a href="https://blog.csdn.net/jmszl1991/article/details/124173690">参考资料</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> IP访问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ip访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo上传提示timeout</title>
      <link href="/2023/04/05/hexo%E4%B8%8A%E4%BC%A0%E6%8F%90%E7%A4%BAtimeout/"/>
      <url>/2023/04/05/hexo%E4%B8%8A%E4%BC%A0%E6%8F%90%E7%A4%BAtimeout/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo上传提示time-out"><a href="#hexo上传提示time-out" class="headerlink" title="hexo上传提示time out"></a>hexo上传提示time out</h1><h2 id="问题提示"><a href="#问题提示" class="headerlink" title="问题提示"></a>问题提示</h2><p> 今天在连接github仓库时遇到了一个报错：  Failed to connect to github.com port 443 after 21098 ms: Timed out（译为：21098 毫秒后无法连接到 github.com 端口 443：超时）。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>环境就是git，之前可以正常链接，但是这次上传博客的时候发现上传失败，重新生成并没有解决对应的问题。<br>原因： 这样的问题往往是由于网络慢访问超时，这时候我们可以在终端选择使用设置代理和取消代理的命令解决。  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">git config --global https.proxy</code></pre><h3 id="取消设置代理"><a href="#取消设置代理" class="headerlink" title="取消设置代理"></a>取消设置代理</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">git config --global --unset https.proxy</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这应该是git的抽风吧。具体触发的原因不详。期待以后的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知错就改 </tag>
            
            <tag> time out </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景动态线条</title>
      <link href="/2023/04/03/%E8%83%8C%E6%99%AF%E5%8A%A8%E6%80%81%E7%BA%BF%E6%9D%A1/"/>
      <url>/2023/04/03/%E8%83%8C%E6%99%AF%E5%8A%A8%E6%80%81%E7%BA%BF%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<!-- 背景动态线条-->  <!--  <script src="https://cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script> --><pre class="language-cmd" data-language="cmd"><code class="language-cmd">D:\myblog\themes\hexo-theme-matery\layout\layout.ejs&#x2F;&#x2F;中间添加</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo结构介绍</title>
      <link href="/2023/04/03/hexo%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/04/03/hexo%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo目录结构介绍"><a href="#hexo目录结构介绍" class="headerlink" title="hexo目录结构介绍"></a>hexo目录结构介绍</h1><p>我们博客的目录结构如下：</p><h2 id="1-1基本结构"><a href="#1-1基本结构" class="headerlink" title="1.1基本结构"></a>1.1基本结构</h2><pre class="language-none"><code class="language-none">- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><p>node_modules是node.js各种库的目录，<br>public是生成的网页文件目录，<br>scaffolds里面就三个文件，存储着新文章和新页面的初始设置，<br>source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<br>themes存放着主题文件，一般也用不到。  </p><h2 id="1-2-hexo基本配置"><a href="#1-2-hexo基本配置" class="headerlink" title="1.2 hexo基本配置"></a>1.2 hexo基本配置</h2><p>在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><h3 id="1-2-1-网站"><a href="#1-2-1-网站" class="headerlink" title="1.2.1 网站"></a>1.2.1 网站</h3><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center">网站标题</td></tr><tr><td align="center">subtitle</td><td align="center">subtitle</td></tr><tr><td align="center">description</td><td align="center">网站描述</td></tr><tr><td align="center">keywords</td><td align="center">网站的关键词。支持多个关键词。</td></tr><tr><td align="center">author</td><td align="center">您的名字</td></tr><tr><td align="center">language</td><td align="center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td></tr><tr><td align="center">timezone</td><td align="center">网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</td></tr></tbody></table><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><h3 id="1-2-2-layout（布局）"><a href="#1-2-2-layout（布局）" class="headerlink" title="1.2.2 layout（布局）"></a>1.2.2 layout（布局）</h3><p>一共三种布局post,page,draft</p><h4 id="1-2-4-1-post"><a href="#1-2-4-1-post" class="headerlink" title="1.2.4.1 post"></a>1.2.4.1 post</h4><p>默认使用的创建文章的方案就是post方案。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo new 文章名称&#x2F;&#x2F;等价于hexo new [layout] &lt;title&gt;</code></pre><h4 id="1-2-4-2-page"><a href="#1-2-4-2-page" class="headerlink" title="1.2.4.2 page"></a>1.2.4.2 page</h4><p>如果你想另起一页，那么可以使用</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo new page newpage</code></pre><p>系统会自动给你在source文件夹下创建一个newpage文件夹，以及newpage文件夹中的index.md，这样你访问的newpage对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><h4 id="1-2-4-3-draft"><a href="#1-2-4-3-draft" class="headerlink" title="1.2.4.3 draft"></a>1.2.4.3 draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo new draft newdraft</code></pre><p>这样会在source/_draft中新建一个newdraft.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo server --draft</code></pre><p>在本地端口中开启服务预览。  </p><p>如果你的草稿文件写完了，想要发表到post中，  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">hexo publish draft newdraft</code></pre><p>就会自动把newdraft.md发送到post中。</p><h3 id="themes主题"><a href="#themes主题" class="headerlink" title="themes主题"></a>themes主题</h3><p>我们在了解Hexo博客文件基础之后，知道主题文件就放在themes文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。<br>网上大多数主题都是github排名第一的Next主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：hexo-theme-matery，地址在传送门。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-跨页面传递参数</title>
      <link href="/2023/04/03/Vue-%E8%B7%A8%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
      <url>/2023/04/03/Vue-%E8%B7%A8%E9%A1%B5%E9%9D%A2%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Vue 跨页面传递参数</p><h1 id="跨页面传递参数"><a href="#跨页面传递参数" class="headerlink" title="跨页面传递参数"></a>跨页面传递参数</h1><p>这里主要讲两种传参方案</p><ul><li>params</li><li>query<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 传参</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>    params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 或</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>    query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 接参</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>message<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>message</code></pre></li></ul><blockquote><p>Tips:</p><ul><li>传参是this.$router，接收参数是this.$route</li><li>由于动态路由也是传递params的，所以在 this.$router.push() 方法中path不能和params一起使用，否则params将无效，接收参数页面会是undefined，需要用name来指定页面，也就是说，用query对应path（填写路径 &#x2F;home），用params对应name（写路由js中对应的name，而不是路径），这个存疑，可以使用</li><li>接收数据必须在页面加载完成后，也就是在mounted接收，而不是created。</li></ul></blockquote><p><a herf="https://blog.csdn.net/mahaokun/article/details/121158787" title="参考文章"/>参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 传参 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 传参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-table中一列处理多列数据</title>
      <link href="/2023/04/03/Vue-table%E4%B8%AD%E4%B8%80%E5%88%97%E5%A4%84%E7%90%86%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/04/03/Vue-table%E4%B8%AD%E4%B8%80%E5%88%97%E5%A4%84%E7%90%86%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-table中某一列处理多条信息"><a href="#Vue-table中某一列处理多条信息" class="headerlink" title="Vue table中某一列处理多条信息"></a>Vue table中某一列处理多条信息</h1><h2 id="有的时候table显示的内容中某一列是多列的拼接或这计算。比如table如下-x-y-x-y-x-y-—-—-—-—-2-3-5-6"><a href="#有的时候table显示的内容中某一列是多列的拼接或这计算。比如table如下-x-y-x-y-x-y-—-—-—-—-2-3-5-6" class="headerlink" title="有的时候table显示的内容中某一列是多列的拼接或这计算。比如table如下|x|y|x+y|x*y||—|—|—|—||2|3|5|6|"></a>有的时候table显示的内容中某一列是多列的拼接或这计算。<br>比如table如下<br>|x|y|x+y|x*y|<br>|—|—|—|—|<br>|2|3|5|6|</h2><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p>一列绑定多列数据，然后对于数据进行操作</p><h2 id="代码表达"><a href="#代码表达" class="headerlink" title="代码表达"></a>代码表达</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HeartBeat<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heartBeatDbNumNum,heartBeatShift,heartBeatLength<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;scope.row.heartBeatDbNum&#125;&#125;|&#123;&#123;scope.row.heartBeatShift&#125;&#125;|&#123;&#123; scope.row.heartBeatLength &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span></code></pre><p><a herf="https://blog.csdn.net/weixin_51444308/article/details/127174476" >参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> table </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-使用g6</title>
      <link href="/2023/04/03/Vue-%E4%BD%BF%E7%94%A8g6/"/>
      <url>/2023/04/03/Vue-%E4%BD%BF%E7%94%A8g6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中使用g6"><a href="#Vue中使用g6" class="headerlink" title="Vue中使用g6"></a>Vue中使用g6</h1><p>安装从网上寻找</p><blockquote><p>tips：图像的绘制需要在dom已经加载后才可以进行。即setup时会报错</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible<span class="token punctuation">"</span></span> <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bgCancel()<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Add Process Route<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myform<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Activity zone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.id<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>please select your station<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in stationOptions<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.stations<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.stations<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Activity name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calagory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio-group</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.calagory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>only storage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-radio</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check and storage<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-radio-group</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storageChart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.storageChart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.storageChart[scope.$index].plcName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in typeOptions<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.types<span class="token punctuation">"</span></span>                                            <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.types<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>min<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.storageChart[scope.$index].min<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.storageChart[scope.$index].length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Action<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button-group</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>180px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Share<span class="token punctuation">"</span></span>                                            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoAdd(scope.$index, scope.row)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Delete<span class="token punctuation">"</span></span>                                            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoDelete(scope.$index, scope.row)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button-group</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoImportBtn<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoImport()<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/csv<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false; dialogCancel()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false; dialogConfirm(form)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            Confirm                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>routeContioner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span>20px 30px 10px 30px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123; id &#125;&#125; Edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g6Canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mountNode<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>routeTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calagory<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calagory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storageChart<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>storageChart<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 280px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = true; tableAdd()<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Share<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add                                    item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button-group</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>180px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Share<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabletest(scope.$index, scope.row)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Delete<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableDelete(scope.$index, scope.row)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button-group</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>routesAction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>routerSubmit()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>routerCancel()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>infoDescription<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-descriptions</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Produc Information<span class="token punctuation">"</span></span> <span class="token attr-name">:column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">border</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>infoDes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-descriptions-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Process id<span class="token punctuation">"</span></span> <span class="token attr-name">label-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                            <span class="token attr-name">label-class-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productLabel<span class="token punctuation">"</span></span> <span class="token attr-name">class-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-content<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; infoDes.id                            &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-descriptions-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-descriptions-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Product family<span class="token punctuation">"</span></span> <span class="token attr-name">label-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; infoDes.name                        &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-descriptions-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-descriptions-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Product recipe<span class="token punctuation">"</span></span> <span class="token attr-name">label-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; infoDes.calagory                        &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-descriptions-item</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-descriptions-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>infos<span class="token punctuation">"</span></span> <span class="token attr-name">label-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>infoDes.storageChart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>min<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcname<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>length<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>                            <span class="token comment">&lt;!-- &lt;el-tag size="small">&#123;&#123; infoDes.storageChart &#125;&#125;&lt;/el-tag> --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-descriptions-item</span><span class="token punctuation">></span></span>                        >                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-descriptions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>More Logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">:icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Rework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>    ArrowLeft<span class="token punctuation">,</span>    ArrowRight<span class="token punctuation">,</span>    Delete<span class="token punctuation">,</span>    Edit<span class="token punctuation">,</span>    Share<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> type FormInstance<span class="token punctuation">,</span> ElMessage<span class="token punctuation">,</span> ElMessageBox<span class="token punctuation">,</span> genFileId <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> UploadInstance<span class="token punctuation">,</span> UploadProps<span class="token punctuation">,</span> UploadRawFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRoute <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'../../request/request'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> method <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token constant">G6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Graph <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@antv/g6'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> number2color <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@antv/util'</span><span class="token punctuation">;</span><span class="token comment">//&lt;--------------获取id--------></span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getId</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> id<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">Recipe</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span>number    <span class="token literal-property property">date</span><span class="token operator">:</span> string    <span class="token literal-property property">name</span><span class="token operator">:</span> string    <span class="token literal-property property">remark</span><span class="token operator">:</span> string    <span class="token literal-property property">stations</span><span class="token operator">:</span> station<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">station</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">name</span><span class="token operator">:</span> string    <span class="token literal-property property">plc</span><span class="token operator">:</span> string<span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token literal-property property">localRecipe</span><span class="token operator">:</span>Recipe<span class="token keyword">function</span> <span class="token function">GetRecipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    localRecipe<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"recipe"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">""</span><span class="token punctuation">)</span>     id<span class="token punctuation">.</span>value<span class="token operator">=</span>localRecipe<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token comment">//&lt;-----------Router Actions------></span><span class="token keyword">const</span> <span class="token function-variable function">routerSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// request.post(</span>    <span class="token comment">//    '/recipe/edit/submit',</span>    <span class="token comment">//     tableData</span>    <span class="token comment">// ).then(res=>&#123;</span>    <span class="token comment">//     router.push('Process_Route')</span>    <span class="token comment">// &#125;,(error)=>&#123;</span>    <span class="token comment">//     console.log("submit fail");</span>    <span class="token comment">// &#125;)</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Process_Route'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">routerCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Process_Route'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//&lt;-----------添加新的station------></span><span class="token keyword">const</span> infoDes <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>    <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// do not use same name with ref</span><span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>    <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">dialogCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"two methods is ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取所有的staions，用于新增站点</span><span class="token keyword">const</span> <span class="token function-variable function">getStations</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"stations"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/routeEdit"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            stationOptions <span class="token operator">=</span> res<span class="token punctuation">.</span>data            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"stations"</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        stationOptions <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"stations"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> stationOptions <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station2'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station3'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station4'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station5'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stations</span><span class="token operator">:</span> <span class="token string">'station6'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> typeOptions <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'int'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'float'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'byte'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'station5'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token string">'station6'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> dialogVisible <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">date</span><span class="token operator">:</span> string    <span class="token literal-property property">name</span><span class="token operator">:</span> string    <span class="token literal-property property">address</span><span class="token operator">:</span> string<span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">tabletest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'a-1'</span><span class="token punctuation">,</span>        <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>        <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc1'</span><span class="token punctuation">,</span>            <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc2'</span><span class="token punctuation">,</span>            <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plcInfoAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>storageChart<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plcInfoDelete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>storageChart<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> upload <span class="token operator">=</span> ref<span class="token operator">&lt;</span>UploadInstance<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token literal-property property">handleExceed</span><span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onExceed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    upload<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">clearFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> UploadRawFile    file<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token function">genFileId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    upload<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">handleStart</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">submitUpload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    upload<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plcInfoImport</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'plcInfoImportBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file1<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span>file1<span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//读取为二进制</span>        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取未空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span>str<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> clients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> row <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">plcName</span><span class="token operator">:</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">min</span><span class="token operator">:</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">length</span><span class="token operator">:</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>storageChart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>                clients<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//由对象转为JSON字符串</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>clients<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">tableDelete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">row</span><span class="token operator">:</span> User</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ElMessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>        <span class="token string">'This routing will be deleted'</span><span class="token punctuation">,</span>        <span class="token string">'Warning'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>            <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">'Cancel'</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Delete completed'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sccess delete"</span> <span class="token operator">+</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'Delete canceled'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">tableAdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> popupbg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'routeContioner'</span><span class="token punctuation">)</span>    popupbg<span class="token operator">!</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">'blur(10px)'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">bgCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> popupbg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'routeContioner'</span><span class="token punctuation">)</span>    popupbg<span class="token operator">!</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">'blur(0px)'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重置表单：bgCancel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myform'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"form:"</span> <span class="token operator">+</span> form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">address</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plcName</span><span class="token operator">:</span> string    <span class="token literal-property property">min</span><span class="token operator">:</span> number    <span class="token literal-property property">length</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token comment">//table的内容</span><span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'a-1'</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc1'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc2'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'a-3'</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc1'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc2'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'a-2'</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc1'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc2'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'a-1-2'</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">'only'</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc1'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">'plc2'</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> myformRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>FormInstance<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">dialogConfirm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">form</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g6_status<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> station <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> form<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> form<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> form<span class="token punctuation">.</span>calagory<span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> form<span class="token punctuation">.</span>storageChart<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> max <span class="token operator">=</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>length        <span class="token keyword">let</span> modelNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">x</span><span class="token operator">:</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>            <span class="token literal-property property">y</span><span class="token operator">:</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> modelEdge <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给g6的graph实例，添加node类型的新节点</span>        graph<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> modelNode<span class="token punctuation">)</span>        <span class="token comment">// 将节点对象，push到data对象中</span>        data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>modelNode<span class="token punctuation">)</span>        <span class="token comment">// 给g6的graph实例，添加edge类型的边</span>        graph<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'edge'</span><span class="token punctuation">,</span> modelEdge<span class="token punctuation">)</span>        <span class="token comment">// 将边对象，push到data对象中</span>        data<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>modelEdge<span class="token punctuation">)</span>        <span class="token comment">//data.nodes[index]时从0开始的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> g6_id<span class="token punctuation">.</span>value<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span>            graph<span class="token punctuation">.</span><span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>g6_id<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> station<span class="token punctuation">)</span>        graph<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g6_id<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> form<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>g6_id<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span>label <span class="token operator">=</span> form<span class="token punctuation">.</span>id        <span class="token comment">//解决add情况下不selected改变不能刷新详细信息的问题</span>        <span class="token function">selectChange</span><span class="token punctuation">(</span>g6_id<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        infoDes<span class="token punctuation">.</span>value <span class="token operator">=</span> tableData<span class="token punctuation">[</span>g6_id<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g6_status<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        graph<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g6_id<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> form<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        form<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    g6_id<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    g6_status<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">selectChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"selectChange:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"g6_select_id:"</span> <span class="token operator">+</span> g6_select_id<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g6_select_id<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        graph<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>g6_select_id<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    graph<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">'selected'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    g6_select_id<span class="token punctuation">.</span>value <span class="token operator">=</span> id<span class="token punctuation">&#125;</span><span class="token comment">//&lt;--------------g6 canvas---------></span><span class="token keyword">let</span> <span class="token literal-property property">graph</span><span class="token operator">:</span> Graph<span class="token comment">// 渲染图</span><span class="token comment">//   graph.render();</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//       // 创建 G6 图实例</span>    <span class="token comment">//   const graph = new G6.Graph(&#123;</span>    <span class="token comment">//     container: 'mountNode', // 指定图画布的容器 id，与第 9 行的容器对应</span>    <span class="token comment">//     // 画布宽高</span>    <span class="token comment">//     width: 800,</span>    <span class="token comment">//     height: 500,</span>    <span class="token comment">//     fitView: true,</span>    <span class="token comment">//     modes: &#123;</span>    <span class="token comment">//       default: ['drag-canvas', 'zoom-canvas', 'drag-node'], // 允许拖拽画布、放缩画布、拖拽节点</span>    <span class="token comment">//     &#125;,</span>    <span class="token comment">//     layout: &#123;</span>    <span class="token comment">//       type: 'force', // 设置布局算法为 force</span>    <span class="token comment">//       linkDistance: 200, // 设置边长为 100</span>    <span class="token comment">//       preventOverlap: true, // 设置防止重叠</span>    <span class="token comment">//     &#125;,</span>    <span class="token comment">//   &#125;);</span>    <span class="token comment">// const descriptionDiv = document.createElement('div');</span>    <span class="token comment">// descriptionDiv.id = 'discription';</span>    <span class="token comment">// descriptionDiv.innerHTML = 'Right click a node to activate a contextMenu.';</span>    <span class="token comment">// document.getElementById('mountNode')!.appendChild(descriptionDiv);</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mountNode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> width <span class="token operator">=</span> container<span class="token operator">!</span><span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>    <span class="token keyword">const</span> height <span class="token operator">=</span> container<span class="token operator">!</span><span class="token punctuation">.</span>scrollHeight <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> contextMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">G6<span class="token punctuation">.</span>Menu</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> header<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token operator">!</span><span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> evt<span class="token operator">!</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>isCanvas <span class="token operator">&amp;&amp;</span> evt<span class="token operator">!</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">isCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                header <span class="token operator">=</span> <span class="token string">'Canvas ContextMenu'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token operator">!</span><span class="token punctuation">.</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> itemType <span class="token operator">=</span> evt<span class="token operator">!</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                header <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>itemType<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ContextMenu</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul>      &lt;li>增加&lt;/li>      &lt;li>删除&lt;/li>      &lt;li>修改&lt;/li>    &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">handleMenuClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// console.log(target.nodeValue);</span>            <span class="token comment">// console.log("target:" + target);</span>            <span class="token comment">// console.log("item:" + item);</span>            <span class="token comment">// console.log("target,item:" + target, item);</span>            <span class="token comment">// console.log("ceshi" + item._cfg?.id);</span>            <span class="token comment">// console.log("ceshi2" + target.innerHTML);</span>            <span class="token keyword">interface</span> <span class="token class-name">nodeBase</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">id</span><span class="token operator">:</span> string                <span class="token literal-property property">x</span><span class="token operator">:</span> number                <span class="token literal-property property">y</span><span class="token operator">:</span> number                <span class="token literal-property property">label</span><span class="token operator">:</span> string                <span class="token literal-property property">type</span><span class="token operator">:</span> string            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">===</span> <span class="token string">'增加'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">g6_add</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>_cfg<span class="token operator">?.</span>id <span class="token operator">||</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>_cfg<span class="token operator">?.</span>model<span class="token operator">?.</span>x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>_cfg<span class="token operator">?.</span>model<span class="token operator">?.</span>y <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">===</span> <span class="token string">'删除'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">g6_delete</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>_cfg<span class="token operator">?.</span>id <span class="token operator">||</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML <span class="token operator">===</span> <span class="token string">'修改'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">g6_edit</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>_cfg<span class="token operator">?.</span>id <span class="token operator">||</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// offsetX and offsetY include the padding of the parent container</span>        <span class="token comment">// 需要加上父级容器的 padding-left 16 与自身偏移量 10</span>        <span class="token literal-property property">offsetX</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token comment">// 需要加上父级容器的 padding-top 24 、画布兄弟元素高度、与自身偏移量 10</span>        <span class="token literal-property property">offsetY</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment">// the types of items that allow the menu show up</span>        <span class="token comment">// 在哪些类型的元素上响应</span>        <span class="token literal-property property">itemTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'node'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">G6<span class="token punctuation">.</span>Graph</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 contextMenu plugins 时，需要将 container 设置为 position: relative;</span>        <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">'mountNode'</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>        <span class="token literal-property property">linkCenter</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>contextMenu<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">defaultNode</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>            <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">'#DEE9FF'</span><span class="token punctuation">,</span>                <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">'#5B8FF9'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">defaultEdge</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">'#b5b5b5'</span><span class="token punctuation">,</span>                <span class="token literal-property property">lineAppendWidth</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// Enlarge the range the edge to be hitted</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">labelCfg</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">autoRotate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// A white stroke with width 5 helps show the label more clearly avoiding the interference of the overlapped edge</span>                    <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">lineWidth</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">modes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'drag-canvas'</span><span class="token punctuation">,</span> <span class="token string">'zoom-canvas'</span><span class="token punctuation">,</span> <span class="token string">'drag-node'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'click-select'</span><span class="token punctuation">,</span>                <span class="token literal-property property">multiple</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 允许拖拽画布、放缩画布、拖拽节点、单选节点</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//监听状态的改变。用于给显示详细信息</span>    graph<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'afteritemstatechange'</span><span class="token punctuation">,</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span> <span class="token operator">=</span> evt        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">?.</span>_cfg<span class="token operator">?.</span>states<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'selected'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">showInfo</span><span class="token punctuation">(</span>item<span class="token operator">?.</span>_cfg<span class="token operator">?.</span>id<span class="token punctuation">)</span>            g6_select_id<span class="token punctuation">.</span>value <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token operator">?.</span>_cfg<span class="token operator">?.</span>id <span class="token operator">||</span> <span class="token string">'-1'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            g6_select_id<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 读取数据</span>    graph<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    graph<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//index,xTarget,yTarget:想要生成的id，x,y（tips:index从1开始）//id的作用在于修改</span>    <span class="token comment">//nextNode,sourceNode:想要生成的node的上下节点，用于连线。没有下节点则表示为自己。</span>    <span class="token comment">//刚刚思考了下，不需要上下节点。因为必定添加在最后一位，原来的最后一位id==data.nodes.length</span>    <span class="token comment">//但是还是要判断从哪里开始进行修改label，从index开始，赋值给新的label，后面的就顺序下沿，如果index就是最后一位，其实</span>    <span class="token keyword">const</span> <span class="token function-variable function">g6_add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">xTarget</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">yTarget</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        g6_id<span class="token punctuation">.</span>value <span class="token operator">=</span> index        g6_status<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment">//打开弹窗申请内容</span>        dialogVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">g6_edit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">showClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'开始不能被修改'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        g6_id<span class="token punctuation">.</span>value <span class="token operator">=</span> index        g6_status<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span>        form<span class="token punctuation">.</span>value <span class="token operator">=</span> tableData<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment">//打开弹窗申请内容</span>        dialogVisible<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">g6_delete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">showClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'开始不能被删除'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span>            graph<span class="token punctuation">.</span><span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> data<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>label <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g6_select_id<span class="token punctuation">.</span>value <span class="token operator">>=</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">selectChange</span><span class="token punctuation">(</span>g6_select_id<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g6_select_id<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                infoDes<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                        <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                        <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                infoDes<span class="token punctuation">.</span>value <span class="token operator">=</span> tableData<span class="token punctuation">[</span>g6_select_id<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        graph<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>edges<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">showInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selectId</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"showinfo:"</span> <span class="token operator">+</span> selectId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        infoDes<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">calagory</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">storageChart</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">plcName</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        infoDes<span class="token punctuation">.</span>value <span class="token operator">=</span> tableData<span class="token punctuation">[</span>selectId <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//select_id,用于应对add与delect selected上方，但是select信息不改变的情况</span><span class="token keyword">const</span> g6_select_id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//需要改变的id</span><span class="token keyword">const</span> g6_id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//需要改变的状态-用于控制dialog是添加还是修改</span><span class="token comment">//添加的时候显示1，修改则表示为2</span><span class="token keyword">const</span> g6_status <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">nodes</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'开始'</span><span class="token punctuation">,</span>            <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">edges</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//页面加载的时候加载画图所需的数据</span><span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//依据信息绘制图像</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tableData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        data<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> tableData<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>            <span class="token literal-property property">y</span><span class="token operator">:</span> i <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"dataload:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#routeContioner</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 40px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% - 40px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.infoDescription</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> static<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.g6Canvas</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token comment">/* box-shadow:darkgrey 5px 5px 5px 5px; */</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px 1px 1px 1px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> groove<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.routeTable</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.g6-component-contextmenu</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #e2e2e2<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #545454<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.g6-component-contextmenu ul</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">padding-inline-start</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.g6-component-contextmenu ul li</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px 50px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.g6-component-contextmenu ul li:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e1dddd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> g6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> g6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-安装scss</title>
      <link href="/2023/04/03/Vue-%E5%AE%89%E8%A3%85scss/"/>
      <url>/2023/04/03/Vue-%E5%AE%89%E8%A3%85scss/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue安装scss"><a href="#Vue安装scss" class="headerlink" title="Vue安装scss"></a>Vue安装scss</h1><p>vue3+vite安装scss</p><h2 id="安装scss"><a href="#安装scss" class="headerlink" title="安装scss"></a>安装scss</h2><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install sass</code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install --save-dev sass-loader</code></pre><h2 id="创建样式库"><a href="#创建样式库" class="headerlink" title="创建样式库"></a>创建样式库</h2><p>在这里路径下创建如下文件<br> &#x2F;assets&#x2F;style&#x2F;mixin.scss</p><h2 id="配置vite-config-js"><a href="#配置vite-config-js" class="headerlink" title="配置vite.config.js"></a>配置vite.config.js</h2><p>在vite.config.js里配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath<span class="token punctuation">,</span> <span class="token constant">URL</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'node:url'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">'./src'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// css预处理器</span>    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 引入 mixin.scss 这样就可以在全局中使用 mixin.scss中预定义的变量了</span>        <span class="token comment">// 给导入的路径最后加上 ; </span>        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token string">'@import "@/assets/style/mixin.scss";'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-读取csv</title>
      <link href="/2023/04/03/Vue-%E8%AF%BB%E5%8F%96csv/"/>
      <url>/2023/04/03/Vue-%E8%AF%BB%E5%8F%96csv/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue读取csv"><a href="#Vue读取csv" class="headerlink" title="Vue读取csv"></a>Vue读取csv</h1><p>读取csv，前端处理</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>前端</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>templete部分</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoImportBtn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcInfoImport(plcForm.id)<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/csv<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>script部分</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">plcInfoImport</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'plcInfoImportBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    file1<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span>file1<span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//读取为二进制</span>        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取未空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> clients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> row <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    id<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                    workStationId<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                    workStationCode<span class="token operator">:</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    variableName<span class="token operator">:</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    interactType<span class="token operator">:</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    dbBlockNum<span class="token operator">:</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    shift<span class="token operator">:</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    dataType<span class="token operator">:</span>row<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    shifttBit<span class="token operator">:</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    length<span class="token operator">:</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    descbibe<span class="token operator">:</span>row<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                plcForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>                clients<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//由对象转为JSON字符串</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>clients<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 读取csv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 读取csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-el-table分页与搜索</title>
      <link href="/2023/04/03/Vue-el-table%E5%88%86%E9%A1%B5%E4%B8%8E%E6%90%9C%E7%B4%A2/"/>
      <url>/2023/04/03/Vue-el-table%E5%88%86%E9%A1%B5%E4%B8%8E%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中el-tables-分页-搜索"><a href="#Vue中el-tables-分页-搜索" class="headerlink" title="Vue中el-tables+分页+搜索"></a>Vue中el-tables+分页+搜索</h1><p>分页的实现通过：el-pagination标签  </p><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p>初步步骤分享</p><ol><li>获取所有数据alltable。</li><li>利用computed属性相关联input+currentPage+pageSize</li></ol><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>可以把filterTable设置成为被computed属性。这样方便绑定输入框与filterTable<br>Q:进行搜索的时候没有对于currentPage进行设置，那实际是如何表现的。<br>A:虽然对于currenPage进行设置，但是由于设置了totalNum，<br>所以如果当前所在页面的页码不存在，页面会自动转至最近存在页码。<br>如果页码存在，则不变化。  </p><h2 id="代码展现"><a href="#代码展现" class="headerlink" title="代码展现"></a>代码展现</h2><p>html中el-pagination</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>  <span class="token attr-name"><span class="token namespace">v-model:</span>current-page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentPage<span class="token punctuation">"</span></span> <span class="token attr-name">:small</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">:background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>background<span class="token punctuation">"</span></span>    <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total, prev, pager, next, jumper<span class="token punctuation">"</span></span> <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalNum<span class="token punctuation">"</span></span>    <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>script中</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> searchInput <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> showdata <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">//获取经过input过滤后的表格</span>    <span class="token keyword">const</span> filterTable <span class="token operator">=</span> tableData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token operator">!</span>searchInput<span class="token punctuation">.</span>value <span class="token operator">||</span>            data<span class="token punctuation">.</span>plcCode<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment">//获取被展示的页面</span>    tableShowData<span class="token punctuation">.</span>value <span class="token operator">=</span> filterTable<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">,</span> currentPage<span class="token punctuation">.</span>value <span class="token operator">*</span> pageSize<span class="token punctuation">)</span>    <span class="token comment">//调整分页的页码与总数目</span>    totalNum<span class="token punctuation">.</span>value <span class="token operator">=</span> filterTable<span class="token punctuation">.</span>length    <span class="token keyword">return</span> tableShowData<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> el-table </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> el-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-知错就该（三）</title>
      <link href="/2023/04/03/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E8%AF%A5%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/04/03/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E8%AF%A5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>cmd中提示</p><pre class="language-none"><code class="language-none">[vite] error while updating dependencies:Error: ENOENT: no such file or directory, rename &#39;C:\Users\Nestar\Desktop\VUE\Vue3_Test3\node_modules\.vite\deps_temp&#39; -&gt; &#39;C:\Users\Nestar\Desktop\VUE\Vue3_Test3\node_modules\.vite\deps&#39;</code></pre><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>vsCode+vue3+vite<br>当时在新安装了一个插件，然后运行项目，浏览器中加载不出来，发现在cmd中有这个错误提示。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>清空npm缓存</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm cache clean --force</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我也不知道说啥了</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-下载文件</title>
      <link href="/2023/04/03/Vue-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/03/Vue-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue下载文件"><a href="#Vue下载文件" class="headerlink" title="Vue下载文件"></a>Vue下载文件</h1><p>axios可以通过get与post接口实现文件下载。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">exportPLcs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token operator">:</span><span class="token string">"/File/DownloadVariablesFile"</span><span class="token punctuation">,</span>        method<span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>        responseType<span class="token operator">:</span><span class="token string">'blob'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">// 获取流信息</span>          <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// document.createElement()是在对象中创建一个对象</span>            <span class="token keyword">const</span> elink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"export start2"</span><span class="token operator">+</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> _fileName <span class="token operator">=</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-disposition'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文件名，中文无法解析的时候会显示 _(下划线),生产环境获取不到</span>            <span class="token comment">// 样式 为 none</span>            elink<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token comment">//可以获取当前文件的一个内存URL</span>            elink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>            elink<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> _fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>_fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//body中添加一个子结点</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>            elink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放URL 对象</span>            <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>elink<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 删除指定的元素</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//   &#125; else &#123; // IE10+下载</span>        <span class="token comment">//     navigator.msSaveBlob(blob, fileName);</span>        <span class="token comment">//   &#125;</span>        <span class="token comment">//   this.open2("导出成功!")</span>                  <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token operator">+</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'please check the network, etc.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>有些需要注意的点。</p><ol><li>resposeType:’blob’这个属性是需要的，不然配置中认不出来这个是blob文件,即无法打印”收到文件“<pre class="language-typescript" data-language="typescript"><code class="language-typescript">request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"查看拦截器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果是返回的文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>responseType <span class="token operator">==</span> <span class="token string">"blob"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>conte      <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 兼容服务端返回的字符串数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res <span class="token operator">=</span> res <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当权限验证不通过的时候给出提示</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"401"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            message<span class="token operator">:</span> res<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>            type<span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前端返回的res直接赋值的话，需要.data，如果直接给res就不需要</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err"</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// for debug</span>    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>_fileName是通过headers[‘conten-disposition’]属性获取的。但是这个属性默认是无法读取到，但是在页面的network中可以看到。需要在服务器端设置<pre class="language-none"><code class="language-none">Access-Control-Expose-Headers: Content-Disposition</code></pre>其中：Access-Control-Expose-Headers表示暴露出来的信息选项，后面是指具体项</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 下载文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 下载文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-上传文件</title>
      <link href="/2023/04/03/Vue-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/03/Vue-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue上传文件"><a href="#Vue上传文件" class="headerlink" title="Vue上传文件"></a>Vue上传文件</h1><p>通过elment-ui实现相关功能</p><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p>通过element-plus的upload组件实现相关功能。<br><a herf="https://element-plus.gitee.io/zh-CN/component/upload.html" title="element-ui对应网址">element-ui-upload</a></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>html部分</p><pre class="language-markup" data-language="markup"><code class="language-markup">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>  <span class="token attr-name"><span class="token namespace">v-model:</span>file-list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span>  <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://192.168.4.66:7138/File/UpLoadVariableFile<span class="token punctuation">"</span></span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span>  <span class="token attr-name">multiple</span>  <span class="token attr-name">:on-preview</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handlePreview<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleRemove<span class="token punctuation">"</span></span>  <span class="token attr-name">:before-remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeRemove<span class="token punctuation">"</span></span>  <span class="token attr-name">:limit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-exceed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleExceed<span class="token punctuation">"</span></span>  <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onUploadSuccess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click to upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#tip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-upload__tip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      jpg/png files with a size less than 500KB.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">></span></span></code></pre><p>script部分</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> UploadProps<span class="token punctuation">,</span> UploadUserFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">const</span> fileList <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>UploadUserFile<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">//   &#123;</span><span class="token comment">//     name: 'element-plus-logo.svg',</span><span class="token comment">//     url: 'https://element-plus.org/images/element-plus-logo.svg',</span><span class="token comment">//   &#125;,</span><span class="token comment">//   &#123;</span><span class="token comment">//     name: 'element-plus-logo2.svg',</span><span class="token comment">//     url: 'https://element-plus.org/images/element-plus-logo.svg',</span><span class="token comment">//   &#125;,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleRemove<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onRemove'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">,</span> uploadFiles<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> uploadFiles<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handlePreview<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onPreview'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> handleExceed<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onExceed'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>files<span class="token punctuation">,</span> uploadFiles<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ElMessage<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The limit is 3, you selected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>files<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> files this time, add up to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>      files<span class="token punctuation">.</span>length <span class="token operator">+</span> uploadFiles<span class="token punctuation">.</span>length    <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> totally</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> beforeRemove<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'beforeRemove'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>uploadFile<span class="token punctuation">,</span> uploadFiles<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> ElMessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cancel the transfert of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>uploadFile<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ?</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//用于成功之后的返回值</span><span class="token keyword">const</span> onUploadSuccess<span class="token operator">:</span> UploadProps<span class="token punctuation">[</span><span class="token string">'onSuccess'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>response<span class="token punctuation">,</span>uploadFile<span class="token punctuation">,</span> uploadFiles<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    resInfo <span class="token operator">=</span> response    <span class="token keyword">if</span> <span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        plcForm<span class="token punctuation">.</span>value<span class="token punctuation">.</span>variables <span class="token operator">=</span> resInfo<span class="token punctuation">.</span>content    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> upload </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-el-table样式</title>
      <link href="/2023/04/03/Vue-el-table%E6%A0%B7%E5%BC%8F/"/>
      <url>/2023/04/03/Vue-el-table%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue修改el-table样式"><a href="#Vue修改el-table样式" class="headerlink" title="Vue修改el-table样式"></a>Vue修改el-table样式</h1><p>今天想要更改el-table的样式，发现并不简单<br>首先先说基本table的格式<br>table作为一个大的集合的名称<br>表头行th<br>表行tr<br>表列td<br>两行两列的表格代码html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teble</span><span class="token punctuation">></span></span></code></pre><table> <tr> <td></td> <td></td> </tr> <tr> <td></td> <td></td> </tr> </teble><p>根据网上搜索得知td的颜色会盖住tr的颜色。所以存在</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">:deep(.el-table tbody tr:hover td )</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果没有el-table__expend的情况下</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">:deep(.el-table tbody tr:hover>td )</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffc64b<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.el-table tbody th )</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f7bd8f<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:deep(.el-table tbody tr )</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #cbb994<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>解释一下&gt;的作用<br>就是用于寻找tr标签下儿子层的td标签。即使td在孙子层，即多一层嵌套就不去进行此效果。<br>因此这个实际上是对于该tr下的所有td进行染色。</p><p>仔细研究了下为什么会出现form中的表头不上色，但是表身上色，但是外面的表头不上色，表神上色。expand中背景部分上色，expand的表头上色，表身也上色<br>form中的th是在thead，tr中<br>但是表身是在tbody中</p><p>外部的其实也是<br>table—-colgroup+thead&#x2F;thbody——–tr———-th&#x2F;td<br>目前猜测是因为数据可变与不可变有关。thead&#x2F;thbody。动态长度的th都是用thead，静态长度th是tbody</p><h2 id="正常的table中"><a href="#正常的table中" class="headerlink" title="正常的table中"></a>正常的table中</h2><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>el-table class&#x3D; el-table__body<br>tr class&#x3D; el-table__row<br>td class&#x3D; el-table__cell  </p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>el-table class&#x3D; el-table__header<br>tr不是没写完，就是后面没有<br>tr class&#x3D;<br>th class&#x3D; el-table__cell  </p><h2 id="expand"><a href="#expand" class="headerlink" title="expand"></a>expand</h2><p>expand的展开其实是新增的一行tr，td占据所有colspan&#x3D;td.length。然后中间是自定义内容<br>expand 图标所在cell<br>class&#x3D; el-table__expand-column el-table__cell<br>向下寻找，div class&#x3D;cell中包含这个div属于html的知识<br>未展开时<br>div class&#x3D;el-table__expand-icon<br>展开时<br>class&#x3D;el-table__expand-icon el-table__expand-icon–expanded<br>被展开的tr 没有样式<br>td class&#x3D;el-table__cell el-table__expanded-cell  </p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> el-table </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> el-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-dragable（二）</title>
      <link href="/2023/04/03/Vue-dragable%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/04/03/Vue-dragable%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-DraggableBox（二）"><a href="#Vue-DraggableBox（二）" class="headerlink" title="Vue-DraggableBox（二）"></a>Vue-DraggableBox（二）</h1><p>出现了新的需求</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>station隶属于process<br>process隶属于route<br>route：process&lt;&#x3D;&gt;1:n<br>process：station&lt;&#x3D;&gt;1:n<br>route中的process具有顺序需求<br>process中的station没有顺序需求<br>process于station均只在同一个地方出现  </p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>其实就是要将station放在合适的process中，然后选择需要的process并将其排序。<br>通过draggable实现方案，就是一共三列。  </p><ul><li>列A:station list</li><li>列B:process list</li><li>列C:route<br>其中process中具有一个station list属性。<br>列A就是最基础的dragabelZ<br>列B，C是一个DragableX嵌套DragableY<br>其中dragabelZ与DragableY的group相同，则station可以在A，B，C互相转移<br>其中dragabelX-B与DragableX-C的group相同，则process可以在B，C互相转移</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>dragableA</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-column-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      &#123;&#123; headerText &#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>draggable</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-column-content<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token attr-name">:set-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setData<span class="token punctuation">"</span></span> <span class="token attr-name">@start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onStart<span class="token punctuation">"</span></span>      <span class="token attr-name">@end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEnd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element,index in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.workStationId<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &#123;&#123; index.toString() &#125;&#125;  &#123;&#123; element.workStationCode &#125;&#125;  --></span>         &#123;&#123; element.workStationCode &#125;&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>draggable</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueDraggableNext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-draggable-next'</span><span class="token keyword">interface</span> <span class="token class-name">station</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> number  <span class="token literal-property property">productRoutingId</span><span class="token operator">:</span> number  <span class="token literal-property property">workStationId</span><span class="token operator">:</span> number  <span class="token literal-property property">workStationCode</span><span class="token operator">:</span> string  <span class="token literal-property property">processCategory</span><span class="token operator">:</span> number  <span class="token literal-property property">processType</span><span class="token operator">:</span> number  <span class="token literal-property property">sort</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DragKanbanDemo'</span><span class="token punctuation">,</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">draggable</span><span class="token operator">:</span> VueDraggableNext  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">headerText</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'Header'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Array <span class="token keyword">as</span> unknown <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>station<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dataTransfer</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// to avoid Firefox bug</span>      <span class="token comment">// Detail see : https://github.com/RubaXa/Sortable/issues/1012</span>      dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//拖拽结束的事件</span>    <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结束拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.board-column</span> <span class="token punctuation">&#123;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">max-height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token selector">.board-column-header</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px 3px 0 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.board-column-content</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 10px solid transparent<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token selector">.board-item</span> <span class="token punctuation">&#123;</span>      <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 54px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>      <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>      <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  </code></pre><p>dragableB与C，两人使用相同模板</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-column-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; headerText &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>draggable</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processList<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>process-board-column-content<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>            <span class="token attr-name">:set-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setData<span class="token punctuation">"</span></span> <span class="token attr-name">@start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onStart<span class="token punctuation">"</span></span> <span class="token attr-name">@end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEnd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processElement, index in processList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processElement.code<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>process-board-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>station-board-column-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    &#123;&#123; processElement.code &#125;&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- &#123;&#123; index.toString() &#125;&#125; : &#123;&#123; processElement.code &#125;&#125; --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>draggable</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>processElement.stations<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>station-board-column-content<span class="token punctuation">"</span></span>                    <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">:set-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setData<span class="token punctuation">"</span></span> <span class="token attr-name">@start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onStart<span class="token punctuation">"</span></span> <span class="token attr-name">@end</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onEnd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element, index in processElement.stations<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>element.workStationId<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>board-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &#123;&#123; index.toString() &#125;&#125; : &#123;&#123; element.workStationCode &#125;&#125;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>draggable</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>draggable</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueDraggableNext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-draggable-next'</span><span class="token keyword">interface</span> <span class="token class-name">process</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">code</span><span class="token operator">:</span> string    <span class="token literal-property property">createTime</span><span class="token operator">:</span> string    <span class="token literal-property property">sort</span><span class="token operator">:</span> number    <span class="token literal-property property">stations</span><span class="token operator">:</span> station<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">station</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">productRoutingId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationCode</span><span class="token operator">:</span> string    <span class="token literal-property property">processCategory</span><span class="token operator">:</span> number    <span class="token literal-property property">processType</span><span class="token operator">:</span> number    <span class="token literal-property property">sort</span><span class="token operator">:</span> number<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DragKanban'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">draggable</span><span class="token operator">:</span> VueDraggableNext    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">headerText</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'Header'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// options: &#123;</span>        <span class="token comment">//   type: Object,</span>        <span class="token comment">//   default() &#123;</span>        <span class="token comment">//     return &#123;&#125;</span>        <span class="token comment">//   &#125;</span>        <span class="token comment">// &#125;,</span>        <span class="token literal-property property">processList</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Array <span class="token keyword">as</span> unknown <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>process<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">setData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dataTransfer</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// to avoid Firefox bug</span>            <span class="token comment">// Detail see : https://github.com/RubaXa/Sortable/issues/1012</span>            dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">//拖拽结束的事件</span>        <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结束拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">//区域.board-column</span> <span class="token punctuation">&#123;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">max-height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token selector">//区域的title    .board-column-header</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px 3px 0 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.station-board-column-header</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px 3px 0 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">//station方块在区域内的位置    .station-board-column-content</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span> 10px solid transparent<span class="token punctuation">;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token selector">//方块的设置        .board-item</span> <span class="token punctuation">&#123;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 54px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">//process方块的区域设置    .process-board-column-content</span> <span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 10px solid transparent<span class="token punctuation">;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token selector">//方块的设置        .process-board-item</span> <span class="token punctuation">&#123;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 54px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0px 1px 3px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        </code></pre><p>模板使用</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> dragable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> dragable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-dragable（一）</title>
      <link href="/2023/04/03/Vue-dragable%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/04/03/Vue-dragable%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-dragBox"><a href="#Vue-dragBox" class="headerlink" title="Vue-dragBox"></a>Vue-dragBox</h1><h2 id="安装-vue2版本"><a href="#安装-vue2版本" class="headerlink" title="安装-vue2版本"></a>安装-vue2版本</h2><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install vuedraggable  或者使用镜像安装cnpm install vuedraggable  </code></pre><p>安装完成之后会有提示</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">1 high severity vulnerability</code></pre><p>意思是有高危漏洞,可以运行下面命令来解决,<a herf="https://blog.csdn.net/weixin_45683187/article/details/109378715">高危漏洞</a></p><pre class="language-none"><code class="language-none">npm audit fix</code></pre><h2 id="安装-vue3版本"><a href="#安装-vue3版本" class="headerlink" title="安装-vue3版本"></a>安装-vue3版本</h2><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install vue-draggable-next</code></pre><p>引入</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"># <span class="token number">2.</span> vue页面导入vue<span class="token operator">-</span>draggable<span class="token operator">-</span>next组件<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueDraggableNext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-draggable-next'</span># <span class="token number">3.</span> 声明组件components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    draggable<span class="token operator">:</span> VueDraggableNext<span class="token punctuation">&#125;</span></code></pre><p>使用方式-模板方案<br>创建模板  </p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board-column"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board-column-header"</span><span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> headerText <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>draggable <span class="token operator">:</span>list<span class="token operator">=</span><span class="token string">"list"</span> v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"$attrs"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board-column-content"</span> <span class="token operator">:</span>set<span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"setData"</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">start</span></span><span class="token operator">=</span><span class="token string">"onStart"</span>      <span class="token decorator"><span class="token at operator">@</span><span class="token function">end</span></span><span class="token operator">=</span><span class="token string">"onEnd"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"element in list"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"element.id"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board-item"</span><span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> element<span class="token punctuation">.</span>wsCode <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>draggable<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VueDraggableNext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-draggable-next'</span><span class="token keyword">interface</span> <span class="token class-name">staion</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token builtin">number</span>  wsCode<span class="token operator">:</span> <span class="token builtin">string</span>  wsDescription<span class="token operator">:</span> <span class="token builtin">string</span>  createTime<span class="token operator">:</span> <span class="token builtin">string</span>  plcCode<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span>  updateTime<span class="token operator">:</span> <span class="token builtin">string</span>  wsProductTime<span class="token operator">:</span> <span class="token builtin">number</span>  plcVariables<span class="token operator">:</span> myvariable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">myvariable</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token builtin">number</span>  plcInfoId<span class="token operator">:</span> <span class="token builtin">number</span>  workStationId<span class="token operator">:</span> <span class="token builtin">number</span>  workStationCode<span class="token operator">:</span> <span class="token builtin">string</span>  interactType<span class="token operator">:</span> <span class="token builtin">number</span>  dbBlockNum<span class="token operator">:</span> <span class="token builtin">number</span>  variableName<span class="token operator">:</span> <span class="token builtin">string</span>  shift<span class="token operator">:</span> <span class="token builtin">number</span>  dataType<span class="token operator">:</span> <span class="token builtin">string</span>  shifttBit<span class="token operator">:</span> <span class="token builtin">number</span>  length<span class="token operator">:</span> <span class="token builtin">number</span>  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'DragKanbanDemo'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    draggable<span class="token operator">:</span> VueDraggableNext  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    headerText<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'Header'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// options: &#123;</span>    <span class="token comment">//   type: Object,</span>    <span class="token comment">//   default() &#123;</span>    <span class="token comment">//     return &#123;&#125;</span>    <span class="token comment">//   &#125;</span>    <span class="token comment">// &#125;,</span>    list<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token builtin">Array</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>staion<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">setData</span><span class="token punctuation">(</span>dataTransfer<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// to avoid Firefox bug</span>      <span class="token comment">// Detail see : https://github.com/RubaXa/Sortable/issues/1012</span>      dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//拖拽结束的事件</span>    <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结束拖拽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">></span><span class="token punctuation">.</span>board<span class="token operator">-</span>column <span class="token punctuation">&#123;</span>  min<span class="token operator">-</span>width<span class="token operator">:</span> 300px<span class="token punctuation">;</span>  min<span class="token operator">-</span>height<span class="token operator">:</span> 100px<span class="token punctuation">;</span>  height<span class="token operator">:</span> auto<span class="token punctuation">;</span>  overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>  background<span class="token operator">:</span> #f0f0f0<span class="token punctuation">;</span>  border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span>  <span class="token punctuation">.</span>board<span class="token operator">-</span>column<span class="token operator">-</span>header <span class="token punctuation">&#123;</span>    height<span class="token operator">:</span> 50px<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> 50px<span class="token punctuation">;</span>    overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>    padding<span class="token operator">:</span> <span class="token number">0</span> 20px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    background<span class="token operator">:</span> #<span class="token number">333</span><span class="token punctuation">;</span>    color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px 3px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span>board<span class="token operator">-</span>column<span class="token operator">-</span>content <span class="token punctuation">&#123;</span>    height<span class="token operator">:</span> auto<span class="token punctuation">;</span>    overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span>    border<span class="token operator">:</span> 10px solid transparent<span class="token punctuation">;</span>    min<span class="token operator">-</span>height<span class="token operator">:</span> 60px<span class="token punctuation">;</span>    display<span class="token operator">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>start<span class="token punctuation">;</span>    flex<span class="token operator">-</span>direction<span class="token operator">:</span> column<span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">.</span>board<span class="token operator">-</span>item <span class="token punctuation">&#123;</span>      cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>      width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>      height<span class="token operator">:</span> 64px<span class="token punctuation">;</span>      margin<span class="token operator">:</span> 5px <span class="token number">0</span><span class="token punctuation">;</span>      background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>      text<span class="token operator">-</span>align<span class="token operator">:</span> left<span class="token punctuation">;</span>      line<span class="token operator">-</span>height<span class="token operator">:</span> 54px<span class="token punctuation">;</span>      padding<span class="token operator">:</span> 5px 10px<span class="token punctuation">;</span>      box<span class="token operator">-</span>sizing<span class="token operator">:</span> border<span class="token operator">-</span>box<span class="token punctuation">;</span>      box<span class="token operator">-</span>shadow<span class="token operator">:</span> 0px 1px 3px <span class="token number">0</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>使用模板</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchInput<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>170px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components-container board<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Kanban</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showdata<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo <span class="token punctuation">"</span></span> <span class="token attr-name">header-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>All Stations<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Kanban</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list2<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>working<span class="token punctuation">"</span></span> <span class="token attr-name">header-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Route Station<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Kanban <span class="token keyword">from</span> <span class="token string">'@/components/dragBox/index.vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vue/reactivity'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token string">'mission'</span><span class="token keyword">interface</span> <span class="token class-name">staion</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span>number    <span class="token literal-property property">wsCode</span><span class="token operator">:</span>string    <span class="token literal-property property">wsDescription</span><span class="token operator">:</span>string    <span class="token literal-property property">createTime</span><span class="token operator">:</span>string    <span class="token literal-property property">plcCode</span><span class="token operator">:</span>string<span class="token operator">|</span><span class="token keyword">null</span>    <span class="token literal-property property">updateTime</span><span class="token operator">:</span>string    <span class="token literal-property property">wsProductTime</span><span class="token operator">:</span>number    <span class="token literal-property property">plcVariables</span><span class="token operator">:</span>myvariable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">myvariable</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> number    <span class="token literal-property property">plcInfoId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationId</span><span class="token operator">:</span> number    <span class="token literal-property property">workStationCode</span><span class="token operator">:</span> string    <span class="token literal-property property">interactType</span><span class="token operator">:</span> number    <span class="token literal-property property">dbBlockNum</span><span class="token operator">:</span> number    <span class="token literal-property property">variableName</span><span class="token operator">:</span> string    <span class="token literal-property property">shift</span><span class="token operator">:</span> number    <span class="token literal-property property">dataType</span><span class="token operator">:</span> string    <span class="token literal-property property">shifttBit</span><span class="token operator">:</span> number    <span class="token literal-property property">length</span><span class="token operator">:</span> number    <span class="token literal-property property">description</span><span class="token operator">:</span> string<span class="token punctuation">&#125;</span><span class="token comment">// let list1:staion[]</span><span class="token comment">// let list2:staion[]</span><span class="token keyword">let</span> list1<span class="token operator">=</span>ref<span class="token operator">&lt;</span>staion<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station1'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc1'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station2'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc2'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station3'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc3'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station4'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc4'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station5'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc5'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station6'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc6'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>   <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">wsCode</span><span class="token operator">:</span><span class="token string">'station7'</span><span class="token punctuation">,</span><span class="token literal-property property">wsDescription</span><span class="token operator">:</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token literal-property property">createTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">plcCode</span><span class="token operator">:</span><span class="token string">'plc7'</span><span class="token punctuation">,</span><span class="token literal-property property">updateTime</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">wsProductTime</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token literal-property property">plcVariables</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// let list2=ref&lt;staion[]>([&#123;   id:8, wsCode:'station8',wsDescription:'8',createTime:'',plcCode:'plc8',updateTime:'',wsProductTime:8,plcVariables:[]&#125; ,])</span><span class="token keyword">let</span> list2<span class="token operator">=</span>ref<span class="token operator">&lt;</span>staion<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//&lt;------------------实现搜索栏与分页的结合----------</span><span class="token keyword">let</span> searchInput <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">const</span> showdata <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list1<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token operator">!</span>searchInput<span class="token punctuation">.</span>value <span class="token operator">||</span>            data<span class="token punctuation">.</span>wsCode<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>data<span class="token punctuation">.</span>wsDescription<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.board</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.todo :deep(.board-column-header)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #4A9FF9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.working :deep(.board-column-header)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f9944a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> dragable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> dragable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-知错就改（四）</title>
      <link href="/2023/04/03/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/04/03/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue知错就改（Uncaught-in-promise-Error）"><a href="#Vue知错就改（Uncaught-in-promise-Error）" class="headerlink" title="Vue知错就改（Uncaught (in promise) Error）"></a>Vue知错就改（Uncaught (in promise) Error）</h1><h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p>Uncaught (in promise) Error: No match for {“name”:”ProcessInfo”,”params”:{}}</p><h2 id="发生场景"><a href="#发生场景" class="headerlink" title="发生场景"></a>发生场景</h2><p>vue先创建一个**.vue文件，但是然后复制一个已有的文件。设置过路由后，想先加载页面看看。<br>但是页面没有渲染出来。在浏览器的console中发现这个错误提示。刷新，与重启vue无效果。<br>屏蔽这个路由，页面正常加载。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我并没有解决这个问题，过一段时间后直接加载成功了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没啥总结的。希望以后可以不遇见这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redmi刷入magisk</title>
      <link href="/2023/04/03/redmi%E5%88%B7%E5%85%A5magisk/"/>
      <url>/2023/04/03/redmi%E5%88%B7%E5%85%A5magisk/</url>
      
        <content type="html"><![CDATA[<h1 id="小米刷入magisk"><a href="#小米刷入magisk" class="headerlink" title="小米刷入magisk"></a>小米刷入magisk</h1><p>此处先贴出两个使用过程中的参考资料<br><a herf="https://sspai.com/post/67932">通用版本magisk刷入介绍</a><br><a herf="https://zhuanlan.zhihu.com/p/507103088">小米k50刷入介绍</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Redmi K50<br>8+128<br>miui14.0.5  </p><h2 id="解除bl锁"><a href="#解除bl锁" class="headerlink" title="解除bl锁"></a>解除bl锁</h2><p>解除Bootloader，才可以对于底层进行操作。但是会影响设备的安全状态<br>手机的设置中的开发者选项，设备解锁状态。<br>根据提示<a href="http://www.miui.com/unlock/index.html">解除bl锁</a><br>需要注意的是，解除bl锁需要将账号绑定在设备上，同时，需要在电脑上的解锁工具登陆账号，手机登陆要验证码，不要太急着关机了。<br>手机已经进入fastboot模式，但是电脑上提示没有连接手机。换线依旧没有解决问题。考虑是驱动问题，在此设备-管理-设备管理器-找到自己的手机-更新驱动-选择小米解锁软件的drive文件夹，即可。注意，在k50上会清空记录，谨慎操作。<br>需要记得，就如上面所提到的账号绑定在设备上。这个是专指在这个界面上进行绑定，需要7天，168h。不然在绑定的时候就是很尴尬，会有提示时间不够。</p><h2 id="rec"><a href="#rec" class="headerlink" title="rec"></a>rec</h2><p>RecoveryRecovery（恢复模式）是独立于系统的一个模式，具有高权限。而官方Recovery功能少的可怜，要想满足我们刷机的需求就要刷入功能丰富的第三方Recovery。<br>但是目前k50好像是因为联发科的机器，相关的rec很少，至少我没有找到相关的信息。<br><br><br><a herf="https://zhuanlan.zhihu.com/p/428730333">相关资料来源</a></p><h2 id="开始刷入magisk"><a href="#开始刷入magisk" class="headerlink" title="开始刷入magisk"></a>开始刷入magisk</h2><p>经过查询，我选择使用fastboot刷机的方案。<br>seteps： </p><ol><li>手机下载安装：MT管理器</li><li>手机下载安装：Magisk</li><li>下载系统完整包：magiskcn.com&#x2F;get-miui（其他品牌请自行到官网下载）—-在系统界面，下载最新完整包，下载超过1%后，停止下载，在下载管理中继续下载</li><li>打开MT管理器，找到我们下载好的系统包，点开zip包，长按boot.img提取出来到Dowmload目录</li></ol><blockquote><p>（小米手机系统包默认下载的位置：Download&#x2F;dowmloaded_rom），如果你下载的是 OTA 包或解压系统包后只能得到一个体积较大的 payload.bin 文件，请跳转至附录查看如何使用开源工具解压（需 python 环境）</p></blockquote><ol start="6"><li><p>打开Magisk【安装 – 选择并修补一个文件 – 弹窗文件管理窗口（找到刚刚提取的boot.img）- 开始】</p></li><li><p>修补结束，会生成一个名字为（magisk_patched-版本号_随机字符.img）的文件（每次生成的随机字符都不一样，使用的时候请输入生成的名字）</p></li><li><p>手机连接到电脑，把boot.img和（magisk_patched-2X000_xxxxx.img）两个文件复制到电脑</p></li><li><p>下载FastBoot：<a href="https://wwt.lanzouf.com/ijexq04l6kbi">https://wwt.lanzouf.com/ijexq04l6kbi</a> 密码:小明没醒（解压出来，把magisk_patched-2X000_xxxxx.img复制到fastboot目录里）</p></li><li><p>打开bat文件（打开CMD命令行.bat）把手机重启到Fastboot模式（重启+音量-键）然后输入下面的命令</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">fastboot flash boot +面具文件</code></pre></li><li><p>出现下面这三行代码，就是成功刷入了。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">Sending ‘boot’ (131072 KB) OKAY [ 3.123s]Writing ‘boot’ OKAY [ 0.397s]Finished. Total time: 4.645s</code></pre></li><li><p>重启手机（开机有震动基本没问题了）耐心等手机开机。（显示Magisk的版本，就是刷好了的）</p></li></ol><blockquote><p>Tips:如果刷模块不兼容或者其他骚操作导致卡米的话，可以把我们前面提取的boot.img通过fastboot刷回去，恢复原系统，一般都能正常开机！boot.img保留一份在电脑，避免出问题了可以自救下！还原boot指令如下</p></blockquote><pre class="language-cmd" data-language="cmd"><code class="language-cmd">fastboot flash boot boot.img</code></pre><ol start="13"><li>附加信息<br>之前根据网上教程，只刷入boot.img，每次开机都卡在第一屏幕，发现现在新出的手机通过vbmeta.img实现开机签名校验，不关闭校验就会无法开机，相关知识可以搜索一下这个文件，关闭AVB校验的指令为<br>fastboot –disable-verity –disable-verification flash vbmeta vbmeta.img</li></ol><p>链接<a href="https://magiskcn.com/mediatek-vbmeta">https://magiskcn.com/mediatek-vbmeta</a></p><h2 id="附录-payload-bin"><a href="#附录-payload-bin" class="headerlink" title="附录-payload.bin"></a>附录-payload.bin</h2><p>以下内容都是在电脑上操作</p><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>传统A-Only机型：在卡刷包第一层目录中就可以找到boot.img这个文件<br>VAB分区机型：解压出压缩包中的payload.bin文件，使用【payload_dumper-win64】进行解包，将payload.bin文件放入<a herf="https://wwp.lanzouf.com/i5icDswxbih">payload_dumper-win64</a>文件夹中的【payload_input】文件夹，然后执行payload_dumper-win64中的payload_dumper.exe进行解包，解包完成后在【payload_output】中找到boot.img即提取成功</p><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>一般来说像 Google 给出的刷机包，解压其中的 image 包可以直接获得我们想要的各种镜像文件。但部分厂商给出的升级包以及部分第三方 ROM 的刷机包中解压出来只有 payload.bin，无法进一步解压获得我们想要的各种镜像文件。<br>解压 payload.bin 需要用到特殊的工具，我们可以在 Github 上找到开源的 payload dumper，这是一个基于 python 3 的命令行工具。<br>以zip 格式下载源代码，本地解压得到 payload_dumper-master 文件夹，下属两个 py 后缀的 python 文件。将 ROM 的 .zip 包解压缩后，把其中的 payload.bin 文件移送到 payload_dumper-master 中。</p><pre class="language-none"><code class="language-none">pip3 install protobuf #安装 protobuf## 定位到 payload_dumper-master 文件夹python3 -m pip install protobufpython3 -m pip install -r requirements.txtpython3 payload_dumper.py payload.bin</code></pre><h2 id="附录-用到的一些文件的下载地址"><a href="#附录-用到的一些文件的下载地址" class="headerlink" title="附录-用到的一些文件的下载地址"></a>附录-用到的一些文件的下载地址</h2><p>payload_dumper-win64：<a href="https://wwp.lanzouf.com/i5icDswxbih">https://wwp.lanzouf.com/i5icDswxbih</a></p><h2 id="附录-线刷与卡刷的区别"><a href="#附录-线刷与卡刷的区别" class="headerlink" title="附录-线刷与卡刷的区别"></a>附录-线刷与卡刷的区别</h2><p>线刷:也叫强刷，无论是对系统升级还是降级，都是通用的。只要有适配的ROM包（一般强刷包都是官方版本，只是地区不同，第三方的强刷包估计是手机停产吧，前几天给老爸的LT30P刷了个第三方，因为大陆行货系统已经停止在4.1.2，强刷了个4.3），加上强刷工具，以及手机50%以上电量。然后一个字一个字的按照教程操作，也是很简单。国内安卓软件市场确实很乱，很多时候如果我们不养成定期备份的习惯，难保哪天安一个软件你通过权限之后手机陷入无限重启或者只亮灯不亮屏幕（前提是已root），这时除了强刷不会有第二条路。线刷会将手机内存里的所有（注意:是所有，不含SD卡）内容全部删光光。等于刷完后你得到一个新的手机……</p><p>卡刷:主要是升级系统。无论是官方还是第三方，个人感觉官方好像只能用官方的升级工具才可以……卡刷的好处在于用户可以随心选择中意的版本以及ROM包含的各种个性化东西，而且新系统不会删掉内存里的音乐电影以及图片。在刷入的过程中你执行双清时会将通讯录软件数据短信这些清除。而且卡刷包都会自带root卡刷包，免去了线刷之后仍然要去费劲去自行root。  </p><p>其实更清晰的解释，线刷是用fastboot，一般都是直接刷镜像，由uboot以直接写入闪存的办法把镜像直接写到闪存对应的位置（或者说分区）。卡刷一般是在recovery里进行的，有直接刷镜像的比如kernel部分，但像system都是挂载system分区后再个别的更新里面的文件（差分或者直接覆盖），而不是像线刷那样把整个system镜像重刷一次。如果是通过打二进制补丁差分更新的话（绝大部分官方ota包的做法），就要求被更新的文件和出厂时一样，否则就会失败，这是ota失败的原因。所以线刷包实际一般就是包含了fastboot程序和各个系统镜像以及一个可执行的脚本的包，用户直接运行那个脚本，脚本调用fastboot来刷。而卡刷包有比较复杂些的目录结构，除了用来更新的文件外，也包括一个可执行文件和脚本，但这两个脚本是给recovery来用的，而不是用户。</p>]]></content>
      
      
      <categories>
          
          <category> 刷机 </category>
          
          <category> magisk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> magisk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dragable添加查询-未完成</title>
      <link href="/2023/04/03/dragable%E6%B7%BB%E5%8A%A0%E6%9F%A5%E8%AF%A2-%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
      <url>/2023/04/03/dragable%E6%B7%BB%E5%8A%A0%E6%9F%A5%E8%AF%A2-%E6%9C%AA%E5%AE%8C%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中dragable中源列表添加查询功能"><a href="#Vue中dragable中源列表添加查询功能" class="headerlink" title="Vue中dragable中源列表添加查询功能"></a>Vue中dragable中源列表添加查询功能</h1><p>想要在前端实现查询功能。   </p><h2 id="功能描述。"><a href="#功能描述。" class="headerlink" title="功能描述。"></a>功能描述。</h2><p>一共两个列表A，B。<br>列表A：所有的站点<br>列表B：该路线需要的站点，以及顺序。<br>通过dragable插件实现了两个列表的数据的转移。<br>目前想要在A中添加一个功能，查询功能。方便在站点很多的时候能够方便的寻找到自己想要的站点。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>现在是在站点A中使用filter功能作为展示的列表，通过computed实现。<br>但是拖拽过去，发现列表A原本应该减少一个的item的，但是实际并没有。还是拖拽前的数量。<br>但是如果查看属性，会发现其实数据是有变化的，但是界面没有。<br>即动画展示的是列表A没有数据减少，但是对应位置的数据是变化了。比如原来A中1被拖走，这个位置的数据就变成2.虽然显示是1.B中显示正常（因为B中没有使用filter）。如果是拖拽有动画但是没有数据的格子，则会有动画的拖拽，但是没有实际数据过去。即B没有数据的变化。<br>同时，如果数据A通过查询即切换filter的查询内容再清空，刷新了列表A，那样列表A中的1可以再次被拖走至列表B。即列表中存在两个列表A中的数据1。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol><li>A中数据与动画不匹配</li><li>A中切换查询，被拖拽走的数据再次出现</li></ol><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><h4 id="问题详细"><a href="#问题详细" class="headerlink" title="问题详细"></a>问题详细</h4><p>我通过界面中显示数据进行验证了下。A中数据会和上面保持一致。但是被移走的1，在表格中重新渲染的时候会立刻消失，但是上方界面中没有消失。<br>怀疑是ref与普通let数据的区别。<br>搜索了下。其实computed里面是直接属性，那样会有缓存。缓存不变，就直接调用。即多次使用，只执行一次。<br>但是如果computed里面是一个方法。通过return 那样不是缓存，就是一个方法。开销比直接方法更大。多次使用，多次执行。<br>computed的响应式是基于原本的组件的改变，值的改变并不会触发，因此。界面中并没有实时匹配。</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>查询返回值需要是响应式的，感觉可以通过watch方案解决———–解决动画不匹配</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><h4 id="问题详细-1"><a href="#问题详细-1" class="headerlink" title="问题详细"></a>问题详细</h4><p>应该是切换了查询条件，由于拖拽的删除并不是删除过滤前的总的信息，导致相同查询条件的可以得到相同的结果。</p><h4 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h4><p>两种方案。</p><ul><li>删除需要对应删除到原来列表———列表B增加的时候，获取当条数据，在A的总数据中，查询并且删除。列表A增加的时候需要增加到对应的数据。</li><li>删除删除不变，修改过滤条件，新增过滤掉B中的内容的条件，但是实现过滤有点复杂。因为过滤的是引用类型。还是需要读取到每个值。同时还有B中内容添加到A中，需要先拖拽到A，得到A，再改变过滤规则，再得到A。两次得到A顺序改变会导致出现两个A1的问题</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>除了上面的方案，应该还可以和后端约定好<br>搜索功能，点击搜索的时候向后端请求内容，前端接收项是响应式的，由于不涉及filter就不会出现删除问题。<br>但是也有问题，那就是如果重复搜索，原来A中的1会多次显示。从列表B转移到A也可能会出现A中有多个相同A1。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终决定，直接不要这个功能了。一劳永逸。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> dragable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dragable </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmware修改默认链接方案</title>
      <link href="/2023/04/03/Vmware%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%93%BE%E6%8E%A5%E6%96%B9%E6%A1%88/"/>
      <url>/2023/04/03/Vmware%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E9%93%BE%E6%8E%A5%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Vmware修改设备默认连接方案"><a href="#Vmware修改设备默认连接方案" class="headerlink" title="Vmware修改设备默认连接方案"></a>Vmware修改设备默认连接方案</h1><p>正常新的设备连接在电脑上，会有提示需要连接在哪一个设备中。<br>但是如果勾选默认之后，那就不会提示。那样如何修改这个默认设置呢？<br>其实就是在虚拟机-可移动设备-选择对应设备-忘记特定连接方案。</p>]]></content>
      
      
      <categories>
          
          <category> Vmaware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vmaware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime浏览器无法跳转</title>
      <link href="/2023/04/03/sublime%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC/"/>
      <url>/2023/04/03/sublime%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="sublime-text-用浏览器打开无法跳转"><a href="#sublime-text-用浏览器打开无法跳转" class="headerlink" title="sublime text 用浏览器打开无法跳转"></a>sublime text 用浏览器打开无法跳转</h1><p>之前一直是open in browser失败。我就有些奇怪。<br>网上冲浪后发现有这么几种可能  </p><ul><li>文件路径中含有中文。——-可惜我的不是  </li><li>html文件的默认打开方式要是浏览器。——这个就是我的问题。<br>我自己当时为了方便的打开html文件，默认的打开模式变成了sublime text。很生气。坑了自己好久<br>记录下这次坑，避免下次踩坑。</li></ul>]]></content>
      
      
      <categories>
          
          <category> sublime text </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-实战学习（二）</title>
      <link href="/2023/03/15/vue-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/15/vue-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="记录做项目中遇见的小的功能的实现方案。"><a href="#记录做项目中遇见的小的功能的实现方案。" class="headerlink" title="记录做项目中遇见的小的功能的实现方案。"></a>记录做项目中遇见的小的功能的实现方案。</h1><h2 id="记录一些属性"><a href="#记录一些属性" class="headerlink" title="记录一些属性"></a>记录一些属性</h2><p>input属性中autocomplete&#x3D;”off”，设置是否有联想输入，就是点击输入框就有历史那种<br>trigger验证时机<br>props或者说是{name等}</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>setup</li><li>beforeCreate</li><li>created</li><li>onBeforeMount</li><li>onMounted</li><li>nextTick<br>父子组件生命周期</li></ol><ul><li>子组件onMounted在父组件之前</li><li>子组件onUpdated在父组件之前</li></ul><h1 id="vue中的事件属性"><a href="#vue中的事件属性" class="headerlink" title="vue中的事件属性"></a>vue中的事件属性</h1><p>vue中有些事件的存在属性可以配置</p><h2 id="比如a标签存在prevent属性"><a href="#比如a标签存在prevent属性" class="headerlink" title="比如a标签存在prevent属性"></a>比如a标签存在prevent属性</h2><pre class="language-markup" data-language="markup"><code class="language-markup">```&lt;@eventNmae.prevent="methodsName">当触发eventName这个事件的时候不会触发这个事件，但是编写的方法继续触发。## 还有一些键盘触发```html</code></pre><p>&lt;@keyup.enter&#x3D;”methodsName”&gt;当按下enter的时候触发的事件。<br>还有一些键盘触发但是比较例外的<br>比如一些系统按键<br>win，ctr，tap<br>这些按键是先执行然后才触发。<br>比如win会先执行弹出开始菜单，但是这个时候的焦点就不在原来绑定的element上了。所以后面的东西就不会触发。<br>所以这类必须绑定在@keydown而不是先做事情</p><blockquote><blockquote><blockquote><blockquote><p>时间线：keydown-&gt;按键系统事件-&gt;keyup</p></blockquote></blockquote></blockquote></blockquote><h2 id="还有stop事件也具有阻止执行的功能。"><a href="#还有stop事件也具有阻止执行的功能。" class="headerlink" title="还有stop事件也具有阻止执行的功能。"></a>还有stop事件也具有阻止执行的功能。</h2><pre class="language-markup" data-language="markup"><code class="language-markup">```## 还有某个事件具有进行事件执行顺序的改变是用于链式执行，比如某个div中都有执行某个方法。里面又套用了一个div```htmlt1><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token attr-name">event2</span><span class="token punctuation">></span></span>&lt;div id="div1" even<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></code></pre><p>在这种情况下默认先执行event2，然后event1<br>但是我想要先event1，然后event2<br>这个时候就可以使用这个属性。<br>原理是</p><blockquote><blockquote><blockquote><blockquote><p>时间线:冒泡，事件执行（从内往外）<br>使用这个属性之后，他就会在冒泡的事件就开始执行了。</p></blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 实战学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实战学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-知错就改(二)</title>
      <link href="/2023/03/15/vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/"/>
      <url>/2023/03/15/vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>ts中(赋值表达式的左侧不能是可选属性访问)</p><h2 id="出错场景"><a href="#出错场景" class="headerlink" title="出错场景"></a>出错场景</h2><p>vscode<br>引入echarts，但是import部分提示上述错误</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> popBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"popbox"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> card <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"card"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>popBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span>card<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter<span class="token operator">=</span><span class="token string">'blur(4px)'</span><span class="token punctuation">;</span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>加一个!，感叹号什么意思呢，它其实是not null 的断言操作符，不执行运行时检查，告诉编译器只需要知道这个东西<br> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> popBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"popbox"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> card <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"card"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>popBox<span class="token operator">!</span><span class="token punctuation">.</span>style<span class="token operator">!</span><span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span>card<span class="token operator">!</span><span class="token punctuation">.</span>style<span class="token operator">!</span><span class="token punctuation">.</span>filter<span class="token operator">=</span><span class="token string">'blur(4px)'</span><span class="token punctuation">;</span></code></pre></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能为null等,ts对于类型与空检查比较严格。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-get与post-实战学习</title>
      <link href="/2023/03/15/vue-get%E4%B8%8Epost-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/15/vue-get%E4%B8%8Epost-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>get请求一般是去取获取数据（其实也可以提交，但常见的是获取数据）；<br>post请求一般是去提交数据。</p></li><li><p>get因为参数会放在url中，所以隐私性，安全性较差，请求的数据长度是有限制的，<br>不同的浏览器和服务器不同，一般限制在 2~8K 之间，更加常见的是 1k 以内；<br>post请求是没有的长度限制，请求数据是放在body中；</p></li><li><p>get请求刷新服务器或者回退没有影响，post请求回退时会重新提交数据请求。</p></li><li><p>get请求可以被缓存，post请求不会被缓存。</p></li><li><p>get请求会被保存在浏览器历史记录当中，post不会。get请求可以被收藏为书签，因为参数就是url中，但post不能。它的参数不在url中。</p></li><li><p>get请求只能进行url编码（appliacation-x-www-form-urlencoded）,post请求支持多种（multipart&#x2F;form-data等）。</p></li></ol><p>深入理解</p><ol><li><p>GET 和 POST都是http请求方式， 底层都是 TCP&#x2F;IP协议；通常GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包（但firefox是发送一个数据包），</p></li><li><p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200<br>（返回数据）表示成功；</p></li><li><p>而对于 POST，浏览器先发送 header，服务器响应 100， 浏览器再继续发送 data，服<br>务器响应 200 （返回数据）。</p><a herf="https://blog.csdn.net/qq_42931285/article/details/119852294" title="参考文献"/></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 实战学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实战学习 </tag>
            
            <tag> post </tag>
            
            <tag> get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-ref与reactive-实战学习</title>
      <link href="/2023/03/15/vue-ref%E4%B8%8Ereactive-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/15/vue-ref%E4%B8%8Ereactive-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于ref与reactive"><a href="#关于ref与reactive" class="headerlink" title="关于ref与reactive"></a>关于ref与reactive</h1><p>这两种都需要有一定的认识。<br>ref是reactive更高级的表示。<br>在实际运用中，ref的数据的值的改变会立即反映在界面上。<br>reactive不能够立刻显示。<br>但是好像我在使用ref遇见报错，{}属性不能为空。<br>但是在使用reactive的时候这个报错不会出现。<br>但是这个报错也可以强行忽略掉（网上查找，问题应该就是初始化的问题，不能保证数据的存在类型与内容。）<br>忽略的方式如下，本质应该是忽略检查。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//tsconfig.json中的compilerOptions添加一项</span><span class="token string-property property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 实战学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实战学习 </tag>
            
            <tag> ref与reactive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-接口测试-实战学习</title>
      <link href="/2023/03/15/vue-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/03/15/vue-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于post与get接口如何测试"><a href="#关于post与get接口如何测试" class="headerlink" title="关于post与get接口如何测试"></a>关于post与get接口如何测试</h1><p>后端的接口测试可以通过postman，但是postman并不能对于前端的接口进行测试。<br>但是我从网上找到有这个工具。json-server。<br>需要注意的是，这个工具会劫持自己发送给别的端口的内容。因此，如果不再使用，请及时卸载相关组件。<br>安装json-server.  </p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install json-server -g</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 实战学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实战学习 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-入门学习（二）</title>
      <link href="/2023/03/15/vue-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/03/15/vue-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-入门学习（二）"><a href="#Vue3-入门学习（二）" class="headerlink" title="Vue3 入门学习（二）"></a>Vue3 入门学习（二）</h1><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>Vue应用根据createApp函数创建应用实例。<br>自我理解：一个应用实例类似css文件。可以在一个页面中仅仅使用一个，也可以在一个html中使用多个分别控制不同的位置。</p><h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><p>传入createApp的对象是根组件。<br>其他组件将成为根组件的子组件</p><h2 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h2><p>应用实例的渲染需要调用.mount()方法。这个方法是接收一个“容器”参数。<br>“容器”参数可以是一个实际的DOM元素或者一个CSS、选择器字符串。</p><h2 id="index-html-App-vue"><a href="#index-html-App-vue" class="headerlink" title="index.html+App.vue"></a>index.html+App.vue</h2><p>这是程序的入口，很有意思的一点就在于。通常只是用来加载固定结构。<br>例如路由设置就需要在index.html中加载。<br>模板固定好加载App.vue。因此App.vue可以理解成所有页面的页面母版。<br>因为使用SFC技术（Single File Component），所以都是在同一个页面中的变化。<br>“&#x2F;“这个路径就是将home与App.vue叠加。所有.vue文件都是叠加的。<br>因此App.vue需要保留<router-view />,这样”&#x2F;“的才会显示在上面。<br><em>我一定要吐槽的，在index.html中有import ‘.&#x2F;assets&#x2F;main.css’这样的话，可以注释或者删除掉，这个是为了正常显示实例，让它居中并且显示在固定位置。</em></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 入门课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 入门课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-入门学习（一）</title>
      <link href="/2023/03/15/vue-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/15/vue-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="vue前端从零构建（一）"><a href="#vue前端从零构建（一）" class="headerlink" title="vue前端从零构建（一）"></a>vue前端从零构建（一）</h1><h2 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h2><p>安装node.js 14.16.0<br>idea</p><h2 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h2><p>vue官方链接<a herf="https://cn.vuejs.org/guide/scaling-up/tooling.html#project-scaffolding" title="vue前端从零构建（一）">VUE</a><br>其中VUE已经更新到版本3，目前的项目的脚手架工具是Vite，原来毕设中提供的是Vue CLI:目前处于维护过程中。<br>VUE3 基础要求node.js&gt;16.0</p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><p>安装命令<code>npm init vue@latest</code></p><h3 id="开始创建-1"><a href="#开始创建-1" class="headerlink" title="开始创建"></a>开始创建</h3><ol><li>下载Node.js安装网址<a herf="http://nodejs.cn/download/">Node.js下载安装</a>，版本检查<code>node --version</code></li><li>切换淘宝镜像 <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</code></pre></li><li>安装脚手架工具<pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm init vue@latest</code></pre></li><li>自动安装Vue项目脚手架工具<code>npm init vue@latest</code>这个时候就开始创建Vue项目，需要你输入项目的名称。选择一些环境。</li><li>运行项目<pre class="language-cmd" data-language="cmd"><code class="language-cmd">cd &lt;your-project-name&gt;npm installnpm run dev</code></pre></li><li>发布到生产环境 <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm run build</code></pre></li></ol><h3 id="创建出来的项目简单介绍。"><a href="#创建出来的项目简单介绍。" class="headerlink" title="创建出来的项目简单介绍。"></a>创建出来的项目简单介绍。</h3><ul><li>public：存放静态的文件</li><li>src：存放一些组件<ul><li>asset：存放log</li><li>components：存放组件</li><li>router：路由文件</li><li>view：页面存放</li></ul></li></ul><h3 id="安装element-UI"><a href="#安装element-UI" class="headerlink" title="安装element UI"></a>安装element UI</h3><p>此处使用element plus即element3<br>安装步骤。  </p><ol><li>安装element plus—npm install element-plus –save   <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install element-plus --save</code></pre></li><li>按需安装———–npm install -D unplugin-vue-components unplugin-auto-import   <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install -D unplugin-vue-components unplugin-auto-import</code></pre></li><li>配置按需安装的环境<br>vite.config中的配置. <pre class="language-none"><code class="language-none"> &#x2F;&#x2F;vite.config.js额外添加import AutoImport from &#39;unplugin-auto-import&#x2F;vite&#39;import Components from &#39;unplugin-vue-components&#x2F;vite&#39;import &#123; ElementPlusResolver &#125; from &#39;unplugin-vue-components&#x2F;resolvers&#39; export default defineConfig(&#123;  &#x2F;&#x2F; ...  plugins: [    &#x2F;&#x2F; ...    AutoImport(&#123;      resolvers: [ElementPlusResolver()],    &#125;),    Components(&#123;      resolvers: [ElementPlusResolver()],    &#125;),  ],&#125;)</code></pre></li></ol><h3 id="安装element-x2F-icons"><a href="#安装element-x2F-icons" class="headerlink" title="安装element&#x2F;icons"></a>安装element&#x2F;icons</h3><p>有的element样式需要icons。这个目前是需要另外下载。此处展示了如何下载并且按需安装。与上文得按需安装相对应。<br><a herf="https://blog.csdn.net/weixin_55323831/article/details/127055896" title="参考文章">参考文章</a></p><ol><li>安装。&#x2F;&#x2F;cd到项目目录中 <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install element-plus --savenpm install -D unplugin-vue-components unplugin-auto-import </code></pre></li><li>配置相关的参数。<br>cd到项目目录中 <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install @element-plus&#x2F;icons-vue</code></pre> &#x2F;&#x2F;安装后无法使用，继续安装以下插件<pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm i  unplugin-icons -D</code></pre> 配制文件参数：vite.config.ts配置  <pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath<span class="token punctuation">,</span> <span class="token constant">URL</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'node:url'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">'unplugin-auto-import/vite'</span><span class="token keyword">import</span> Components <span class="token keyword">from</span> <span class="token string">'unplugin-vue-components/vite'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElementPlusResolver <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'unplugin-vue-components/resolvers'</span><span class="token comment">// icon</span><span class="token keyword">import</span> Icons <span class="token keyword">from</span> <span class="token string">'unplugin-icons/vite'</span><span class="token keyword">import</span> IconsResolver <span class="token keyword">from</span> <span class="token string">'unplugin-icons/resolver'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      resolvers<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 自动导入图标组件</span>            <span class="token function">IconsResolver</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          prefix<span class="token operator">:</span> <span class="token string">'Icon'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Components</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      resolvers<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 自动注册图标组件</span>        <span class="token function">IconsResolver</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          enabledCollections<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'ep'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">,</span> <span class="token function">ElementPlusResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Icons</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      autoInstall<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  server<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token comment">// ip</span>    port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>      hmr<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 热启动</span>    open<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 自动打开浏览器</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">'./src'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre> 在env.d.ts中添加一行   <pre class="language-cmd" data-language="cmd"><code class="language-cmd">declare module &quot;element-plus&quot;;</code></pre> 在main.ts中添加对应的style的引用  <pre class="language-cmd" data-language="cmd"><code class="language-cmd">import &#39;..&#x2F;..&#x2F;node_modules&#x2F;element-plus&#x2F;es&#x2F;components&#x2F;message-box&#x2F;style&#39;import &#39;..&#x2F;..&#x2F;node_modules&#x2F;element-plus&#x2F;es&#x2F;components&#x2F;message&#x2F;style&#39;</code></pre></li></ol><h3 id="request与get请求"><a href="#request与get请求" class="headerlink" title="request与get请求"></a>request与get请求</h3><p>这个部分我先选择使用axios来进行request与get请求的实现。<br>选择axios的好处是方便实现ajxs的使用即部分界面内容的数据更新。  </p><ol><li>安装axios<br>cd到项目目录中   <pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install axios</code></pre></li></ol><h3 id="安装预处理器-scss"><a href="#安装预处理器-scss" class="headerlink" title="安装预处理器-scss"></a>安装预处理器-scss</h3><p> 有的时候看到有许多的程序中存在lang&#x3D;”less”||lang&#x3D;”sass”这种写法。<br> 自己然后去了解，发现这是一种预处理器的方法，其实就是css语法的补充。<br> 给css多了一种表达的方案。  </p><blockquote><blockquote><p>less与sass也是有一定的区别</p></blockquote></blockquote><ol><li>Less环境较Sass简单</li><li>Less使用较Sass简单</li><li>从功能出发，Sass较Less略强大一些</li><li>Less与Sass处理机制不一样（前者是通过客户端处理的，后者是通过服务端处理，相比较之下前者解析会比后者慢一点）</li><li>关于变量在Less和Sass中的唯一区别就是Less用@，Sass用$。 <pre class="language-none"><code class="language-none">- ①sass有变量和作用域。  - $variable，like php；  - #｛$variable｝like ruby；  - 变量有全局和局部之分，并且有优先级。      ②sass有函数的概念；  - @function和@return以及函数参数（还有不定参）可以让你像js开发那样封装你想要的逻辑。  -@mixin类似function但缺少像function的编程逻辑，更多的是提高css代码段的复用性和模块化，这个用的人也是最多的。  -ruby提供了非常丰富的内置原生api。    ③进程控制：  -条件：@if @else；  -循环遍历：@for @each @while  -继承：@extend  -引用：@import    ④数据结构：  -$list类型&#x3D;数组；  -$map类型&#x3D;object； 其余的也有string、number、function等类型</code></pre></li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p> 有相关的博客链接如下<br> <a href="https://2508838014.github.io/2023/04/03/vue-an-zhuang-scss/">scss安装-作者我自己啊</a></p><ol><li>下载相关包<pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install node-sass --save --devnpm install sass-loader --save --devnpm install style-loader --save --dev</code></pre></li><li>真的搞我<br>lang&#x3D;”sass”已经是过去式了。现在最新的已经改成lang&#x3D;”scss”.<br>如果是使用之前的会直接报错。<br>不仅如此，我用这个是为了解决页面没有100%高度的。最后我的解决方案是在App.vue中添加样式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 入门课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 入门课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github插件安装失败-知错就改</title>
      <link href="/2023/03/13/github%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/"/>
      <url>/2023/03/13/github%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>问题；安装插件失败  </p><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>Visual Studio 2019安装github的插件失败。<br>当时是想要安装一个github的插件。但是一直安装失败。长时间卡住，最后会报告一个初始化失败。  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>没有安装安装拓展的插件，应该就是安装榜的第二名。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装插件还需要安装插件的拓展。</p>]]></content>
      
      
      <categories>
          
          <category> 插件安装 </category>
          
          <category> 平时学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> 插件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-反直觉的苹果</title>
      <link href="/2023/03/13/%E6%97%A5%E8%AE%B0-%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E8%8B%B9%E6%9E%9C/"/>
      <url>/2023/03/13/%E6%97%A5%E8%AE%B0-%E5%8F%8D%E7%9B%B4%E8%A7%89%E7%9A%84%E8%8B%B9%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>理科就是有很多很有意思的地方，数据不会说谎，但是直觉会。<br>一个很有意思的反直觉案例：<br>一个苹果干物质占比10%，湿物质占比90%。<br>经过一段时间后，湿物质蒸发至苹果80%，干物质质量不变。<br>请问现在的苹果的质量相较于原来的苹果减少了多少。<br>实际上现在的苹果只有原来的苹果的50%<br>看着只是一点的差距，但是数据上却是天差地别。  </p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-设置menu高亮</title>
      <link href="/2023/03/13/Vue-%E8%AE%BE%E7%BD%AEmenu%E9%AB%98%E4%BA%AE/"/>
      <url>/2023/03/13/Vue-%E8%AE%BE%E7%BD%AEmenu%E9%AB%98%E4%BA%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="设置menu的高亮显示"><a href="#设置menu的高亮显示" class="headerlink" title="设置menu的高亮显示"></a>设置menu的高亮显示</h1><p>之前总是对于高亮显示的内容不太对。<br>现在我调整了下。<br>关键点在于两点。  </p><ol><li>defaul-active动态绑定</li><li>index与name相互绑定。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="language-markup" data-language="markup"><code class="language-markup">    &lt;el-menu      active-text-color="#ffd04b"      background-color="#004b8c"      class="el-menu-vertical-demo"      text-color="#fff"      @open="handleOpen"      @close="handleClose"      //关键部分      :default-active="$route.name"    >      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-sub-menu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#title</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-icon</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-icon</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>流程管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        //关键部分          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name: 'PlcInfo'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>PlcInfo<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>工艺流程编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-sub-menu</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span></code></pre><h2 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h2><p>  实际上就是default-active是高亮显示的内容，可以理解成为default-active为对象A，A&#x3D;对象B。<br>  对象B是自定义内容，item中可以设置index为对象C。现在点击跳转了页面，即对象B改变。对象C是对象B的name部分。<br>  现在对象A动态绑定的路由，发现页面跳转，获取了新的name。然后发现name与对象C相同，于是将对象C高亮  </p>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> menu </tag>
            
            <tag> element plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIP通讯</title>
      <link href="/2023/03/13/CIP%E9%80%9A%E8%AE%AF/"/>
      <url>/2023/03/13/CIP%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="CIP通讯个人学习总结"><a href="#CIP通讯个人学习总结" class="headerlink" title="CIP通讯个人学习总结"></a>CIP通讯个人学习总结</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>CIP：点对点面向对象协议，处于应用层中。<br>它可以通过使用三种上层网络协议。  </p><ul><li>DeviceNet</li><li>ControlNet</li><li>EtherNet&#x2F;IP</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>CIP协议的目的是连接PLC，开发PLC通讯组件。</p><h3 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h3><ul><li>工业的对象的标注定义</li><li>实现通信</li></ul><h2 id="报文类型"><a href="#报文类型" class="headerlink" title="报文类型"></a>报文类型</h2><ul><li>隐式报文<br>隐式报文使用生产者&#x2F;消费者（支持多播）主要用于传输实时性要求较高的数据，例如I&#x2F;O报文<br>都是已连接<br>通讯类型I&#x2F;O数据交换  </li><li>显式报文<br>源&#x2F;目的地 同时Profibus也是源&#x2F;目的地（不支持多播，利用IP指定某一个对象）<br>显式报文又可以分为已连接传输与未连接传输<br>通讯类型 请求&#x2F;响应 交换</li></ul><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><ul><li>公开的</li><li>供货商指定的</li><li>对象指定的</li></ul><h2 id="连接对象"><a href="#连接对象" class="headerlink" title="连接对象"></a>连接对象</h2><ul><li>通过连接对象创建连接</li><li>通过连接管理器对象创建链接</li></ul><h3 id="通过连接对象创建连接"><a href="#通过连接对象创建连接" class="headerlink" title="通过连接对象创建连接"></a>通过连接对象创建连接</h3><p>当⼦⽹定义通过Connection Object创建连接时，CIP设备应⽀持该类的Create服务。 Create 服务使⽤类定<br>义的默认属性值实例化连接实例。连接实例是通过对每个连接实例属性的单独访问来配置的。需要单独的服务<br>请求（Apply_Attributes，服务代码 0x0D）将连接转换为 Established 状态。  </p><h3 id="通过连接管理器对象创建链接"><a href="#通过连接管理器对象创建链接" class="headerlink" title="通过连接管理器对象创建链接"></a>通过连接管理器对象创建链接</h3><p>当⼦⽹定义通过Connection Manager Object创建连接时，CIP设备应⽀持该类的Forward Open服务。成功时，<br>Connection Manager 实例化 Connection 类的⼀个实例。此连接实例配置有在 Forward Open 服务中发送的<br>值，并转换为已建⽴状态。此单个 CIP 服务请求在内部建模为单个连接类服务请求（使⽤创建服务）和多个内部服务<br>请求（使⽤ Set_Attribute_Single 和 Apply_Attributes 服务）。⽀持通过连接管理器创建连接的设备可能会也<br>可能不会提供对连接类实例的外部可⻅性。  </p><h2 id="报文格式（应该是与欧姆龙通讯的格式）"><a href="#报文格式（应该是与欧姆龙通讯的格式）" class="headerlink" title="报文格式（应该是与欧姆龙通讯的格式）"></a>报文格式（应该是与欧姆龙通讯的格式）</h2><p>通讯首先是</p><ol><li>注册信息</li><li>（optional）fordword_open&#x2F;forword_large_open</li><li>相关通讯</li><li>(optional) forword_close</li><li>解除注册</li></ol><p><a href="https://www.cnblogs.com/ChuFeiFan/p/10868241.html" title="参考">参考资料1-c#基于TCP&#x2F;IP、CIP协议的欧姆龙PLC通信<br></a>&gt;</br><br><a href="https://blog.csdn.net/weixin_43988842/article/details/113822291" title="参考">参考资料2-工控协议（三）：CIP (基于EtherNet&#x2F;IP) 学习笔记<br></a>&gt;</br><br>Header+CommandSpecificData+CIP消息<br>Ethernet&#x2F;IP 是一个应用层标准，它将网络中的所有设备都视为一系列的对<br>象。<br>在应用层，CIP 按照对象来封装数据，包括 3 类对象：<br>通用对象：连接对象、报文路由对象、身份对象。<br>网络特定对象：TCP&#x2F;IP 接口对象、ControlNet 接口对象、DeviceNet 接口对象。<br>应用对象：和具体的应用和设备相关，比如有 AD&#x2F;DC 变频器、离散量、模拟量 I&#x2F;O 对象等。<br>其中寻找地址中比较重要的有四个属性  </p><ul><li>设备（MAC id）</li><li>class id</li><li>instance id</li><li>attrbute id&#x2F;ServiceID<br>类ID分为两个部分，公共对象（范围：0x0000–0x0063, 0x00F0–0x02FF），厂家自定义对象（范围：0x0064–0x00C7, 0X0300-0X04FF）。其它范围为预留部分。<br>实例ID也分为两个部分，公共实例（范围：0x0001–0x0063,0x00C8-0x02FF），厂家自定义实例（范围：0x0064-0xxC7,0x0300-0x04FF）。其它范围为预留部分。<br>属性ID,公共属性（范围：0x0000–0x0063，0x0100–0x02FF，0x0500–0x08FF），厂家自定义属性（范围：0x0064–0x00C7，0x0300–0x04FF，0x000–0x0CFF）<br>class可以理解成为某一类：human<br>instance实例，就是某一个体：老王<br>attribute可以理解成为对外暴露的属性。:age,name<br>多字节整数部分采用小端传输，标准Internet网络协议是big-endian</li></ul>]]></content>
      
      
      <categories>
          
          <category> CIP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础学习 </tag>
            
            <tag> CIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-路由跳转-问题解决</title>
      <link href="/2023/03/13/Vue-%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2023/03/13/Vue-%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>问题；本来正确的路由，突然不能跳转，发出报错</p><pre class="language-none"><code class="language-none">core.ts:40 Uncaught ReferenceError: process is not defined at node_modules&#x2F;@......</code></pre><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>正常调试Vue</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决方案：增加配置</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;vite.config.jsonexport default defineConfig(&#123;  &#x2F;&#x2F; ...  define: &#123;    &#39;process.env&#39;: process.env  &#125;&#125;)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这为什么还有问题？</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 平时学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 工作问题 </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-字典取值</title>
      <link href="/2023/03/13/C-%E5%AD%97%E5%85%B8%E5%8F%96%E5%80%BC/"/>
      <url>/2023/03/13/C-%E5%AD%97%E5%85%B8%E5%8F%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="已知字典是键值对的方式存储。如何取出相对应的值。"><a href="#已知字典是键值对的方式存储。如何取出相对应的值。" class="headerlink" title="已知字典是键值对的方式存储。如何取出相对应的值。"></a>已知字典是键值对的方式存储。如何取出相对应的值。</h1><p>目前看到两种方案。</p><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>Dictionary.tryGetValue(key,out value);<br>这种方案的好处是，如果得不到对应的值，会直接返回false  </p><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>Diationary[key]<br>这个方案，就很直白，取出对应的值。但是问题在于不知道key一定存在<br>如果不存在，直接会抛出异常。  </p>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-深入人心的句子</title>
      <link href="/2023/03/12/%E6%97%A5%E8%AE%B0-%E6%B7%B1%E5%85%A5%E4%BA%BA%E5%BF%83%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
      <url>/2023/03/12/%E6%97%A5%E8%AE%B0-%E6%B7%B1%E5%85%A5%E4%BA%BA%E5%BF%83%E7%9A%84%E5%8F%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>日记-总会有些句子感动人心。<br>看了有些话，感觉不过几句话，直穿人心。想了下自己为什么会感动。因为自己曾经经历过。目前也依旧爱着这个世界，认同着这个世界。对感情更深刻。<br>人真的贱啊，印象最深的永远是悲剧，但是最喜欢的却是喜剧。悲剧感动人心，都是自己经历的事情，或者说是即将或者曾经接近经历的故事。<br>喜欢的感受迫切的一段话：<br>谢谢大家对爸爸的关心，我代表爸爸谢谢大家。<br>很开心地告诉大家，后续是爸爸身体康复了！他正儿八经地带我成长，给我做各种好吃的、带我写日记、带我练字画画、给我出各种抠头的益智题、和我一起养小猫咪；他也会幼稚地和我三两天唇枪舌战、龙虎相争，把家里搞得鸡飞狗跳。<br>希望故事到这里就结束了，希望大家看到这里就结束了。<br>可惜的是，后续不等于结局，很无奈，人生充斥了太多意外。<br>我其实很不想回复，因为在现实生活中我逃避伪装惯了，我从来没有向外界叙述过父亲的结局，这样大家便会以为我的父亲是进行式而不是过去式。<br>原来即使网络上匿了名，我依旧没有勇气坦然地说出爸爸最终的结果，我依旧我不想面对不想承认。  </p><blockquote><blockquote><p>我从来不说那个字，这样爸爸就一直存在。<br>大家的回复我都有认真看，希望所有人健康快乐每一天。<br>开心的地方或许就是我的爸爸还在，还陪伴着我的家人。  </p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-小孩子与成年人</title>
      <link href="/2023/03/12/%E6%97%A5%E8%AE%B0-%E5%B0%8F%E5%AD%A9%E5%AD%90%E4%B8%8E%E6%88%90%E5%B9%B4%E4%BA%BA/"/>
      <url>/2023/03/12/%E6%97%A5%E8%AE%B0-%E5%B0%8F%E5%AD%A9%E5%AD%90%E4%B8%8E%E6%88%90%E5%B9%B4%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="日记感悟"><a href="#日记感悟" class="headerlink" title="日记感悟"></a>日记感悟</h1><h2 id="小孩子与成年人"><a href="#小孩子与成年人" class="headerlink" title="小孩子与成年人"></a>小孩子与成年人</h2><p>小孩子更多的，言必行。<br>这一点很大程度是因为教育小孩子的时候我们都是期望小孩子立刻做出反应（比如，让小孩子叫妈妈，期望小孩子立刻叫妈妈）<br>，这就养成了小孩子的言必行的习惯。我称之为言必行。小孩子的善恶没有那么清晰，他们的世界更多的是情感的冲动与本能的反馈。<br>  即使在现在，我也还记得我小的时候有做过一个梦，梦里的内容大概是我从楼上顺着墙壁跑了下去，仿佛墙壁是倾斜的。我当时真的有站在板凳上打开窗户，从书房的窗户往下望，想要尝试跑下去。但是楼坡度似乎太高了，想了下感觉好像跑不了，放弃了奔跑。但是这个冲动一直保留在我的心里，在此之后我又有多次往下望，期待着楼倾斜一点，我就可以很cool的跑下去了。现在想想很不可思议。自己真跑下去就没有现在的我了。当死约束我的并不是世俗的情感教条，更多的是本能的冲动与理智。<br>  小孩子想到一出就是一出，它们真真正正的会立刻去实现，不像成年人因为疲惫等原因拖延，去放弃。<br>  当成年人对小孩子做出承诺的时候，小孩子就会相信了，因为它们的世界就是这样的。所有的话终将应验，所有的事情都尝试去完成，不可以不去做出。失败能够接受，成功也可以相信。但是不去做是他们想不明白的。成年人那么强大，它们完成这个不是很简单吗，怎么不去完成呢？况且小孩子做出了付出，努力却得不到回报，这更加深了小孩子的困惑，乃至委屈。这是另一种世界观与自己的世界观的碰撞。碰撞产生思考，思考让人成熟。剧烈的碰撞也会损坏小孩子的价值判断。它们原本的思考能力不足，只能想到，父母是坏人，想不到父母也有自己的苦衷，这个苦衷是年幼的它们所缺失的信息。没有信息就考虑不到这一层次。坏人的结论也合情合理，它们有了判断就会去做，是实践，真的是坏人，我该怎么去应对。所以成年人教育小孩的时候要经常引导小孩去记忆，去思考。有了记忆之后才能够思考。思考的多了，之后才可以思考更深的层次。  </p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-全屏显示</title>
      <link href="/2023/03/12/Form%E6%93%8D%E4%BD%9C-%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/"/>
      <url>/2023/03/12/Form%E6%93%8D%E4%BD%9C-%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="winform全屏显示"><a href="#winform全屏显示" class="headerlink" title="winform全屏显示"></a>winform全屏显示</h1><p>本来觉得很简单，但是实际好像每那么容易  </p><h2 id="原本winform状态。"><a href="#原本winform状态。" class="headerlink" title="原本winform状态。"></a>原本winform状态。</h2><p>mainForm中包含一个panel用于页面切换。<br>panel.controls.add(homeForm)<br>panel.controls.add(editForm)<br>homeform与editform都具有图片  </p><h2 id="实现方案。"><a href="#实现方案。" class="headerlink" title="实现方案。"></a>实现方案。</h2><h3 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h3><ol><li>创建公共变量Form frm</li><li>设置frm&#x3D;new homeform(),</li><li>设置frm.size与panel的size相同.这样保证即便切换页面后内部的页面与panel大小一直一致。</li><li>设置frm.size与panel_rasize绑定，即panel的size变化与frm.size相关联。<br>设置homeForm的属性：</li></ol><h3 id="代码呈现"><a href="#代码呈现" class="headerlink" title="代码呈现"></a>代码呈现</h3><p>MainForm</p><pre class="language-C#" data-language="C#"><code class="language-C#">Form frm;System.Drawing.Size frmSize;private void panell_Rasize(object sender, EventArgs e)&#123;    if (frm !&#x3D; null)    &#123;        frm.Size &#x3D; this.mainPanel.Size;        frmSize &#x3D; frm.Size;    &#125;&#125;private void button1ToolStripMenuItem_Click(object sender, EventArgs e)&#123;    mainPanel.Controls.Clear();    &#x2F;&#x2F;HomeForm homeForm &#x3D; new HomeForm(plc);    &#x2F;&#x2F;homeForm.Location &#x3D; new Point(0, 0);    &#x2F;&#x2F;homeForm.Show();    &#x2F;&#x2F;homeForm.TopLevel &#x3D; false;    &#x2F;&#x2F;mainPanel.Controls.Add(homeForm);    mainPanel.BackColor &#x3D; Color.Red;    frm &#x3D; new HomeForm(plc);    frm.Size &#x3D; frmSize;    frm.Location &#x3D; new Point(0, 0);    frm.Show();    frm.TopLevel &#x3D; false;    mainPanel.Controls.Add(frm);    this.mainPanel.Resize +&#x3D; new EventHandler(panell_Rasize);&#125;</code></pre><p>HomeForm</p><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;属性页&#x2F;&#x2F;这个属性的设置是因为似乎因为图片的原因，导致在显示的时候缩放不一样。&#x2F;&#x2F;即panel.size&#x3D;&#x3D;homeForm.size但是home.size并不能显示完全。homeForm.AutoScaleModel&#x3D;DpiwindowsState&#x3D;MaximizedstartPosition&#x3D;centerScreen&#x2F;&#x2F;确保form中每个控件的anchor都是下面&#x2F;&#x2F;这个属性类似css中的top。bottom等如果同时有上下会拉长，这一点不太一样。anchor&#x3D;None</code></pre>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作技巧 </tag>
            
            <tag> Form操作 </tag>
            
            <tag> 全屏显示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-切换页面</title>
      <link href="/2023/03/12/Form%E6%93%8D%E4%BD%9C-%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2/"/>
      <url>/2023/03/12/Form%E6%93%8D%E4%BD%9C-%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="WInform切换页面"><a href="#WInform切换页面" class="headerlink" title="WInform切换页面"></a>WInform切换页面</h1><ol><li>首先有一个主界面mainForm</li><li>设置一个Panel：mainPanel</li><li>创建新的form：form1</li><li>form1的属性FormBorderStyle设置为None，</li><li>form1的属性Size设置与panel1的size相同<pre class="language-C#" data-language="C#"><code class="language-C#">mainPanel.Controls.Clear();form1Form wiEditForm &#x3D; new form1Form();wiEditForm.Show();wiEditForm.Location &#x3D; new Point(0, 0);wiEditForm.TopLevel &#x3D; false;mainPanel.Controls.Add(wiEditForm);</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作技巧 </tag>
            
            <tag> Form操作 </tag>
            
            <tag> 切换页面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-知错就改（一）</title>
      <link href="/2023/03/12/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/12/Vue-%E7%9F%A5%E9%94%99%E5%B0%B1%E6%94%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Vue知错就改-2</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在同时启用了 “preserveValueImports” 和 “isolatedModules” 时，必须使用仅类型导入进行导入。ts(1444)</p><h2 id="出错场景"><a href="#出错场景" class="headerlink" title="出错场景"></a>出错场景</h2><p>vscode<br>引入echarts，但是import部分提示上述错误</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> ECharts<span class="token punctuation">,</span> EChartsOption<span class="token punctuation">,</span>init<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token punctuation">;</span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p> 类型和值放在一个ts文件中，在vite 中会提示错误.<br> 所以将类型与值分开。<br> <pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token punctuation">;</span><span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> ECharts<span class="token punctuation">,</span> EChartsOption<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token punctuation">;</span></code></pre></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网上直接复制的坑</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 知错就改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 知错就改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器-内网穿透等</title>
      <link href="/2023/03/12/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AD%89/"/>
      <url>/2023/03/12/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透实现远程登陆"><a href="#内网穿透实现远程登陆" class="headerlink" title="内网穿透实现远程登陆"></a>内网穿透实现远程登陆</h1><p>远程登录，windows其实只需要电脑的IP与电脑设置的登陆账号密码。<br>最大的问题其实就是IP在由于IPV4资源的紧张，很少能够拿到一个固定的IP。大部分的IP其实都是一个内网IP，没有一个公网IP。公网IP似乎可以通过申请得到（动态的，需要经常解析）。但是其实还是可以做一个内网穿透来实现差不多的功能。<br>从晚上找到的内网穿透的方案。Sakura frp.登陆注册，远程端口3389.<br><a herf="https://zhuanlan.zhihu.com/p/115826053" title="内网穿透">参考文章</a><br><a herf="https://zhuanlan.zhihu.com/p/63661477" title="内网穿透">参考文章2</a><br></br><br>这篇文章使用的软件是cpolar，(可能需要配置环境路径，看评论区，最新版是不需要了。)  </p>]]></content>
      
      
      <categories>
          
          <category> 内网穿透 </category>
          
          <category> 远程登陆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> 远程登陆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-彩礼</title>
      <link href="/2023/03/12/%E6%97%A5%E8%AE%B0-%E5%BD%A9%E7%A4%BC/"/>
      <url>/2023/03/12/%E6%97%A5%E8%AE%B0-%E5%BD%A9%E7%A4%BC/</url>
      
        <content type="html"><![CDATA[<p>段子：</p><ol><li>已知上海富豪赚国内外的钱→江西妹妹赚上海富豪的钱→亲戚再吸她血→然后去大城市买房买车大消费→最后振兴了整个江西省经济。论发展速度，这种模式比起济南深圳的生育政策快多了。搞成功了形成经济内循环，也就是先富带动后富，最后实现共同富裕。</li><li>foo &#x3D;&#x3D;bar ? foo : bar(如果和老婆意见相同听我的，如果不同，听老婆的)</li><li>鸭嘴兽既可以产蛋，又可以产奶，是为数不多可以依靠自己制作蛋挞的生物。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-基础组件-实战学习（一）</title>
      <link href="/2023/03/12/Vue-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/12/Vue-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6-%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue实战学习（一）"><a href="#Vue实战学习（一）" class="headerlink" title="Vue实战学习（一）"></a>Vue实战学习（一）</h1><p>有一些经常用的数据格式</p><h2 id="创建空列表"><a href="#创建空列表" class="headerlink" title="创建空列表"></a>创建空列表</h2><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> plcTable<span class="token operator">:</span>plcInfos<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">plcInfos</span><span class="token punctuation">&#123;</span>    plcId<span class="token operator">:</span><span class="token builtin">string</span>    name<span class="token operator">:</span><span class="token builtin">string</span>    info<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二次确认弹窗"><a href="#二次确认弹窗" class="headerlink" title="二次确认弹窗"></a>二次确认弹窗</h2><pre class="language-typescript" data-language="typescript"><code class="language-typescript">ElMessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>    <span class="token string">'This routing will be deleted'</span><span class="token punctuation">,</span>    <span class="token string">'Warning'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        confirmButtonText<span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>        cancelButtonText<span class="token operator">:</span> <span class="token string">'Cancel'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">//若确认，执行的内容</span><span class="token comment">//。。。。。。</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">//若取消，执行的内容</span>        <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> <span class="token string">'Delete canceled'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><pre class="language-typescript" data-language="typescript"><code class="language-typescript">request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/Login/CheckLoginUsers"</span><span class="token punctuation">,</span> row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        resInfo <span class="token operator">=</span> res<span class="token punctuation">.</span>data        <span class="token keyword">if</span> <span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                message<span class="token operator">:</span> <span class="token string">'Delect succeeded.'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            tableData <span class="token operator">=</span> resInfo<span class="token punctuation">.</span>content        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>resInfo<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'please check the network, etc.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="form表单确认"><a href="#form表单确认" class="headerlink" title="form表单确认"></a>form表单确认</h2><h3 id="form-内容以及对应按键"><a href="#form-内容以及对应按键" class="headerlink" title="form 内容以及对应按键"></a>form 内容以及对应按键</h3><pre class="language-markup" data-language="markup"><code class="language-markup">//form设置ref，绑定rules，设置prop绑定对应项目                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcFormRef<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcForm<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcForm.port<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phoneNo<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rackNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcForm.rackNo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>describe<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>describe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plcForm.describe<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>//设置dialogConfirm把ref作为参数                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false; dialogCancel()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false; dialogConfirm(plcFormRef,plcForm)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            Confirm                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="设置rules"><a href="#设置rules" class="headerlink" title="设置rules"></a>设置rules</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//form中虽然设置了，但是在script中还是要声明这个变量</span><span class="token keyword">const</span> plcFormRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>FormInstance<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//自定义的rules</span><span class="token keyword">const</span> <span class="token function-variable function">validatePort</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please input digits'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">validateRackNo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please input digits'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">validateSlotNo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> callback<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Please input digits'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    port<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token keyword">require</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>validator<span class="token operator">:</span> validatePort<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  rackNo<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> validator<span class="token operator">:</span> validateRackNo<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  slotNo<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> validator<span class="token operator">:</span> validateSlotNo<span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="触发方法"><a href="#触发方法" class="headerlink" title="触发方法"></a>触发方法</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>plcFormRef<span class="token punctuation">)</span> <span class="token keyword">return</span>plcFormRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//rules检验成功如何进行什么</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//rules验证失败进行的操作</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>这个出现了一些额外情况，我的input框可以选中，但是不能输入。键盘确定没问题，就是没法输入<br>经过一番折腾我把plcForm的写法有了修改。<br>旧写法：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> plcForm <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span>plcInfoUpdate<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> plcCode<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> ip<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> port<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> rackNo<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> slotNo<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  describe<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>新写法</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> plcForm <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>plcInfoUpdate<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> plcCode<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> ip<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> port<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> rackNo<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> slotNo<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  describe<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>问题得到了解决。  </p>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 实战学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-MD5加密</title>
      <link href="/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-MD5%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-MD5%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-SQERVER-MD5加密"><a href="#SQL-SQERVER-MD5加密" class="headerlink" title="SQL SQERVER MD5加密"></a>SQL SQERVER MD5加密</h1><p>目前看到在sql server中两种md5加密方式。  </p><ul><li>通过.net的函数加密然后写入。</li><li>通过sql server自己的md5加密然后写入。</li></ul><h2 id="先加密后写入"><a href="#先加密后写入" class="headerlink" title="先加密后写入"></a>先加密后写入</h2><p>相关代码</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;使用MD5加密明文密码MD5 md5 &#x3D; new MD5CryptoServiceProvider();  &#x2F;&#x2F;实例化MD5对象byte[] s &#x3D; md5.ComputeHash(Encoding.UTF8.GetBytes(&quot;password&quot;));   &#x2F;&#x2F;调用ComputeHash方法将字符串进行加密处理string password &#x3D; Convert.ToBase64String(s);      &#x2F;&#x2F;将字节类型的数组转换为字符串,得到加密后的密码str &#x3D; $&quot;insert into TestTable(ID, Name) values(&#39;003&#39;,&#39;&#123;password&#125;&#39;)&quot;;SqlCom &#x3D; new SqlCommand(str, SqlCon);&#x2F;&#x2F; 参数1：SQL语句字符串。参数2：已经打开的数据库Sdr.Close();Sdr &#x3D; SqlCom.ExecuteReader();</code></pre><p>这种加密方式经过测试相同的密码结果相同。\n<br>要求，密码那一列的格式需要是varchar如果格式，主要是长度不太对，就出现报错。\n</p><h2 id="自带的sql-server-md5加密方式。"><a href="#自带的sql-server-md5加密方式。" class="headerlink" title="自带的sql server md5加密方式。"></a>自带的sql server md5加密方式。</h2><p>相关代码</p><pre class="language-none"><code class="language-none">str &#x3D; $&quot;insert into TestTable(ID, Name) values(&#39;005&#39;,(select SUBSTRING( sys.fn_sqlvarbasetostr(HashBytes(&#39;MD5&#39;,&#39;pasword&#39;)),3,32)))&quot;;SqlCom &#x3D; new SqlCommand(str, SqlCon);&#x2F;&#x2F; 参数1：SQL语句字符串。参数2：已经打开的数据库Sdr.Close();Sdr &#x3D; SqlCom.ExecuteReader();</code></pre><p>这种加密方式是通过sql server内置的加密方案进行加密。<br>中间的这个substring的确是截取部分数据。因为开头的0x并不是加密的结果<br>sys.fn_sqlvarbasetostr()这个是一个格式转换函数，将加密后的是varbinary转换为varchar类型，大写也变成了小写，但加密的数值前面两位0x并不是MD5加密后的结果部分，我们还需要使用截取函数将它去掉，获得完整MD5加密结果。<br>其实还可以用另一个函数进行截取的，不过这个是把街区的部分用空格填充。<br><code>select Stuff( sys.fn_sqlvarbasetostr(HashBytes(&#39;MD5&#39;,&#39;123456&#39;)),1,2,SPACE(2))</code><br>STUFF(expression,start,length,replace)\n</p><ul><li>第一参数就是字符串表达式，可以是常量、变量、表达式或字段等</li><li>第二个参数是截取的开始位数</li><li>第三个参数是截取的长度位数</li><li>第四个参数是替换的字符串内容<br>从Sql2008开始，MSSQL提供了hashbytes函数，该函数可以对字符串进行MD2、MD4、MD5、SHA、SHA1、SHA2_256、SHA2_512七种算法的加密<br>1.使用hashbytes函数进行加密的语法格式:<br>HASHBYTES ( ‘算法’, expression)<br>第一个参数就是使用单引号包裹起来的算法名称，这个名字可以以下七种方式中的任何一种：<br>MD2 | MD4 | MD5 | SHA | SHA1 | SHA2_256 | SHA2_512\n<br>第二个参数就是将要被加密的字符串表达式，可以是常量、变量、表达式或字段等。<br>–例如：密码是 123456<br>select HashBytes(‘MD5’,’123456’)<br>输出：0xE10ADC3949BA59ABBE56E057F20F883E<br>返回值是一个最大8000长度的varbinary。没错，返回值是varbinary，并不是直接的字符串<br>我们想要的结果，是MD5加密后的字符串，但hashbytes返回的是varbinary，这倒是没关系，有一个系统函数sys.fn_sqlvarbasetostr是专门用来将varbinary转为varchar的，当然您可以使用其它方式转换.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MD5加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MD5加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-异常学习-学习日志（9）</title>
      <link href="/2023/03/12/C-%E5%BC%82%E5%B8%B8%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%889%EF%BC%89/"/>
      <url>/2023/03/12/C-%E5%BC%82%E5%B8%B8%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%889%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-异常-Expection"><a href="#C-异常-Expection" class="headerlink" title="C#异常-Expection"></a>C#异常-Expection</h1><pre class="language-C#" data-language="C#"><code class="language-C#">try&#123;&#125;catch&#123;&#125;</code></pre><p>可以捕捉异常。再catch中如果还发生异常，是可以直接被抛出的。<br>eg：  </p><pre class="language-none"><code class="language-none">static void Main(string[] args)&#123;    int a &#x3D; 10;    int x;    object o &#x3D; Reflect(BitConverter.GetBytes(a));    Console.WriteLine(o.GetType().FullName);    Program program1&#x3D;new Program();    try&#123;        program1.ThrowExpection();    &#125;    catch    &#123;        program1.ThrowExpection();        x &#x3D; 10;    &#125;&#125;public void ThrowExpection()&#123;    var expection1&#x3D;new Exception(&quot;err 1&quot;);    throw expection1;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-DataTable-学习日志（8）</title>
      <link href="/2023/03/12/C-DataTable-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%888%EF%BC%89/"/>
      <url>/2023/03/12/C-DataTable-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%888%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础学习DataTable"><a href="#C-基础学习DataTable" class="headerlink" title="C# 基础学习DataTable"></a>C# 基础学习DataTable</h1><p>这个数据类型我只在C#中有看过。特此学习。<br>DataTable这个数据类型<br>比较形象的描述应该是一个具有表名，列名的二维字符串表。  </p><h2 id="基本功能的表示。"><a href="#基本功能的表示。" class="headerlink" title="基本功能的表示。"></a>基本功能的表示。</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;创建一个空表DataTable dt &#x3D; new DataTable();&#x2F;&#x2F;创建一个名为&quot;Table_New&quot;的空表DataTable dt &#x3D; new DataTable(&quot;Table_New&quot;);</code></pre><h3 id="创建列"><a href="#创建列" class="headerlink" title="创建列"></a>创建列</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;1.创建空列DataColumn dc &#x3D; new DataColumn();dt.Columns.Add(dc);&#x2F;&#x2F;2.创建带列名和类型名的列(两种方式任选其一)dt.Columns.Add(&quot;column0&quot;, System.Type.GetType(&quot;System.String&quot;));dt.Columns.Add(&quot;column0&quot;, typeof(String));&#x2F;&#x2F;3.通过列架构添加列DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;,System.Type.GetType(&quot;System.DateTime&quot;));DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;, typeof(DateTime));dt.Columns.Add(dc);</code></pre><h3 id="创建行"><a href="#创建行" class="headerlink" title="创建行"></a>创建行</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;1.创建空列DataColumn dc &#x3D; new DataColumn();dt.Columns.Add(dc);&#x2F;&#x2F;2.创建带列名和类型名的列(两种方式任选其一)dt.Columns.Add(&quot;column0&quot;, System.Type.GetType(&quot;System.String&quot;));dt.Columns.Add(&quot;column0&quot;, typeof(String));&#x2F;&#x2F;3.通过列架构添加列DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;,System.Type.GetType(&quot;System.DateTime&quot;));DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;, typeof(DateTime));dt.Columns.Add(dc);</code></pre><h3 id="赋值与取值"><a href="#赋值与取值" class="headerlink" title="赋值与取值"></a>赋值与取值</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;1.创建空列DataColumn dc &#x3D; new DataColumn();dt.Columns.Add(dc);&#x2F;&#x2F;2.创建带列名和类型名的列(两种方式任选其一)dt.Columns.Add(&quot;column0&quot;, System.Type.GetType(&quot;System.String&quot;));dt.Columns.Add(&quot;column0&quot;, typeof(String));&#x2F;&#x2F;3.通过列架构添加列DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;,System.Type.GetType(&quot;System.DateTime&quot;));DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;, typeof(DateTime));dt.Columns.Add(dc);</code></pre><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;1.创建空列DataColumn dc &#x3D; new DataColumn();dt.Columns.Add(dc);&#x2F;&#x2F;2.创建带列名和类型名的列(两种方式任选其一)dt.Columns.Add(&quot;column0&quot;, System.Type.GetType(&quot;System.String&quot;));dt.Columns.Add(&quot;column0&quot;, typeof(String));&#x2F;&#x2F;3.通过列架构添加列DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;,System.Type.GetType(&quot;System.DateTime&quot;));DataColumn dc &#x3D; new DataColumn(&quot;column1&quot;, typeof(DateTime));dt.Columns.Add(dc);</code></pre><h3 id="赋值表"><a href="#赋值表" class="headerlink" title="赋值表"></a>赋值表</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;复制表，同时复制了表结构和表中的数据DataTable dtNew &#x3D; new DataTable();dtNew &#x3D; dt.Copy();&#x2F;&#x2F;复制表DataTable dtNew &#x3D; dt.Copy();  &#x2F;&#x2F;复制dt表数据结构dtNew.Clear()  &#x2F;&#x2F;清空数据for (int i &#x3D; 0; i &lt; dt.Rows.Count; i++)&#123;    if (条件语句)    &#123;         dtNew.Rows.Add(dt.Rows[i].ItemArray);  &#x2F;&#x2F;添加数据行    &#125;&#125;&#x2F;&#x2F;克隆表，只是复制了表结构，不包括数据DataTable dtNew &#x3D; new DataTable();dtNew &#x3D; dt.Clone();&#x2F;&#x2F;如果只需要某个表中的某一行DataTable dtNew &#x3D; new DataTable();dtNew &#x3D; dt.Copy();dtNew.Rows.Clear();&#x2F;&#x2F;清空表数据dtNew.ImportRow(dt.Rows[0]);&#x2F;&#x2F;这是加入的是第一行</code></pre><h3 id="表排序"><a href="#表排序" class="headerlink" title="表排序"></a>表排序</h3><pre class="language-C#" data-language="C#"><code class="language-C#">DataTable dt &#x3D; new DataTable();&#x2F;&#x2F;创建表dt.Columns.Add(&quot;ID&quot;, typeof(Int32));&#x2F;&#x2F;添加列dt.Columns.Add(&quot;Name&quot;, typeof(String));dt.Columns.Add(&quot;Age&quot;, typeof(Int32));dt.Rows.Add(new object[] &#123; 1, &quot;张三&quot; ,20&#125;);&#x2F;&#x2F;添加行dt.Rows.Add(new object[] &#123; 2, &quot;李四&quot; ,25&#125;);dt.Rows.Add(new object[] &#123; 3, &quot;王五&quot; ,30&#125;);DataView dv &#x3D; dt.DefaultView;&#x2F;&#x2F;获取表视图dv.Sort &#x3D; &quot;ID DESC&quot;;&#x2F;&#x2F;按照ID倒序排序dv.ToTable();&#x2F;&#x2F;转为表</code></pre><h3 id="筛选行"><a href="#筛选行" class="headerlink" title="筛选行"></a>筛选行</h3><pre class="language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;选择column1列值为空的行的集合DataRow[] drs &#x3D; dt.Select(&quot;column1 is null&quot;);&#x2F;&#x2F;选择column0列值为&quot;李四&quot;的行的集合DataRow[] drs &#x3D; dt.Select(&quot;column0 &#x3D; &#39;李四&#39;&quot;);&#x2F;&#x2F;筛选column0列值中有&quot;张&quot;的行的集合(模糊查询)DataRow[] drs &#x3D; dt.Select(&quot;column0 like &#39;张%&#39;&quot;);&#x2F;&#x2F;如果的多条件筛选，可以加 and 或 or&#x2F;&#x2F;筛选column0列值中有&quot;张&quot;的行的集合并按column1降序排序DataRow[] drs &#x3D; dt.Select(&quot;column0 like &#39;张%&#39;&quot;, &quot;column1 DESC&quot;);</code></pre><h2 id="读取csv实例"><a href="#读取csv实例" class="headerlink" title="读取csv实例"></a>读取csv实例</h2><p>根据特点，它可以用于读取csv文件中的内容，并存储在dataTable中.<br>如果直接使用CsvHelper，那样是存储在一个<code>List&lt;Object&gt;</code>中<br>以下是例子：  </p><pre class="language-C#" data-language="C#"><code class="language-C#">using System;using System.Data;using System.IO;using System.Text;using System.Diagnostics;namespace Nestar.Helpers&#123;    public class SpreadSheetHelper    &#123;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 将DataTable中数据写入到表格文件中        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;Table&quot;&gt;源数据的DataTable&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FullPath&quot;&gt;文件路径&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;LineSeparator&quot;&gt;行分隔符&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FieldDelimiter&quot;&gt;列分隔符&lt;&#x2F;param&gt;        public static void SaveDataTableToSpreadsheet(DataTable Table, string FullPath, string LineSeparator, string FieldDelimiter )        &#123;            FileInfo fileInfo &#x3D; new FileInfo(FullPath);            if (!fileInfo.Directory.Exists)            &#123;                fileInfo.Directory.Create();            &#125;            using (FileStream fs &#x3D; new FileStream(FullPath, FileMode.Create, FileAccess.Write))            &#123;                using (StreamWriter sw &#x3D; new StreamWriter(fs, Encoding.Default))                &#123;                    string data &#x3D; &quot;&quot;;                    &#x2F;&#x2F;写出列名称                    for (int i &#x3D; 0; i &lt; Table.Columns.Count; i++)                    &#123;                        data +&#x3D; Table.Columns[i].ColumnName.ToString();                        if (i &lt; Table.Columns.Count - 1)                        &#123;                            data +&#x3D; FieldDelimiter;                        &#125;                    &#125;                    sw.Write(data + LineSeparator);                    &#x2F;&#x2F;写出各行数据                    for (int i &#x3D; 0; i &lt; Table.Rows.Count; i++)                    &#123;                        data &#x3D; &quot;&quot;;                        bool IsEmptyLine &#x3D; true;                        for (int j &#x3D; 0; j &lt; Table.Columns.Count; j++)                        &#123;                            IsEmptyLine &#x3D; IsEmptyLine &amp;&amp; string.IsNullOrEmpty(Table.Rows[i][j].ToString());                            data +&#x3D; Table.Rows[i][j].ToString();                            if (j &lt; Table.Columns.Count - 1)                            &#123;                                data +&#x3D; FieldDelimiter;                            &#125;                        &#125;                        if (!IsEmptyLine)                        &#123;                            sw.Write(data + LineSeparator);                        &#125;                    &#125;                    sw.Flush();                    sw.Close();                &#125;                fs.Close();            &#125;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 将DataTable中数据写入到CSV文件中        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;Table&quot;&gt;源数据的DataTable&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FullPath&quot;&gt;CSV文件路径&lt;&#x2F;param&gt;        public static void SaveDataTableToCSV(DataTable Table, string FullPath)        &#123;            SaveDataTableToSpreadsheet(Table, FullPath, &quot;\r\n&quot;, &quot;,&quot;);        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 将表格文件的数据读取到DataTable中        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FilePath&quot;&gt;表格文件路径&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;returns&gt;返回读取了表格数据的DataTable&lt;&#x2F;returns&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;LineSeparator&quot;&gt;行分隔符&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FieldDelimiter&quot;&gt;列分隔符&lt;&#x2F;param&gt;        public static DataTable OpenSpreadsheetAsDataTable(string FilePath, string LineSeparator, string FieldDelimiter)        &#123;            DataTable dataTable &#x3D; new DataTable();            if (!string.IsNullOrEmpty(FilePath))            &#123;                Encoding encoding &#x3D; GetType(FilePath);                using (FileStream fs &#x3D; new FileStream(FilePath, FileMode.Open, FileAccess.Read))                &#123;                    using (StreamReader sr &#x3D; new StreamReader(fs, encoding))                    &#123;                        string fileContent &#x3D; sr.ReadToEnd();                        string[] strLines &#x3D; fileContent.Split(new string[] &#123; LineSeparator &#125;, StringSplitOptions.RemoveEmptyEntries);                        &#x2F;&#x2F;记录每行记录中的各字段内容                        string[] tableHead &#x3D; null;                        string[] fields &#x3D; null;                        &#x2F;&#x2F;标示列数                        int columnCount &#x3D; 0;                        &#x2F;&#x2F;标示是否是读取的第一行                        bool isFirstLine &#x3D; true;                        try                        &#123;                            foreach (string sline in strLines)                            &#123;                                if (!string.IsNullOrEmpty(sline))                                &#123;                                    if (isFirstLine)                                    &#123;                                        isFirstLine &#x3D; !isFirstLine;                                        tableHead &#x3D; sline.Split(new string[] &#123; FieldDelimiter &#125;, StringSplitOptions.RemoveEmptyEntries);                                        columnCount &#x3D; tableHead.Length;                                        foreach (string head in tableHead)                                        &#123;                                            dataTable.Columns.Add(head);                                        &#125;                                    &#125;                                    else                                    &#123;                                        fields &#x3D; sline.Split(new string[] &#123; FieldDelimiter &#125;,StringSplitOptions.None);                                        DataRow dr &#x3D; dataTable.NewRow();                                        for (int j &#x3D; 0; j &lt; columnCount; j++)                                        &#123;                                            dr[j] &#x3D; fields[j];                                        &#125;                                        dataTable.Rows.Add(dr);                                    &#125;                                &#125;                            &#125;                        &#125;                        catch                        &#123; &#125;                        sr.Close();                    &#125;                    fs.Close();                &#125;            &#125;            return dataTable;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 将CSV文件的数据读取到DataTable中        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FilePath&quot;&gt;CSV文件路径&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;returns&gt;返回读取了CSV数据的DataTable&lt;&#x2F;returns&gt;        public static DataTable OpenCSVAsDataTable(string FilePath)        &#123;            return OpenSpreadsheetAsDataTable(FilePath, &quot;\r\n&quot;, &quot;,&quot;);        &#125;        public static bool AppendToCSV(string FilePath, System.Collections.IEnumerable Fields)        &#123;            bool retVal;            try            &#123;                string dir &#x3D; Path.GetDirectoryName(FilePath);                if (!Directory.Exists(dir))                &#123;                    Directory.CreateDirectory(dir);                &#125;                using (FileStream fs &#x3D; new FileStream(FilePath, FileMode.Append, FileAccess.Write))                &#123;                    Debug.Print(fs.Length.ToString());                    using (StreamWriter sw &#x3D; new StreamWriter(fs))                    &#123;                        string context &#x3D; string.Empty;                        foreach (object field in Fields)                        &#123;                            context +&#x3D; field.ToString() + &quot;,&quot;;                        &#125;                        context &#x3D; context.TrimEnd(&#39;,&#39;);                        sw.Write(context + &quot;\r\n&quot;);                        sw.Close();                    &#125;                    fs.Close();                &#125;                retVal &#x3D; true;            &#125;            catch            &#123;                retVal &#x3D; false;            &#125;            return retVal;        &#125;        &#x2F;&#x2F;&#x2F; 给定文件的路径，读取文件的二进制数据，判断文件的编码类型          &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FileName&quot;&gt;文件路径&lt;&#x2F;param&gt;          &#x2F;&#x2F;&#x2F; &lt;returns&gt;文件的编码类型&lt;&#x2F;returns&gt;          public static Encoding GetType(string FileName)        &#123;            FileStream fs &#x3D; new FileStream(FileName, FileMode.Open, FileAccess.Read);            Encoding r &#x3D; GetType(fs);            fs.Close();            return r;        &#125;        &#x2F;&#x2F;&#x2F; 通过给定的文件流，判断文件的编码类型          &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;fileStream&quot;&gt;文件流&lt;&#x2F;param&gt;          &#x2F;&#x2F;&#x2F; &lt;returns&gt;文件的编码类型&lt;&#x2F;returns&gt;          public static Encoding GetType(FileStream fileStream)        &#123;            byte[] Unicode &#x3D; new byte[] &#123; 0xFF, 0xFE, 0x41 &#125;;            byte[] UnicodeBIG &#x3D; new byte[] &#123; 0xFE, 0xFF, 0x00 &#125;;            byte[] UTF8 &#x3D; new byte[] &#123; 0xEF, 0xBB, 0xBF &#125;; &#x2F;&#x2F;带BOM              Encoding retVal &#x3D; Encoding.Default;            BinaryReader r &#x3D; new BinaryReader(fileStream, Encoding.Default);            int.TryParse(fileStream.Length.ToString(), out int i);            byte[] ss &#x3D; r.ReadBytes(i);            if (IsUTF8Bytes(ss) || (ss[0] &#x3D;&#x3D; 0xEF &amp;&amp; ss[1] &#x3D;&#x3D; 0xBB &amp;&amp; ss[2] &#x3D;&#x3D; 0xBF))            &#123;                retVal &#x3D; Encoding.UTF8;            &#125;            else if (ss[0] &#x3D;&#x3D; 0xFE &amp;&amp; ss[1] &#x3D;&#x3D; 0xFF &amp;&amp; ss[2] &#x3D;&#x3D; 0x00)            &#123;                retVal &#x3D; Encoding.BigEndianUnicode;            &#125;            else if (ss[0] &#x3D;&#x3D; 0xFF &amp;&amp; ss[1] &#x3D;&#x3D; 0xFE &amp;&amp; ss[2] &#x3D;&#x3D; 0x41)            &#123;                retVal &#x3D; Encoding.Unicode;            &#125;            r.Close();            return retVal;        &#125;        &#x2F;&#x2F;&#x2F; 判断是否是不带 BOM 的 UTF8 格式          &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;data&quot;&gt;&lt;&#x2F;param&gt;          &#x2F;&#x2F;&#x2F; &lt;returns&gt;&lt;&#x2F;returns&gt;          private static bool IsUTF8Bytes(byte[] data)        &#123;            int charByteCounter &#x3D; 1;  &#x2F;&#x2F;计算当前正分析的字符应还有的字节数              byte curByte; &#x2F;&#x2F;当前分析的字节.              for (int i &#x3D; 0; i &lt; data.Length; i++)            &#123;                curByte &#x3D; data[i];                if (charByteCounter &#x3D;&#x3D; 1)                &#123;                    if (curByte &gt;&#x3D; 0x80)                    &#123;                        &#x2F;&#x2F;判断当前                          while (((curByte &lt;&lt;&#x3D; 1) &amp; 0x80) !&#x3D; 0)                        &#123;                            charByteCounter++;                        &#125;                        &#x2F;&#x2F;标记位首位若为非0 则至少以2个1开始 如:110XXXXX...........1111110X　                          if (charByteCounter &#x3D;&#x3D; 1 || charByteCounter &gt; 6)                        &#123;                            return false;                        &#125;                    &#125;                &#125;                else                &#123;                    &#x2F;&#x2F;若是UTF-8 此时第一位必须为1                      if ((curByte &amp; 0xC0) !&#x3D; 0x80)                    &#123;                        return false;                    &#125;                    charByteCounter--;                &#125;            &#125;            if (charByteCounter &gt; 1)            &#123;                throw new Exception(&quot;非预期的byte格式&quot;);            &#125;            return true;        &#125;            &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> DataTable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-基础sql语句</title>
      <link href="/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9F%BA%E7%A1%80sql%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9F%BA%E7%A1%80sql%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>SQL学习复习<br>常见的SQL语句：  </p><h1 id="基础SQL语句"><a href="#基础SQL语句" class="headerlink" title="基础SQL语句"></a>基础SQL语句</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class="language-C#" data-language="C#"><code class="language-C#">CREATE DATABASE database-name</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre class="language-C#" data-language="C#"><code class="language-C#">drop database dbname</code></pre><h2 id="创建新表"><a href="#创建新表" class="headerlink" title="创建新表"></a>创建新表</h2><pre class="language-C#" data-language="C#"><code class="language-C#">create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)　　--根据已有的表创建新表：　　A：create table tab_new like tab_old (使用旧表创建新表)　　B：create table tab_new as select col1,col2… from tab_old definition only</code></pre><p>下面是在C#中遇见的如何创建新表而不与旧表重复</p><pre class="language-C#" data-language="C#"><code class="language-C#">str &#x3D; &quot;IF not exists (select * from sysobjects where name&#x3D;&#39;Chinese&#39; and xtype&#x3D;&#39;U&#39;) Create Table Chinese (id char(6),name varchar(10))&quot;;</code></pre><h2 id="删除新表"><a href="#删除新表" class="headerlink" title="删除新表"></a>删除新表</h2><pre class="language-C#" data-language="C#"><code class="language-C#">drop table tabname</code></pre><h2 id="数据表中新增一列"><a href="#数据表中新增一列" class="headerlink" title="数据表中新增一列"></a>数据表中新增一列</h2><pre class="language-C#" data-language="C#"><code class="language-C#">Alter table tabname add column col type--注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</code></pre><h2 id="数据表中删除一列"><a href="#数据表中删除一列" class="headerlink" title="数据表中删除一列"></a>数据表中删除一列</h2><pre class="language-C#" data-language="C#"><code class="language-C#">&#96;&#96;&#96;## 查询信息&#96;&#96;&#96;C#select * from table1 where 范围</code></pre><h2 id="插入信息"><a href="#插入信息" class="headerlink" title="插入信息"></a>插入信息</h2><pre class="language-C#" data-language="C#"><code class="language-C#">insert into table1(field1,field2) values(value1,value2)</code></pre><p>补充说明：如何添加一个md5加密措施</p><pre class="language-C#" data-language="C#"><code class="language-C#">str &#x3D; $&quot;insert into TestTable(ID, Name) values(&#39;005&#39;,     (select SUBSTRING( sys.fn_sqlvarbasetostr(HashBytes(&#39;MD5&#39;,&#39;pasword&#39;)),3,32))</code></pre><p>SUBSTRING()截取字符串。<br>sys.fn_sqlvarbasetostr()转换格式<br>HashBytes(‘MD5’,’pasword’)MD5加密  </p><h2 id="删除信息"><a href="#删除信息" class="headerlink" title="删除信息"></a>删除信息</h2><pre class="language-C#" data-language="C#"><code class="language-C#">delete from table1 where 范围</code></pre><h2 id="更新信息"><a href="#更新信息" class="headerlink" title="更新信息"></a>更新信息</h2><pre class="language-C#" data-language="C#"><code class="language-C#">update table1 set field1&#x3D;value1 where 范围</code></pre><h2 id="关于定位信息的一些辅助功能。"><a href="#关于定位信息的一些辅助功能。" class="headerlink" title="关于定位信息的一些辅助功能。"></a>关于定位信息的一些辅助功能。</h2><pre class="language-C#" data-language="C#"><code class="language-C#">&#96;&#96;&#96;### 排序&#96;&#96;&#96;C#select * from table1 order by field1,field2 [desc]</code></pre><h3 id="总数"><a href="#总数" class="headerlink" title="总数"></a>总数</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select count as totalcount from table1</code></pre><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select sum(field1) as sumvalue from table1</code></pre><h3 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select avg(field1) as avgvalue from table1</code></pre><h3 id="最大"><a href="#最大" class="headerlink" title="最大"></a>最大</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select max(field1) as maxvalue from table1</code></pre><h3 id="最小"><a href="#最小" class="headerlink" title="最小"></a>最小</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select min(field1) as maxvalue from table1</code></pre><h3 id="like查找"><a href="#like查找" class="headerlink" title="like查找"></a>like查找</h3><pre class="language-C#" data-language="C#"><code class="language-C#">select * from table1 where field1 like ’%value1%’</code></pre><h2 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h2><pre class="language-C#" data-language="C#"><code class="language-C#">Alter table tabname add primary key(col)--说明：删除主键： Alter table tabname drop primary key(col)</code></pre><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><pre class="language-C#" data-language="C#"><code class="language-C#">create [unique] index idxname on tabname(col….)--删除索引：drop index idxname</code></pre><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><pre class="language-C#" data-language="C#"><code class="language-C#">create view viewname as select statement--删除索引：drop view viewname</code></pre><h1 id="左右连接的区别"><a href="#左右连接的区别" class="headerlink" title="左右连接的区别"></a>左右连接的区别</h1><p>左连接就是左边的表中的结果全部会在结果中出现。如果有左表有，但是右边表无的结果，会出现在null的结果代替。左边的表不加以限制。<br>内连接（自然连接）只会出现两个表都有的结果。<br>全外连接是两个表的结果都会出现在最终的结果中。即包括左右连接的结果。（笛卡尔积的数据量）<br>例如，A&#x3D;{a,b},B&#x3D;{0,1,2},则<br>AxB&#x3D;{&lt;a,o&gt;,&lt;a,1&gt;,&lt;a,2&gt;,&lt;b,0&gt;,&lt;b,1&gt;,&lt;b,2&gt;,}<br>BxA&#x3D;{&lt;0,a&gt;,&lt;0,b&gt;,&lt;1,a&gt;,&lt;1,b&gt;,&lt;2,a&gt;,&lt;2,b&gt;}  </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 基础sql语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 基础sql语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装机-内存缓存</title>
      <link href="/2023/03/12/%E8%A3%85%E6%9C%BA-%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98/"/>
      <url>/2023/03/12/%E8%A3%85%E6%9C%BA-%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="内存，缓存，堆，栈之间的关系"><a href="#内存，缓存，堆，栈之间的关系" class="headerlink" title="内存，缓存，堆，栈之间的关系"></a>内存，缓存，堆，栈之间的关系</h1><h2 id="先说栈和堆"><a href="#先说栈和堆" class="headerlink" title="先说栈和堆"></a>先说栈和堆</h2><p>栈和堆都是放在内存里的，没错就是RAM，通常所说的内存条！<br>因为程序运行就是在运行在内存里的！  </p><h2 id="栈和堆有什么区别？"><a href="#栈和堆有什么区别？" class="headerlink" title="栈和堆有什么区别？"></a>栈和堆有什么区别？</h2><p>栈：栈的大小是静态的，是编译时就知道的，比如数组的大小，每个程序允许申请的栈大小是有上限的，数组申请过大，会导致栈溢出！<br>堆：堆的大小是动态的，程序运行是动态申请的，不固定，比如new对象的个数和大小！需要自己手动释放，不然会导致内存泄漏！  </p><h2 id="缓存："><a href="#缓存：" class="headerlink" title="缓存："></a>缓存：</h2><p>分为两种：程序缓存和CPU缓存<br>程序缓存：就是所说的缓冲区！栈和堆都属于程序缓存！让数据保存在内存中，加快程序计算效率的！（说法：栈属于一级缓存、堆属于二级缓存）<br>CPU缓存：这是硬件层次缓存，处于内存条和CPU之间，以为比如CPU的L1 L2，L3等缓存机制，因为CPU缓存比CPU读内存数据更快！用于存放热点数据，数据如何分级存放有自己的算法。  </p>]]></content>
      
      
      <categories>
          
          <category> 装机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> 内存，缓存，堆，栈之间的关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记-无糖可乐想喝就喝？</title>
      <link href="/2023/03/12/%E6%97%A5%E8%AE%B0-%E6%97%A0%E7%B3%96%E5%8F%AF%E4%B9%90%E6%83%B3%E5%96%9D%E5%B0%B1%E5%96%9D%EF%BC%9F/"/>
      <url>/2023/03/12/%E6%97%A5%E8%AE%B0-%E6%97%A0%E7%B3%96%E5%8F%AF%E4%B9%90%E6%83%B3%E5%96%9D%E5%B0%B1%E5%96%9D%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="无糖可乐想喝就喝？"><a href="#无糖可乐想喝就喝？" class="headerlink" title="无糖可乐想喝就喝？"></a>无糖可乐想喝就喝？</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天在想减肥的时候，突然想起来了无糖可乐。之前一直和父母在喝饮料的问题上争执不休，自己觉得无糖可乐完全可以喝。<br>特别是减肥的时候，不仅是快乐，还有健康。<br>但是搜索下来的结果优点出乎意料。  </p><h2 id="依据"><a href="#依据" class="headerlink" title="依据"></a>依据</h2><ol><li>有的回答说，喝完脑子认为摄入糖类，胰岛素升高，导致身体将原本的血糖通过脂肪存储起来，让自己对于糖类的渴求增加。普通可乐这个增加是很少的。这样长期的欺骗，会导致二型糖尿病的风险增加。<br>而我父亲就有二型糖尿病，所以我直接感觉到了不对。但是也有回答是说饮用后不会有太大的血糖的变化。但是更多的回答是有血糖的变化的。包括知乎中一个一型糖尿病的自我检测，有升高，但是不如主食的变化明显。  </li><li>不仅如此，有的文章中提到有2017年一个澳洲的研究者明确发现，这种甜味剂可以导致血糖的升高，导致二型糖尿病的发生。这个影响是源自，扰乱我们的肠道有益菌的方式，仅仅食用两周就有很明显的影响。  </li><li>除去这些简单的影响，还有需要注意的可乐中的磷酸还是会有导致骨质疏松的风险。  </li><li>除此以外，有的文章说国标说无糖可乐一天不超过1000ml就好，我觉得这个在上面的说法后变得无力。这个就像烟酒，因为市场太大与人们意愿，这个国标就很无力。还说少喝酒，在身体的排毒下的危害不大。这岂不是异曲同工之妙？</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因此，可以做出总结，<br>无糖可乐是不可以说随便想喝就喝的。糖尿病人也很明显不能喝啊。亏得我还考虑过要不要以后真的确诊糖尿病的时候全靠无糖可乐续命。<br>能少喝还是少喝，找什么平替呢？不如来点茶与咖啡。  </p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记2023-3-8</title>
      <link href="/2023/03/12/%E6%97%A5%E8%AE%B02023-3-8/"/>
      <url>/2023/03/12/%E6%97%A5%E8%AE%B02023-3-8/</url>
      
        <content type="html"><![CDATA[<h1 id="横渠四句"><a href="#横渠四句" class="headerlink" title="横渠四句"></a>横渠四句</h1><blockquote><p>为天地立心<br>为生民立命<br>为往圣继绝学<br>为万世开太平  </p></blockquote><p>北宋大儒张横渠说的。张载（1020年—1077年），字子厚，凤翔郿县（今陕西眉县）横渠镇人，北宋思想家、教育家、理学创始人之一。世称横渠先生，尊称张子，封先贤，奉祀孔庙西庑第38位。其“为天地立心，为生民立命，为往圣继绝学，为万世开太平”的名言被当代哲学家冯友兰称作“横渠四句”，因其言简意宏，历代传颂不衰。  </p><h2 id="自身理解："><a href="#自身理解：" class="headerlink" title="自身理解："></a>自身理解：</h2><p>构建社会价值观。天地无心，但人有心。人这个整体的心就是社会的价值观，天地人又为一体，所以就是构建社会价值观。<br>营造生机勃勃，百帆争渡的社会氛围。天地无常，但人可定天。人不可向命运低头，立下与天相争，与人相斗的雄心壮志。<br>在过往的学说上再完善，精简。<br>构建社会和平的基石。  </p><h2 id="这是一个时代人的目标"><a href="#这是一个时代人的目标" class="headerlink" title="这是一个时代人的目标"></a>这是一个时代人的目标</h2><p>从社会的价值观,个人的价值观,（不随波逐流，在社会的价值中去冲出命运的枷锁，给社会带来变量。）<br>变量有好有坏，成熟的社会，坏变量会更多。<br>但是可以通过社会价值观去引导，去压制，好的变量需要知识的灌溉才能实现。坏的变量会被社会磨灭，碾碎。社会需要的的创新价值是在巨人的肩膀上去创新。  所以小时候的压制还是利大于弊的，这段时间是依靠社会的硬实力，铁血手段，暴打，训斥等。不能隐忍住的被抛弃。<br>成年后，这种社会的压制被放宽，还在前行车上的人意识到了社会的力量，心生畏惧。这短时间就是依靠社会的软实力去实现磨灭价值。<br>中间插一段为什么小时候要暴力，长大后才会软方案。我觉得人类小的时候都是从认识自己到认识世界。一开始都是以自我为中心，至少中国传统的教育方案是不断加深这个自我为中心的认识，我饿了，有人来喂我，我渴了有人喂水。我上厕所也有人帮忙，因此小时候只有暴力才是真正的，自我为中心是对于外界没有那么多的畏惧，或者说是认识不足，很难感受到。<br>过去的价值,（过去留给我们的最重要的是知识，精神或者说信念，基建）<br>未来的目标（不·假大空·很舒服，我不知道未来会是什么样，但是我在过去的日子里，知道和平很好。我想把这个留给你啊）  </p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装机-基本知识</title>
      <link href="/2023/03/12/%E8%A3%85%E6%9C%BA-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/03/12/%E8%A3%85%E6%9C%BA-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="装机知识"><a href="#装机知识" class="headerlink" title="装机知识"></a>装机知识</h1><p>总结以下自己看到的装机知识。<br>首先最影响电脑性能的几样东西。   </p><ul><li>CPU</li><li>主板</li><li>显卡</li><li>内存<br>一些装机需要的东西。  </li><li>机箱</li><li>电源</li><li>硬盘</li><li>散热</li><li>显示器<br>下面针对不同的东西然后细细考虑。</li></ul><h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>显卡控制显示器屏幕的显示内容。<br>显卡品牌基本可以分为两大阵营：N卡与A卡<br>Steam2022年二月硬件统计N卡75.4%<br>显卡又可以分为  </p><ul><li>集成显卡</li><li>独立显卡</li><li>核心显卡</li><li>双显卡</li></ul><h3 id="集成显卡"><a href="#集成显卡" class="headerlink" title="集成显卡"></a>集成显卡</h3><p>比较老的产品，现在被淘汰。占用内存<br>集成在老式的主板上面。<br>个人PC基本使用核心显卡  </p><h3 id="核心显卡"><a href="#核心显卡" class="headerlink" title="核心显卡"></a>核心显卡</h3><p>其实也属于集成显卡，但是比较特殊。<br>他是集成在CPU中。<br>普通办公，看看剧就挺合适的。  </p><h3 id="独立显卡"><a href="#独立显卡" class="headerlink" title="独立显卡"></a>独立显卡</h3><p>插在主板的PCI显卡卡槽，价格贵但是高性价比。<br>适合游戏用户  </p><h3 id="双显卡"><a href="#双显卡" class="headerlink" title="双显卡"></a>双显卡</h3><p>其实也比较常见，比如你有核心显卡，但是你又再后续玩游戏时候买了独立显卡。<br>这不就是双显卡了嘛。<br>双卡交火，就是两个独立显卡。  </p><h3 id="显卡的带宽与缓存"><a href="#显卡的带宽与缓存" class="headerlink" title="显卡的带宽与缓存"></a>显卡的带宽与缓存</h3><p>有些内容还是需要装机进行补充的。<br>首先补充下有时候看到吐槽显卡的位宽<br>显卡位宽+缓存决定显卡带宽<br>屏幕的分辨率吧需要更高的显卡带宽<br>显卡的算力还是好玩的。<br>显卡与显示器就是一个池子运到另外的池子里<br>显卡算力是一个池子，算力越高水压越高。<br>带宽是水管的粗细。<br>屏幕那边是通过屏幕的分辨率来决定接头的粗细。<br>如果屏幕的分辨率吧很高4k，那样带宽的水管就比接头细，也就是其实损失了部分的性能，没有完全展现出来显卡的性能。<br>如果一个性能更小，但是带宽更大一些的，岂不是同样时间和上面这个显卡给的水一样多，但是它性能弱啊。  </p><p>根据木桶效应，最终的效果是由最短的那一节来决定的。所以在一定状态下3060 g6x是可以和4060ti 8g打一打的。前者的带宽更高，后者的算力更强，价格也是更高  </p><h3 id="购买建议"><a href="#购买建议" class="headerlink" title="购买建议"></a>购买建议</h3><table><thead><tr><th>品类</th><th>价格</th><th>是否为矿</th><th>推荐与原因</th></tr></thead><tbody><tr><td>3050</td><td>1899</td><td>无矿</td><td>不推荐，&lt;&#x3D;2060 12g但价格更贵</td></tr><tr><td>3060 8g</td><td>2399</td><td>无矿</td><td>不推荐，&lt;&#x3D;2060 12g但价格更贵</td></tr><tr><td>3060 12g</td><td>不清楚</td><td>矿渣</td><td>不推荐</td></tr><tr><td>2060 12g</td><td>新1800，二手1000-1400</td><td>矿渣</td><td>二手900感觉可以搞，矿渣品质</td></tr><tr><td>3060 ti</td><td>2900</td><td>不知道</td><td>好像价格略贵了</td></tr></tbody></table><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>计算机的运算核心与控制核心。  </p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>intel系列</li><li>AMD系列<br>Celeron（赛扬）、Pentium（奔腾）和Core（酷睿）从低端到高端<br>AMD系列：Semporn（闪龙）Athlon（速龙）和 羿龙系列 从低端到高端</li></ul><h3 id="CPU的性能参数"><a href="#CPU的性能参数" class="headerlink" title="CPU的性能参数"></a>CPU的性能参数</h3><ul><li>主频</li><li>外频</li><li>缓存<br>主频就是运算速度<br>外频就是CPU的基准频率。超频就是超过这个外频。<br>缓存的结构和大小非常影响CPU的速度。<br>Intel的CPU型号后面的含义  </li><li>M代表标准电压cpu；</li><li>F不带核显；</li><li>U代表低电压节能的；</li><li>H是高电压的；</li><li>X代表高性能；；</li><li>Q代表至高性能级别；</li><li>Y代表超低电压的；</li><li>K代表不锁倍频的处理器。<br>以上两个字母组合的，含义分别是字母的组合；</li></ul><h1 id="6-18交作业"><a href="#6-18交作业" class="headerlink" title="6.18交作业"></a>6.18交作业</h1><p>目前花费：</p><table><thead><tr><th>种类</th><th>品牌参数</th><th>价格</th><th>来源</th></tr></thead><tbody><tr><td>显示器</td><td>优派 27寸 2k VX2758-2K-PRO</td><td>914</td><td>pdd</td></tr><tr><td>主板+cpu套装</td><td>华硕H610M-a  +  i5 12400散装</td><td>1438</td><td>pdd</td></tr><tr><td>显卡</td><td>耕升RTX3060ti 追风</td><td>2503</td><td>pdd</td></tr><tr><td>内存条</td><td>金百达 音爵 3200频率 16g*2</td><td>355</td><td>pdd</td></tr><tr><td>固态</td><td>宏基掠夺者 1TB</td><td>305.73</td><td>jd</td></tr><tr><td>电源</td><td>长城金牌全模组 750W G7</td><td>437.68</td><td>pdd</td></tr><tr><td>机箱</td><td>小喆优品c2P</td><td>161</td><td>pdd</td></tr><tr><td>风扇</td><td>利民C2C-S白色 *3</td><td>52.4</td><td>pdd</td></tr><tr><td>散热器</td><td>乔思伯CR1400+支架</td><td>89</td><td>pdd</td></tr><tr><td>主板天线与wifi</td><td>英特尔AX210 基础版-8DB</td><td>86</td><td>pdd</td></tr><tr><td>总计</td><td>购买时间：2023-5.31-6.2</td><td>6341.81-50(pdd返现)&#x3D;6291.81</td><td></td></tr></tbody></table><h1 id="事后反思"><a href="#事后反思" class="headerlink" title="事后反思"></a>事后反思</h1><p>购买的时候还是有很多不足的地方在买之前没有考虑，但是实际上还是有很多可以继续深思的地方。<br>比如：</p><ol><li>内存条需要根据主板支持的频率来确定。如果有超频的需要，所以不仅仅是内存条，还要主板好。</li><li>风扇的灯光rgb与argb的区别在于后者是可以编辑灯光颜色的。</li><li>风扇argb需要主板支持argb的编程。</li><li>风扇还要考虑到大小与厚度，这个和机箱的大小息息相关。</li><li>CPU是需要自己购买CPU的散热的。</li><li>主板的接口是固态购买的时候需要相匹配的pcie 3.0与pcie 4.0。</li><li>机箱的选择还是要考虑到电源的大小，主版的大小，显卡的大小。</li><li>这个时间购买就要该下手的时候下手，不然后续很容易后悔</li></ol>]]></content>
      
      
      <categories>
          
          <category> 装机 </category>
          
          <category> 基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> 基本知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-三大泛式</title>
      <link href="/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%89%E5%A4%A7%E6%B3%9B%E5%BC%8F/"/>
      <url>/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%B8%89%E5%A4%A7%E6%B3%9B%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计的三大范式"><a href="#数据库设计的三大范式" class="headerlink" title="数据库设计的三大范式"></a>数据库设计的三大范式</h1><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p>确保每列的原子性，即所有字段不可分解<br>比如如果需要查询地址中的城市，那不能把地址查询出来再分解。<br>应该直接将地址分解后存储在数据库中。  </p><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>确保表中的每列都与主键相关。<br>也就是在一个表中的数据都是与主键相关的。将表分开的原则。<br>在一个表中能用另一个表中的主键表示的地方，就不用自己重复存储。</p><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>确保每列都是与主键直接相关，而不是间接相关。<br>其实也就是在第二范式的基础上，更好，更明确的选择一个表中应该有哪些相关。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 三大范式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 三大范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-基础分类</title>
      <link href="/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9F%BA%E7%A1%80%E5%88%86%E7%B1%BB/"/>
      <url>/2023/03/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%9F%BA%E7%A1%80%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h1><p><a herf="https://cloud.tencent.com/developer/article/1784274">参考博客两者区别详解</a></p><ul><li>关系型数据库（SQL）<ul><li>Oracle</li><li>MySql</li><li>Microsoft SQL Server</li><li>SQLite</li><li>PostgreSQL</li><li>IBM DB2</li></ul></li><li>非关系型数据库（NOSQL）<ul><li>键值数据库：Redis、Memcached、Riak</li><li>列族数据库：Bigtable、HBase、Cassandra</li><li>文档数据库：MongoDB、CouchDB、MarkLogic</li><li>图形数据库：Neo4j、InfoGrid</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 基础分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 基础分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html-基础学习-基本组件</title>
      <link href="/2023/03/12/html-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/03/12/html-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML学习"><a href="#HTML学习" class="headerlink" title="HTML学习"></a>HTML学习</h1><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>这个指示，此处是文档的头部。  </p><pre class="language-none"><code class="language-none">&lt;head&gt;&lt;&#x2F;head&gt;</code></pre><h3 id="1-1-mate"><a href="#1-1-mate" class="headerlink" title="1.1 mate"></a>1.1 mate</h3><p><code>&lt;mate charset=&quot;utf-8&quot;&gt;&lt;/mate&gt;</code><br>meta标签是head部的辅助性标签，提供HTML文档的元数据，不显示在页面上。  </p><h3 id="1-2-title"><a href="#1-2-title" class="headerlink" title="1.2 title"></a>1.2 title</h3><p><code>&lt;title&gt; 网页标题&lt;/title&gt;</code><br/><br>表示网页标题  </p><h2 id="body文档主体标签"><a href="#body文档主体标签" class="headerlink" title="body文档主体标签"></a>body文档主体标签</h2><p><code>&lt;body&gt;&lt;/body&gt;</code></p><h3 id="h标题标签"><a href="#h标题标签" class="headerlink" title="h标题标签"></a>h标题标签</h3><p>从1-6，一般h1用于logo  </p><pre class="language-none"><code class="language-none">&lt;h1&gt; h1 &lt;&#x2F;h1&gt;&lt;h2&gt; h2 &lt;&#x2F;h2&gt;</code></pre><h3 id="p段落标签"><a href="#p段落标签" class="headerlink" title="p段落标签"></a>p段落标签</h3><p>p是paragraph 单词的缩写，就像我们平常写文章一样，整个网页也可以分为若干个段落，每个新的段落都会重开一行写。  </p><pre class="language-none"><code class="language-none">&lt;p&gt;  文本内容  &lt;&#x2F;p&gt; &lt;p align&#x3D;&quot;left&quot;&gt;左对齐&lt;&#x2F;p&gt;      &lt;!--align:对齐方式 left:左对齐--&gt; &lt;p align&#x3D;&quot;center&quot;&gt;居中对齐&lt;&#x2F;p&gt;   &lt;!--center 居中对齐--&gt; &lt;p align&#x3D;&quot;right&quot;&gt;右对齐&lt;&#x2F;p&gt;      &lt;!--right 右对齐--&gt;</code></pre><h3 id="br-x2F-换行标签"><a href="#br-x2F-换行标签" class="headerlink" title="br&#x2F;换行标签"></a>br&#x2F;换行标签</h3><p>这个两个都是换行标签，需要独立使用。<br>区别就是前一个是老的规范。<br>后一个是新的规范，新的规范（W3C&#x2F;&#x2F;DTD HTML   4.0）要求一切都应象XML那样有结束符，如果没有也要硬加一个反斜杠。象br这种不需成对使用的html符号，就成了这个样子：<br/>。<br><code>&lt;br&gt;&lt;br/&gt;</code></p><h3 id="hr-x2F-水平线，分割线"><a href="#hr-x2F-水平线，分割线" class="headerlink" title="hr&#x2F;水平线，分割线"></a>hr&#x2F;水平线，分割线</h3><p><code>&lt;hr/&gt;</code><br>详细解释：hr是horizontal单词的缩写，表示横线。水平线可用于将段落与段落隔开，使得文档结构清晰，层次分明,<hr />是单标签。这些水平线还可以通过插入水平线的图片实现  </p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>两种设置模式  </p><ul><li>内部样式表（style）<br>常见的使用方式。为每个部件使用配置。  </li><li>外部样式表（link）<br>这个常见用于多个网页共同的样式设置。<br>引用外部文件中的css样式两种设置都可以实现  <pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>标签路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class="language-none"><code class="language-none">&lt;style&gt;@import url(&quot;标签路径&quot;)&lt;&#x2F;style&gt;</code></pre>本质上link属于XHTML标签，@import是css提供的一种方式.<br>第二种是在全部加载完毕然后再加载。并且部分老的浏览器不支持这种css再后面提出的引用方式</li></ul><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>另外一种方案,type可以不写的。就像上面这种。因为创始人一开始觉得还有别的编程语言，但是目前来看是没有的。所以可以直接默认就是。<br>另外还要注意的一个地方就是这种使用scr，那就不可以使用上面这种写在两个script中间的方法。写了也会被忽略掉。  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/example.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="noscript"><a href="#noscript" class="headerlink" title="noscript"></a>noscript</h4><p>&lt;noscript&gt; 标签提供无法使用脚本时的替代内容，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。  </p><p>&lt;noscript&gt;元素可包含普通 HTML 页面的 body 元素中能够找到的所有元素。  </p><p>只有在浏览器不支持脚本或者禁用脚本时，才会显示 &lt;noscript&gt; 元素中的内容：  </p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>抱歉，你的浏览器不支持 JavaScript!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span></code></pre><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><h4 id="div"><a href="#div" class="headerlink" title="div"></a>div</h4><h4 id="span"><a href="#span" class="headerlink" title="span"></a>span</h4><h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>在一个页面只能被调用一次，优先度更高<br><code>#id_name&#123;&#125;</code><br>用法：\n</p><pre class="language-markup" data-language="markup"><code class="language-markup">id="id_name"</code></pre><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><pre class="language-markup" data-language="markup"><code class="language-markup">.class_name&#123;&#125;</code></pre><p>用法：\n</p><pre class="language-markup" data-language="markup"><code class="language-markup">class="class_name"</code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> 基础组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 基础组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html-css-[inline-block]</title>
      <link href="/2023/03/12/html-css-inline-block/"/>
      <url>/2023/03/12/html-css-inline-block/</url>
      
        <content type="html"><![CDATA[<h1 id="Html-css知识。"><a href="#Html-css知识。" class="headerlink" title="Html-css知识。"></a>Html-css知识。</h1><h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2> <pre class="language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span></code></pre><p>在inline-block情况下，虽然可以设置每个div的大小。<br>但是默认它们是会按照下方的基准线作为标准的，<br>所以可以调整基准线，让他们上方齐平<br> vertical-align: top;  </p><h2 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h2><p> 单向绑定，主要用于父组件给子组件来传值。<br> 单向绑定：父组件的改变子组件可以接收到。但是子组件的修改父组件不改变。<br> 使用方法<br> <pre class="language-markup" data-language="markup"><code class="language-markup"> //父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span> //子组件Vue.component('child', &#123;  ...  // 成功接收  props: ['type']  ...&#125;)</code></pre><br> 既然是单项绑定，那肯定是不希望子组件去改变的。毕竟你改变了，父组件一改变岂不是白给。所以一般用法上是赋值给本地的属性。<br> <pre class="language-markup" data-language="markup"><code class="language-markup">props: ['message'],data () &#123;  return &#123;    mes: this.message  &#125;&#125;</code></pre><br>另外，自认为这个最常用的属性就是用于校验。<br>校验值是否为空等。但是还有的就是赋值了。  </p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
          <category> css </category>
          
          <category> inline-block </category>
          
          <category> prop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> inline-block </tag>
            
            <tag> prop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS与域名解析</title>
      <link href="/2023/03/12/DNS%E4%B8%8E%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/03/12/DNS%E4%B8%8E%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS与域名解析"><a href="#DNS与域名解析" class="headerlink" title="DNS与域名解析"></a>DNS与域名解析</h1><p>域名解析流程。</p><ul><li>当用户在浏览器中输入<a href="http://www.qq.com域名访问该网站时,操作系统会先检查自己本地的hosts文件是否有这个网址映射关系,如果有,就先调用这个ip地址映射,完成域名解析/">www.qq.com域名访问该网站时，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析</a></li><li>如果hosts里个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li><li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，没有这首先会找TCP&#x2F;ip参数中设置的首选DNS服务器，即本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性</li><li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就会开始迭代查询：把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com主机/">www.qq.com主机</a></li><li>如果用的是转发模式，本地DNS服务器就会开始递归查询：把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-截取字节数组</title>
      <link href="/2023/03/12/C-%E6%88%AA%E5%8F%96%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/12/C-%E6%88%AA%E5%8F%96%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>字节数组截取与转换其他类型</p><h1 id="截取字节数组"><a href="#截取字节数组" class="headerlink" title="截取字节数组"></a>截取字节数组</h1><h2 id="方法一-截取位数规则"><a href="#方法一-截取位数规则" class="headerlink" title="方法一 截取位数规则"></a>方法一 截取位数规则</h2><h3 id="截取2位长度的字节数组"><a href="#截取2位长度的字节数组" class="headerlink" title="截取2位长度的字节数组"></a>截取2位长度的字节数组</h3><p>用BitConverter.ToInt16<br>例如，从第2位开始截取2个字节则 BitConverter.ToInt16(bt,2)；</p><h3 id="截取4位长度的字节数组"><a href="#截取4位长度的字节数组" class="headerlink" title="截取4位长度的字节数组"></a>截取4位长度的字节数组</h3><p>用BitConverter.ToInt32<br>例如，从第3位开始截取4个字节则 BitConverter.ToInt32(bt,3)；</p><h3 id="截取8位长度的字节数组"><a href="#截取8位长度的字节数组" class="headerlink" title="截取8位长度的字节数组"></a>截取8位长度的字节数组</h3><p>用BitConverter.ToInt64<br>例如，从第4位开始截取8个字节则 BitConverter.ToInt64(bt,4)；</p><h2 id="方法二-截取的位数不规则"><a href="#方法二-截取的位数不规则" class="headerlink" title="方法二 截取的位数不规则"></a>方法二 截取的位数不规则</h2><p>使用方法：<br>b.Skip(x).Take(y).ToArray()\n<br>例如，从第2位开始截取4个字节则 bt.Skip(2).Take(4).ToArray()；\n<br>注意这中间是使用int十进制类型，十六进制也可以的。但是直接使用字节形式也可以（即隐式转换成十进制类型），但是需要注意你原来的表示长度的数据是否真实的长度（比如是用ASCII表示的数字与直接十进制表示的长度是不一样的）。</p><h1 id="字节数组转换"><a href="#字节数组转换" class="headerlink" title="字节数组转换"></a>字节数组转换</h1><h2 id="BitConverter类"><a href="#BitConverter类" class="headerlink" title="BitConverter类"></a>BitConverter类</h2><p>这个方案可以很方便的转换一些数组，但是有些内容需要注意  </p><ul><li>BitConverter.ToInt32()需要四个字节的数组长度，不然会报错\n</li><li>BitConverter.ToString()这个单个字节就可以，但是他是直接转化，比如原来是 0x32他就会转成50.如果是使用ASCII来进行编译。需要使用System.Text.Encoding.ASCII.GetString(str)来帮助进行转化。\n</li></ul><h2 id="System-Text-Encoding-ASCII-GetString（）"><a href="#System-Text-Encoding-ASCII-GetString（）" class="headerlink" title="System.Text.Encoding.ASCII.GetString（）"></a>System.Text.Encoding.ASCII.GetString（）</h2><p>这个也可以将字节数组转换成string类型，但是这个是直接使用ASCII表示的字符的数字转换成为对应的ASCII表中对应的字符\n<br>例如0x32表示数字2,0x表示十六进制0x32即十进制的50</p><h2 id="负数转换进两个字节表示"><a href="#负数转换进两个字节表示" class="headerlink" title="负数转换进两个字节表示"></a>负数转换进两个字节表示</h2><p>通过与运算来实现.<br>支持的数字范围-32768到32767\n</p><pre class="language-none"><code class="language-none">int fushu &#x3D; 32767;byte[] b1&#x3D; new byte[] &#123;  (byte)(fushu &amp; 0x00ff),(byte)(fushu &gt;&gt; 8) &#125;;Console.WriteLine(BitConverter.ToInt16(b1));&#x2F;&#x2F;部分版本中不支持这个写法，但是支持下个写法。&#x2F;&#x2F;Console.WriteLine(BitConverter.ToInt16(new byte[] &#123;b[0],b[1]&#125;,0));</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hepler </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> 字节数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-字节数组格式转换</title>
      <link href="/2023/03/12/C-%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/03/12/C-%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="字节数组格式转换"><a href="#字节数组格式转换" class="headerlink" title="字节数组格式转换"></a>字节数组格式转换</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文内容主要是关于怎么将字节数组转换成int，string，float等类型<br>主要的方案就是<br><code>BitConverter.GetBytes(true);</code><br>与<br><code>BitConverter.To***(true);</code><br>有的时候有用的方案<br><code>Encoding.UTF8.GetString()</code><br>需要注意点  </p><ul><li>BitConverter.ToInt16（）这一类都是固定几个字节，比如ToInt16固定一次读取两个字节. </li><li>BitConverter.ToInt16（）转化出来是从低字节到高字节。例如<code>202</code>转化成为<code>[CA] [00]</code>,而不是[00][CA]  </li><li>BitConverter.ToString()这个方案有问题，他是直接强行转换成对应的字符串，不考虑是否具有特殊的编码方案。比如Encoding.UTF8.GetString()这样是具有编码方法的方法。  </li><li>BitConverter.GetBytes()支持直接写入负数（比如-1）,但是byte一般来说默认是正数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hepler </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> 字节数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-TCP_Client-学习日志（7）</title>
      <link href="/2022/11/23/C-TCP-Client-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%887%EF%BC%89/"/>
      <url>/2022/11/23/C-TCP-Client-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%887%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h1><p>tcpClent</p><pre class="language-none"><code class="language-none">using System;using System.Collections.Generic;using System.Net;using System.Net.Sockets;using System.Text;using System.Threading;namespace Test.TCPClient&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            &#x2F;&#x2F;socket            Socket tcpClient &#x3D; new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);            &#x2F;&#x2F;ip            IPAddress ipAddress &#x3D; new IPAddress(new byte[] &#123; 127, 0, 0, 1 &#125;);            &#x2F;&#x2F;ip + Port(端口)            IPEndPoint ipEndPoint &#x3D; new IPEndPoint(ipAddress, 30000);            &#x2F;&#x2F;连接服务器端            tcpClient.Connect(ipEndPoint);            Console.WriteLine(&quot;链接上服务器端了&quot;);            &#x2F;&#x2F;向服务器发送消息            &#x2F;&#x2F;转码为byte字节发送            try &#123;                Thread.Sleep(5000);                tcpClient.SendTimeout &#x3D; 2000;                int a&#x3D;tcpClient.Send(Encoding.UTF8.GetBytes(&quot;我连接上了&quot;));            &#125;            catch(Exception ex)            &#123;                Console.WriteLine($&quot;&#123;ex&#125;&quot;);            &#125;                        &#x2F;&#x2F;分配1024个字节大小的内存给message            byte[] message &#x3D; new byte[1024];            tcpClient.ReceiveTimeout &#x3D; 2000;            int length&#x3D;0;            &#x2F;&#x2F;接收消息            try            &#123;                length &#x3D; tcpClient.Receive(message);            &#125;            catch(Exception ex)            &#123;                if(ex.Message&#x3D;&#x3D;  &quot;由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。&quot;)                &#123;                    Console.WriteLine(&quot;1053&quot;);                &#125;                var a&#x3D;ex.InnerException;                var b&#x3D;ex.GetHashCode();                if (ex.HResult &#x3D;&#x3D; 1053)                &#123;                    Console.WriteLine(&quot;1053&quot;);                &#125;            &#125;                        &#x2F;&#x2F;转码为string接收            string data &#x3D; Encoding.UTF8.GetString(message, 0, length);            Console.WriteLine(&quot;收到服务器消息：&quot; + data);            &#x2F;&#x2F;关闭Socket            tcpClient.Close();            Console.WriteLine(&quot;Hello World!&quot;);        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-TCP_server-学习日志（7）</title>
      <link href="/2022/11/23/C-TCP-server-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%887%EF%BC%89/"/>
      <url>/2022/11/23/C-TCP-server-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%887%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="TCPServer"><a href="#TCPServer" class="headerlink" title="TCPServer"></a>TCPServer</h1><pre class="language-none"><code class="language-none">public void TcpListen()&#123;    try    &#123;       myIP &#x3D; IPAddress.Parse(&quot;127.0.0.1&quot;);&#x2F;&#x2F;要using System.Net        IPEndPoint MyServer &#x3D; new IPEndPoint(myIP, 30000);        socketWatch &#x3D; new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);        socketWatch.Bind(MyServer);        &#x2F;&#x2F;最大连接数        socketWatch.Listen(10);        StartListern(socketWatch);    &#125;    catch (Exception ex)    &#123;        throw ex;    &#125;&#125;</code></pre><pre class="language-none"><code class="language-none">private void StartListern(Socket socket)&#123;    while (true)    &#123;        &#x2F;&#x2F;表示接收到信息        Socket socketConnect &#x3D; socket.Accept();        byte[] bytes &#x3D; new byte[1024 * 1024];                Task.Run(() &#x3D;&gt;        &#123;            int reciveLength &#x3D; socketConnect.Receive(bytes);            string reciveString &#x3D; Encoding.Default.GetString(bytes);            Console.WriteLine(reciveString);            byte[] sendbytes &#x3D; Encoding.Default.GetBytes(&quot;收到请返回&quot;);            socketConnect.Send(sendbytes);        &#125;);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-RPC_Server-学习日志（6）</title>
      <link href="/2022/11/23/C-RPC-Server-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/"/>
      <url>/2022/11/23/C-RPC-Server-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-RPC通用版本"><a href="#C-RPC通用版本" class="headerlink" title="C#-RPC通用版本"></a>C#-RPC通用版本</h1><p>双方约定好的程序有哪些</p><pre class="language-none"><code class="language-none">class XmlService : XmlRpcListenerService&#123;    [XmlRpcMethod(&quot;XmlService.Add&quot;)]    public int Add(int a, int b)    &#123;        return a + b;    &#125;&#125;</code></pre><p>[XMLRpcMethod(“**”)]server具有的函数的名称\n</p><pre class="language-none"><code class="language-none">public class Service&#123;    System.Collections.IDictionary props &#x3D; new System.Collections.Hashtable();    HttpChannel channel;    public Service()    &#123;        props[&quot;name&quot;] &#x3D; &quot;localhost&quot;;        props[&quot;port&quot;] &#x3D; 7762;        channel &#x3D; new HttpChannel(props, null, new XmlRpcServerFormatterSinkProvider());    &#125;    public bool ServiceStart()    &#123;        try        &#123;            Logger.WriteLog(&quot;服务准备开启&quot;);            ServiceHelper.WriteInfo(DateTime.Now + &quot;服务准备开启&quot;);            ChannelServices.RegisterChannel(channel, false);            RemotingConfiguration.RegisterWellKnownServiceType(typeof(XmlService), &quot;XmlService.rem&quot;, WellKnownObjectMode.Singleton);            return true;        &#125;        catch        &#123;            Logger.WriteLog(DateTime.Now+&quot;XML-RPC服务开启失败&quot;);            ServiceHelper.WriteInfo(&quot;XML-RPC服务开启失败&quot;);            return false;        &#125;    &#125;    public void ServiceStop()    &#123;        ChannelServices.UnregisterChannel(channel);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-RPC_Client-学习日志（6）</title>
      <link href="/2022/11/23/C-RPC-Client-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/"/>
      <url>/2022/11/23/C-RPC-Client-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="C-RPC-Client"><a href="#C-RPC-Client" class="headerlink" title="C#-RPC-Client"></a>C#-RPC-Client</h1><pre class="language-C#" data-language="C#"><code class="language-C#">[XmlRpcUrl(&quot;http:&#x2F;&#x2F;localhost:7762&#x2F;XmlService.rem&quot;)]public interface IXmlServer : IXmlRpcProxy&#123;    [XmlRpcMethod(&quot;XmlService.Add&quot;)]    int Add(int a, int b);&#125;</code></pre><pre class="language-C#" data-language="C#"><code class="language-C#">static void Main(string[] args)&#123;    try    &#123;        IXmlServer proxy &#x3D; XmlRpcProxyGen.Create&lt;IXmlServer&gt;();        Console.WriteLine(&quot;Synchronous call：&quot;);        Console.WriteLine(&quot;state #45 is &#123;0&#125;&quot;, proxy.Add(12,34));    &#125;    catch (XmlRpcFaultException fex)    &#123;        Console.WriteLine(fex.FaultString);    &#125;    catch (Exception ex)    &#123;        Console.WriteLine(ex.Message);    &#125;    Console.WriteLine(&quot;到此结束&quot;);    Console.ReadLine();&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Helper </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-CsvHelper-学习日志（6）</title>
      <link href="/2022/11/23/C-CsvHelper-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/"/>
      <url>/2022/11/23/C-CsvHelper-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>CsvHelper 是一个用于读写 CSV 文件的.NET库。极其快速，灵活且易于使用。\n</p><p>CsvHelper 建立在.NET Standard 2.0 之上，几乎可以在任何地方运行。\n<br>CsvHelper可以通过Nuget安装。</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>CsvHelper</td><td>读写 CSV 数据的核心类。</td></tr><tr><td>CsvHelper.Configuration</td><td>配置 CsvHelper 读写行为的类。</td></tr><tr><td>CsvHelper.Configuration.Attributes</td><td>配置 CsvHelper 的特性。</td></tr><tr><td>CsvHelper.Expressions</td><td>生成 LINQ 表达式的类。</td></tr><tr><td>CsvHelper.TypeConversion</td><td>将 CSV 字段与 .NET 类型相互转换的类。</td></tr></tbody></table><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h1><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre class="language-none"><code class="language-none">public class Foo&#123;    public int ID &#123; get; set; &#125;    public string Name &#123; get; set; &#125;&#125;</code></pre><h2 id="写入所有数据"><a href="#写入所有数据" class="headerlink" title="写入所有数据"></a>写入所有数据</h2><p>覆盖掉之前的数据。</p><pre class="language-none"><code class="language-none">var records &#x3D; new List&lt;Foo&gt;&#123;    new Foo &#123; ID &#x3D; 1, Name &#x3D; &quot;Tom&quot; &#125;,    new Foo &#123; ID &#x3D; 2, Name &#x3D; &quot;Jerry&quot; &#125;,&#125;;using (var writer &#x3D; new StreamWriter(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvWriter(writer, CultureInfo.InvariantCulture))    &#123;        csv.WriteRecords(records);    &#125;&#125;</code></pre><h2 id="逐条写入"><a href="#逐条写入" class="headerlink" title="逐条写入"></a>逐条写入</h2><p>默认没有换行与标题\n</p><pre class="language-none"><code class="language-none">using (var writer &#x3D; new StreamWriter(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvWriter(writer, CultureInfo.InvariantCulture))    &#123;        foreach (var record in records)        &#123;            csv.WriteRecord(record);        &#125;    &#125;&#125;</code></pre><p>逐条写入加入标题，并且添加换行。</p><pre class="language-none"><code class="language-none">using (var writer &#x3D; new StreamWriter(&quot;Test.csv&quot;))&#123;    using (var csv &#x3D; new CsvWriter(writer, CultureInfo.InvariantCulture))    &#123;        &#x2F;&#x2F;单独写一行的时候，不会自动添加Header，并且写一行（Header或者数据）都不会自动换行，需要手动换行。        csv.WriteHeader&lt;Person&gt;();&#x2F;&#x2F;写Header        csv.NextRecord();&#x2F;&#x2F;写Header后换行        foreach (var record in records)        &#123;            csv.WriteRecord(record);            csv.NextRecord();            &#x2F;&#x2F;csv.WriteRecord(record);        &#125;    &#125;&#125;</code></pre><p>注意这个写法是覆盖掉原来文件，还可以追加写入。var writer &#x3D; new StreamWriter(“Test.csv”)的第二个参数改为true，就是追加写入。注意标题不要重复输入。</p><h2 id="逐字段写入"><a href="#逐字段写入" class="headerlink" title="逐字段写入"></a>逐字段写入</h2><pre class="language-none"><code class="language-none">using (var writer &#x3D; new StreamWriter(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvWriter(writer, CultureInfo.InvariantCulture))    &#123;        csv.WriteHeader&lt;Foo&gt;();        csv.NextRecord();        foreach (var record in records)        &#123;            csv.WriteField(record.ID);            csv.WriteField(record.Name);            csv.NextRecord();        &#125;    &#125;&#125;</code></pre><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><h2 id="读取所有记录"><a href="#读取所有记录" class="headerlink" title="读取所有记录"></a>读取所有记录</h2><pre class="language-none"><code class="language-none">using (var reader &#x3D; new StreamReader(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvReader(reader, CultureInfo.InvariantCulture))    &#123;        var records &#x3D; csv.GetRecords&lt;Foo&gt;();    &#125;&#125;</code></pre><h2 id="逐条读取"><a href="#逐条读取" class="headerlink" title="逐条读取"></a>逐条读取</h2><pre class="language-none"><code class="language-none">using (var reader &#x3D; new StreamReader(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvReader(reader, CultureInfo.InvariantCulture))    &#123;        while (csv.Read())        &#123;            var record &#x3D; csv.GetRecord&lt;Foo&gt;();        &#125;    &#125;&#125;</code></pre><pre><code>GetRecords&lt;T&gt; 方法通过 yield 返回一个 IEnumerable&lt;T&gt;，并不会将内容一次全部读进内存，除非调用了 ToList 或 ToArray 方法。所以这种逐条读取的写法没有太多必要。</code></pre><h2 id="读取单个字段"><a href="#读取单个字段" class="headerlink" title="读取单个字段"></a>读取单个字段</h2><p>两种方案，一种根据index，另一种根据标题。</p><pre class="language-none"><code class="language-none">using (var csv &#x3D; new CsvReader(reader, CultureInfo.InvariantCulture))&#123;    csv.Read();    csv.ReadHeader();    while (csv.Read())    &#123;    &#x2F;&#x2F;方案1        var id &#x3D; csv.GetField&lt;int&gt;(0);        &#x2F;&#x2F;方案2        var name &#x3D; csv.GetField&lt;string&gt;(&quot;Name&quot;);    &#125;&#125;</code></pre><p>逐行读取时，可以不管标题行，但是，这里不行。\n</p><p>csv.Read(); 这句是读取标题，如果没有的话，while 循环第一次取到的是标题，肯定会报错。\n</p><p>csv.ReadHeader(); 这句是给标题赋值，如果没有的话，csv.GetField<string>(“Name”) 会报找不到标题。\n<br>使用 TryGetField 可以防止意外的报错。\n<br><code>csv.TryGetField(0, out int id);</code></p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p><em>Index</em>特性用于标记字段顺序。<br>在读取文件时候，如果没有标题，就只能通过顺序来确定字段。</p><pre class="language-none"><code class="language-none">public class Foo&#123;    [Index(0)]    public int ID &#123; get; set; &#125;    [Index(1)]    public string Name &#123; get; set; &#125;&#125;using (var reader &#x3D; new StreamReader(&quot;Test.csv&quot;))&#123;    var config &#x3D; new CsvConfiguration(CultureInfo.InvariantCulture)    &#123;        HasHeaderRecord &#x3D; false,    &#125;;    using (var csv &#x3D; new CsvReader(reader, config))    &#123;        var records_IEnumable &#x3D; csv.GetRecords&lt;Foo&gt;();    &#125;&#125;</code></pre><blockquote><p>HasHeaderRecord &#x3D; false, 配置告知 CsvReader 没有标题。必须要加这一行，否则会默认第一行为标题而跳过，导致最后的结果中少了一行。如果数据量比较多，会很难发现这个 bug。当位true的时候，但是找不到合适的标题，则会报错。<br>在写入文件的时候，会按 Index 顺序写入。如果不想写入标题，也需要添加 HasHeaderRecord &#x3D; false;\n<br>以下写法已经被弃用。</p></blockquote><pre class="language-none"><code class="language-none">public class Foo&#123;    [Index(0)]    public int ID &#123; get; set; &#125;    [Index(1)]    public string Name &#123; get; set; &#125;&#125;    using (var reader &#x3D; new StreamReader(&quot;foo.csv&quot;))&#123;    using (var csv &#x3D; new CsvReader(reader, CultureInfo.InvariantCulture))    &#123;        csv.Configuration.HasHeaderRecord &#x3D; false;        var records &#x3D; csv.GetRecords&lt;Foo&gt;().ToList();    &#125;&#125;</code></pre><h2 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h2><p>如果字段名称和列名不一致，可以使用 Name 属性。\n</p><pre class="language-none"><code class="language-none">public class Foo&#123;    [Name(&quot;id&quot;)]    public int ID &#123; get; set; &#125;    [Name(&quot;name&quot;)]    public string Name &#123; get; set; &#125;&#125;</code></pre><h2 id="NameIndex"><a href="#NameIndex" class="headerlink" title="NameIndex"></a>NameIndex</h2><p>NameIndex 用于处理 CSV 文件中的同名列。</p><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [Name(&quot;Name&quot;)]    [NameIndex(0)]    public string FirstName &#123; get; set; &#125;    [Name(&quot;Name&quot;)]    [NameIndex(1)]    public string LastName &#123; get; set; &#125;&#125;</code></pre><h2 id="Ignore"><a href="#Ignore" class="headerlink" title="Ignore"></a>Ignore</h2><p>忽略字段</p><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>读取时如果找不到匹配的字段，则忽略。</p><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [Optional]    public string Remarks &#123; get; set; &#125;&#125;</code></pre><h2 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h2><p>当读取的字段为空时 Default 特性可为其指定默认值。\n</p><p>Default 特性仅在读取时有效，写入时是不会将空值替换为默认值写入的。\n</p><h2 id="NullValues"><a href="#NullValues" class="headerlink" title="NullValues"></a>NullValues</h2><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [NullValues(&quot;None&quot;, &quot;none&quot;, &quot;Null&quot;, &quot;null&quot;)]    public string None &#123; get; set; &#125;&#125;</code></pre><p>读取文件时，若 CSV 文件中某字段的值为空，那么读取后的值是 “”，而非 null，标记 NullValues 特性后，若 CSV 文件中的某字段值为 NullValues 指定的值，则读取后为 null。</p><p>若同时标记了 Default 特性，则此特性不起作用。</p><blockquote><p>坑爹的是，在写入文件时，此特性并不起作用。因此会引起读写不一致的问题。</p></blockquote><h2 id="Constant"><a href="#Constant" class="headerlink" title="Constant"></a>Constant</h2><p>Constant 特性为字段指定一个常量值，读写时都使用此值，无论指定了什么其他映射或配置。</p><h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p>Format 指定类型转换时使用的字符串格式。\n</p><p>例如数字和时间类型，我们经常会指定其格式。\n</p><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [Format(&quot;0.00&quot;)]    public decimal Amount &#123; get; set; &#125;    [Format(&quot;yyyy-MM-dd HH:mm:ss&quot;)]    public DateTime JoinTime &#123; get; set; &#125;&#125;</code></pre><h2 id="BooleanTrueValues-和-BooleanFalseValues"><a href="#BooleanTrueValues-和-BooleanFalseValues" class="headerlink" title="BooleanTrueValues 和 BooleanFalseValues"></a>BooleanTrueValues 和 BooleanFalseValues</h2><p>这两个特性用于将 bool 转换成指定的形式显示。</p><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [BooleanTrueValues(&quot;yes&quot;)]    [BooleanFalseValues(&quot;no&quot;)]    public bool Vip &#123; get; set; &#125;&#125;</code></pre><h2 id="NumberStyles"><a href="#NumberStyles" class="headerlink" title="NumberStyles"></a>NumberStyles</h2><pre class="language-none"><code class="language-none">public class Foo&#123;    ...    [Format(&quot;X2&quot;)]    [NumberStyles(NumberStyles.HexNumber)]    public int Data &#123; get; set; &#125;&#125;</code></pre><p>比较有用是 NumberStyles.HexNumber 和 NumberStyles.AllowHexSpecifier，这两个枚举的作用差不多。此特性仅在读取时有效，写入时并不会转成 16 进制写入。这会导致读写不一致，可以用 Format 特性指定写入格式。</p><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>如果无法给要映射的类添加特性，在这种情况下，可以使用 ClassMap 方式进行映射。\n</p><p>使用映射和使用特性效果是一样的，坑爹的地方也一样坑爹。以下示例用属性实现了上面特性的功能。\n</p><pre class="language-none"><code class="language-none">public class Foo2&#123;    public int ID &#123; get; set; &#125;    public string Name &#123; get; set; &#125;    public decimal Amount &#123; get; set; &#125;    public DateTime JoinTime &#123; get; set; &#125;    public string Msg &#123; get; set; &#125;    public string Msg2 &#123; get; set; &#125;    public bool Vip &#123; get; set; &#125;    public string Remarks &#123; get; set; &#125;    public string None &#123; get; set; &#125;    public int Data &#123; get; set; &#125;&#125;public class Foo2Map : ClassMap&lt;Foo2&gt;&#123;    public Foo2Map()    &#123;        Map(m &#x3D;&gt; m.ID).Index(0).Name(&quot;id&quot;);        Map(m &#x3D;&gt; m.Name).Index(1).Name(&quot;name&quot;);        Map(m &#x3D;&gt; m.Amount).TypeConverterOption.Format(&quot;0.00&quot;);        Map(m &#x3D;&gt; m.JoinTime).TypeConverterOption.Format(&quot;yyyy-MM-dd HH:mm:ss&quot;);        Map(m &#x3D;&gt; m.Msg).Default(&quot;Hello&quot;);        Map(m &#x3D;&gt; m.Msg2).Ignore();        Map(m &#x3D;&gt; m.Vip)            .TypeConverterOption.BooleanValues(true, true, new string[] &#123; &quot;yes&quot; &#125;)            .TypeConverterOption.BooleanValues(false, true, new string[] &#123; &quot;no&quot; &#125;);        Map(m &#x3D;&gt; m.Remarks).Optional();        Map(m &#x3D;&gt; m.None).TypeConverterOption.NullValues(&quot;None&quot;, &quot;none&quot;, &quot;Null&quot;, &quot;null&quot;);        Map(m &#x3D;&gt; m.Data)            .TypeConverterOption.NumberStyles(NumberStyles.HexNumber)            .TypeConverterOption.Format(&quot;X2&quot;);    &#125;&#125;</code></pre><p>在使用映射前，需要先注册</p><pre class="language-none"><code class="language-none">csv.Configuration.RegisterClassMap&lt;Foo2Map&gt;();</code></pre><h2 id="ConvertUsing"><a href="#ConvertUsing" class="headerlink" title="ConvertUsing"></a>ConvertUsing</h2><p>ConvertUsing 允许使用一个委托方法实现类型转换。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 常数Map(m &#x3D;&gt; m.Constant).ConvertUsing(row &#x3D;&gt; 3);&#x2F;&#x2F; 把两列聚合在一起Map(m &#x3D;&gt; m.Name).ConvertUsing(row &#x3D;&gt; $&quot;&#123;row.GetField&lt;string&gt;(&quot;FirstName&quot;)&#125; &#123;row.GetField&lt;string&gt;(&quot;LastName&quot;)&#125;&quot;);Map(m &#x3D;&gt; m.Names).ConvertUsing(row &#x3D;&gt; new List&lt;string&gt; &#123; row.GetField&lt;string&gt;(&quot;Name&quot;) &#125; );</code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Delimiter"><a href="#Delimiter" class="headerlink" title="Delimiter"></a>Delimiter</h2><p>分隔符</p><pre class="language-none"><code class="language-none">Delimiter &#x3D; &quot;,&quot;;</code></pre><h2 id="HasHeaderRecord"><a href="#HasHeaderRecord" class="headerlink" title="HasHeaderRecord"></a>HasHeaderRecord</h2><p>此配置前文已经提到过，是否将第一行作为标题</p><pre class="language-none"><code class="language-none">HasHeaderRecord &#x3D; false;</code></pre><h2 id="IgnoreBlankLines"><a href="#IgnoreBlankLines" class="headerlink" title="IgnoreBlankLines"></a>IgnoreBlankLines</h2><p>是否忽略空行，默认 true<br><code>csv.Configuration.IgnoreBlankLines = false; </code></p><h2 id="AllowComments"><a href="#AllowComments" class="headerlink" title="AllowComments"></a>AllowComments</h2><p>是否允许注释，注释以 # 开头。<br><code>csv.Configuration.AllowComments = true; </code></p><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><p>获取或设置用于表示注释掉的行的字符。默认是 #。<br><code>csv.Configuration.Comment = &#39;/&#39;; </code></p><h2 id="BadDataFound"><a href="#BadDataFound" class="headerlink" title="BadDataFound"></a>BadDataFound</h2><p>设置一个函数，该函数会在数据不正确时触发，可用于记录日志。</p><h2 id="IgnoreQuotes"><a href="#IgnoreQuotes" class="headerlink" title="IgnoreQuotes"></a>IgnoreQuotes</h2><p>获取或设置一个值，该值指示在解析时是否应忽略引号并将其与其他任何字符一样对待。\n</p><p>默认是 false，如果字符串中有引号，必须是 3 个 “ 连在一起，读取到的字符串中才会有一个 “，如果是 1 个则忽略，2 个则报错。\n</p><p>如果为 true，则会将 “ 当做字符串原样返回。\n</p><p><code>csv.Configuration.IgnoreQuotes = true;</code></p><p>CsvWriter 中是没有这个属性的，一旦字符串中包含 “，写出来就是 3 个 “ 连在一起。\n</p><h2 id="TrimOptions"><a href="#TrimOptions" class="headerlink" title="TrimOptions"></a>TrimOptions</h2><p>去除字段首尾空格<br><code>csv.Configuration.TrimOptions = TrimOptions.Trim;</code></p><h2 id="PrepareHeaderForMatch"><a href="#PrepareHeaderForMatch" class="headerlink" title="PrepareHeaderForMatch"></a>PrepareHeaderForMatch</h2><p>PrepareHeaderForMatch 定义了属性名称与标题进行匹配的函数。标题和属性名称均通过该函数运行。此功能可用于删除标题中的空格，或者当标题和属性名称大小写不一致时统一大小写后比较。\n</p><pre class="language-none"><code class="language-none">csv.Configuration.PrepareHeaderForMatch &#x3D; (string header, int index) &#x3D;&gt; header.ToLower();</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hepler </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Csv </tag>
            
            <tag> Hepler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#-Attribute-学习日志（5）</title>
      <link href="/2022/11/23/C-Attribute-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%885%EF%BC%89/"/>
      <url>/2022/11/23/C-Attribute-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Attribute概述"><a href="#Attribute概述" class="headerlink" title="Attribute概述"></a>Attribute概述</h1><p>特性本质上是用来给代码添加额外信息的一种手段，它可以应用于类、结构、方法、构造函数等。在 C# 中，特性是继承自 Attribute 基类的类。所有继承自 Attribute 的类都可以用作给代码添加额外信息。</p><h1 id="预定义特性"><a href="#预定义特性" class="headerlink" title="预定义特性"></a>预定义特性</h1><p>一共有三种预定义的特性</p><ul><li>AttributeUsage</li><li>Conditional</li><li>Obsolete</li></ul><h2 id="AttributeUsage"><a href="#AttributeUsage" class="headerlink" title="AttributeUsage"></a>AttributeUsage</h2><p>描述了如何使用一个自定义特性类。\n<br>规定了特性可以应用到的项目的类型\n</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法如下</p><pre class="language-none"><code class="language-none">[AttributeUsage(   validon,   AllowMultiple&#x3D;allowmultiple,   Inherited&#x3D;inherited)]</code></pre><p>其中\n</p><ul><li>参数 validon 规定特性可被放置的语言元素。它是枚举器 AttributeTargets 的值的组合。默认值是 AttributeTargets.All。</li><li>参数 allowmultiple（可选的）为该特性的 AllowMultiple 属性（property）提供一个布尔值。如果为 true，则该特性是多用的。默认值是 false（单用的）。</li><li>参数 inherited（可选的）为该特性的 Inherited 属性（property）提供一个布尔值。如果为 true，则该特性可被派生类继承。默认值是 false（不被继承）。</li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="language-none"><code class="language-none">[AttributeUsage(AttributeTargets.Class |AttributeTargets.Constructor |AttributeTargets.Field |AttributeTargets.Method |AttributeTargets.Property, AllowMultiple &#x3D; true)]</code></pre><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="Conditional"></a>Conditional</h2><p>这个预定义特性标记了一个条件方法，其执行依赖于指定的预处理标识符。\n</p><p>它会引起方法调用的条件编译，取决于指定的值，比如 Debug 或 Trace。例如，当调试代码时显示变量的值。\n</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>规定该特性的语法如下：\n</p><pre class="language-none"><code class="language-none">[Conditional(   conditionalSymbol)]</code></pre><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="language-none"><code class="language-none">#define DEBUGusing System;using System.Diagnostics;public class Myclass&#123;    [Conditional(&quot;DEBUG&quot;)]    public static void Message(string msg)    &#123;        Console.WriteLine(msg);    &#125;&#125;class Test&#123;    static void function1()    &#123;        Myclass.Message(&quot;In Function 1.&quot;);        function2();    &#125;    static void function2()    &#123;        Myclass.Message(&quot;In Function 2.&quot;);    &#125;    public static void Main()    &#123;        Myclass.Message(&quot;In Main function.&quot;);        function1();        Console.ReadKey();    &#125;&#125;</code></pre><p>当上面的代码被编译与执行，会有如下效果：</p><pre class="language-none"><code class="language-none">In Main functionIn Function 1In Function 2</code></pre><h2 id="Obsolete"><a href="#Obsolete" class="headerlink" title="Obsolete"></a>Obsolete</h2><p>这个预定义特性标记了不应被使用的程序实体。它可以让您通知编译器丢弃某个特定的目标元素。例如，当一个新方法被用在一个类中，但是您仍然想要保持类中的旧方法，您可以通过显示一个应该使用新方法，而不是旧方法的消息，来把它标记为 obsolete（过时的）。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>规定该特性的语法如下：</p><pre class="language-none"><code class="language-none">[Obsolete(   message)][Obsolete(   message,   iserror)]</code></pre><p>其中：\n</p><ul><li>参数 message，是一个字符串，描述项目为什么过时以及该替代使用什么。</li><li>参数 iserror，是一个布尔值。如果该值为true，编译器应把该项目的使用当作一个错误。默认值是false（编译器生成一个警告）。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-none"><code class="language-none">using System;public class MyClass&#123;   [Obsolete(&quot;Don&#39;t use OldMethod, use NewMethod instead&quot;, true)]   static void OldMethod()   &#123;       Console.WriteLine(&quot;It is the old method&quot;);   &#125;   static void NewMethod()   &#123;       Console.WriteLine(&quot;It is the new method&quot;);    &#125;   public static void Main()   &#123;      OldMethod();   &#125;&#125;</code></pre><p>当您尝试编译该程序时，编译器会给出一个错误消息说明：\n</p><pre class="language-none"><code class="language-none">Don&#39;t use OldMethod, use NewMethod instead</code></pre><h1 id="创建自定义特性（Attribute）"><a href="#创建自定义特性（Attribute）" class="headerlink" title="创建自定义特性（Attribute）"></a>创建自定义特性（Attribute）</h1><p>自定义特性只需要让一个类继承Attribute类并且名称后缀是Attribute结尾即可。\n</p><h2 id="创建特性并使用"><a href="#创建特性并使用" class="headerlink" title="创建特性并使用"></a>创建特性并使用</h2><pre class="language-none"><code class="language-none">class MsgAttribute : Attribute&#123;    private string msg;    public MyAttribute(string msg)    &#123;        this.msg &#x3D; msg;    &#125;    public void ShowMsg()    &#123;        Console.WriteLine(msg);    &#125;&#125; [Msg(&quot;这是一条信息&quot;)]class MyClass&#123;&#125;</code></pre><h2 id="读取特性信息"><a href="#读取特性信息" class="headerlink" title="读取特性信息"></a>读取特性信息</h2><p>特性只做标识所用。不借助一些外在力量，特性其实什么用也没有。\n</p><p>若要使用特性，通常需要使用反射。例如，可以使用反射获取类的相关信息。\n</p><pre class="language-none"><code class="language-none">TypeInfo typeInfo &#x3D; typeof(MyClass).GetTypeInfo();&#x2F;&#x2F;获取类型信息MsgAttribute customAttribute &#x3D; typeInfo.GetCustomAttribute&lt;MsgAttribute&gt;(); &#x2F;&#x2F;获取特性信息，返回特性的实例对象customAttribute.GetName();&#x2F;&#x2F;调用方法 控制台中输出 这是一条信息</code></pre><p>GetCustomAttribute&lt;T&gt;\n<br>泛型方法用于获取某个特定的特性，返回该特性实例，还有一个GetCustomAttributes()方法用于获取所有的特性。</p><p>特性只有使用 GetCustomAttribute 或 GetCustomAttributes，它们才会实例化。 并且每次调用都会重新实例化并返回不同的特性实例。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>特性是给类等附加一些信息，方便读取。本身几乎没有实际的功能型效果。</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
          <category> 基本语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Attribute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#-PadLeft（）,PadRight（）用法</title>
      <link href="/2022/10/27/C-PadLeft%EF%BC%88%EF%BC%89-PadRight%EF%BC%88%EF%BC%89%E7%94%A8%E6%B3%95/"/>
      <url>/2022/10/27/C-PadLeft%EF%BC%88%EF%BC%89-PadRight%EF%BC%88%EF%BC%89%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中PadLeft（）、PadRight（）的用法"><a href="#C-中PadLeft（）、PadRight（）的用法" class="headerlink" title="C#中PadLeft（）、PadRight（）的用法"></a>C#中PadLeft（）、PadRight（）的用法</h1><p>PS\n<br>简单来说就是给字符串实现补位。\n<br>PadRight：固定长度输出，左对齐\n<br>PadLeft：固定长度输出，右对齐\n<br>参数不同，表示含义不同\n</p><h2 id="1-PadLeft-Int32-n"><a href="#1-PadLeft-Int32-n" class="headerlink" title="1).PadLeft(Int32)\n"></a>1).PadLeft(Int32)\n</h2><p>返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。\n</p><h2 id="2-PadLeft-Int32-Char-n"><a href="#2-PadLeft-Int32-Char-n" class="headerlink" title="2).PadLeft(Int32, Char)\n"></a>2).PadLeft(Int32, Char)\n</h2><p>返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。\n<br>实例：string num&#x3D;12 num.PadLeft(4, ‘0’); &#x2F;&#x2F;结果为为 ‘0012’ &#x2F;&#x2F;看字符串长度是否满足4位,不满足则在字符串左边以”0”补足)\n<br>PadLeft(int totalWidth, char paddingChar) &#x2F;&#x2F;在字符串左边用 paddingChar 补足 totalWidth 长度\n<br>PadRight(int totalWidth, char paddingChar) &#x2F;&#x2F;在字符串右边用 paddingChar 补足 totalWidth 长度\n</p><h2 id="例：-n"><a href="#例：-n" class="headerlink" title="例：\n"></a>例：\n</h2><p>示例：\n</p><ol><li>假如想输出AAAAA，可以用string.Empty.PadLeft(5,‘A’);</li><li>假如想输出：<br>可以用PadLeft实现：<pre class="language-none"><code class="language-none">for(int i&#x3D;1;i&lt;&#x3D;4;i++)\n&#123;Console.WriteLine(string.Empty.PadLeft(i,’*’));&#125;</code></pre></li></ol><p>转载自：<br><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string.padleft?redirectedfrom=MSDN&view=netframework-4.8#System_String_PadLeft_System_Int32">https://docs.microsoft.com/zh-cn/dotnet/api/system.string.padleft?redirectedfrom=MSDN&amp;view=netframework-4.8#System_String_PadLeft_System_Int32</a>_<br><a href="https://blog.csdn.net/xtfnpgy/article/details/24919145">https://blog.csdn.net/xtfnpgy/article/details/24919145</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> toString </tag>
            
            <tag> PadLeft() </tag>
            
            <tag> PadRight() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-程序功能保活</title>
      <link href="/2022/10/27/Form%E6%93%8D%E4%BD%9C-%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E4%BF%9D%E6%B4%BB/"/>
      <url>/2022/10/27/Form%E6%93%8D%E4%BD%9C-%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E4%BF%9D%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p>偶尔有的功能因为处理的事件过长。\n<br>需要进行延时处理，来确保进行功能不被后台直接回收\n<br>所以引用了一下函数，作用主要是界面保活\n</p><pre class="language-none"><code class="language-none">public static bool Delay(int delayTime)&#123;    DateTime now &#x3D; DateTime.Now;    int s;    do    &#123;        TimeSpan spand &#x3D; DateTime.Now - now;        s &#x3D; spand.Seconds;        Application.DoEvents();    &#125;    while (s &lt; delayTime);    return true;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Form </tag>
            
            <tag> 程序保活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#-字节流与图片转换</title>
      <link href="/2022/10/27/C-%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/10/27/C-%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>有的时候数据传输会使用字节流的模式进行传输。\n<br>字节流到达本地之后需要进行转换来进行对应的操作。\n</p><pre class="language-none"><code class="language-none">            byte[] tempImgData&#x3D; Encoding.Unicode.GetBytes(img.ToString());            MemoryStream stmBLOBData &#x3D; new MemoryStream(tempImgData);&#x2F;&#x2F;上面是将某种烈性转换成对应的字节流，&#x2F;&#x2F;下面是将字节流转换成bitmap类型，并且保存。            Bitmap bt &#x3D; new Bitmap，(stmBLOBData);            bt.Save($&quot;D:\\image\\1_&#123;DateTime.Now&#125;.png&quot;, System.Drawing.Imaging.ImageFormat.Jpeg);            bt.Dispose();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
          <category> 字节流与图片转换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 图片转化 </tag>
            
            <tag> 字节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win服务start失败</title>
      <link href="/2022/10/26/win%E6%9C%8D%E5%8A%A1start%E5%A4%B1%E8%B4%A5/"/>
      <url>/2022/10/26/win%E6%9C%8D%E5%8A%A1start%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>试图加载格式不正确的程序\n</p><h1 id="出错场景"><a href="#出错场景" class="headerlink" title="出错场景"></a>出错场景</h1><p>Visual Studio 2019\n<br>尝试运行自己的win服务。\n<br>中间使用了其他人的dll-64位。\n</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在每个项目的属性界面，将它们的目标平台都设置成为64位，于dll保持一致。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有的时候win服务需要引用其他dll来实现某些功能。\n<br>但是在一般的情况下64位的程序与32位的程序不能只能引用对应位数的dll文件。\n<br>如果不做设置，那样win服务就是默认是32位的，在面对64位程序就会出现错误\n<br>错误提示：<br>解决方案：切换成对应的x64或者x86程序。\n<br>win服务的要求更多一些。因为目前是有三个项目，分别负责form窗口，core，service创建\n<br>这三个项目都要统一设置成x64，或者是x86.\n<br>如果有一个没有设置，那样就会运行出错。\n</p>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> win服务 </tag>
            
            <tag> 文件解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string转坐标点</title>
      <link href="/2022/10/26/string%E8%BD%AC%E5%9D%90%E6%A0%87%E7%82%B9/"/>
      <url>/2022/10/26/string%E8%BD%AC%E5%9D%90%E6%A0%87%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>有的时候需要将string转换成自己想要的格式。最常见的比如我需要一个点，但是用户可能输入类似[1,2,3,4,5,6]这样的格式，我们就需要将这个string类型转换成对应的点的格式。\n<br>示例代码如下：\n</p><pre class="language-none"><code class="language-none">public HTuple StringToHTuplePose(string PointString)&#123;    string[] array &#x3D; PointString.Split(new char[] &#123; &#39;,&#39;, &#39;[&#39;, &#39;]&#39; &#125;, StringSplitOptions.RemoveEmptyEntries);    HTuple res &#x3D; new HTuple(Convert.ToDouble(array[0]) &#x2F; 1000, Convert.ToDouble(array[1]) &#x2F; 1000, Convert.ToDouble(array[2]) &#x2F; 1000,        Convert.ToDouble(array[3]), Convert.ToDouble(array[4]), Convert.ToDouble(array[5]), 0);    return res;&#125;</code></pre><p>该行为可以更容易地用逗号分隔值 (CSV) 文件之类的格式表示表格数据。 连续的逗号表示空白列。\n<br>可传递可选 StringSplitOptions.RemoveEmptyEntries 参数来排除返回数组中的任何空字符串。 \n要对返回的集合进行更复杂的处理，可使用 LINQ 来处理结果序列。\n</p>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> string操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> string </tag>
            
            <tag> 坐标点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>config文件使用</title>
      <link href="/2022/10/26/config%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/26/config%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="工作技巧"><a href="#工作技巧" class="headerlink" title="工作技巧"></a>工作技巧</h1><p>config由于原本文件会自动生成一个.config文件，所以在使用的时候往往直接可以进行使用<br>为了方便对于config文件进行操作，这里创建一个ConfigHelper的类进行一些操作的示例，见代码1</p><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><pre class="language-none"><code class="language-none">using System;using System.Collections.Generic;using System.Configuration;using System.Linq;using System.Text;using System.Text.RegularExpressions;using System.Threading.Tasks;namespace XmlRpcCore&#123;    public static class ConfigHelper    &#123;        public static string GetAppConfig(string FilePath, string strKey)        &#123;            Configuration val &#x3D; ConfigurationManager.OpenExeConfiguration(FilePath);            string[] allKeys &#x3D; val.AppSettings.Settings.AllKeys;            foreach (string a in allKeys)            &#123;                if (a &#x3D;&#x3D; strKey)                &#123;                    return val.AppSettings.Settings[strKey].Value.ToString();                &#125;            &#125;            return null;        &#125;        public static void UpdateAppConfig(string FilePath, string newKey, string newValue)        &#123;            Configuration val &#x3D; ConfigurationManager.OpenExeConfiguration(FilePath);            bool flag &#x3D; false;            string[] allKeys &#x3D; val.AppSettings.Settings.AllKeys;            foreach (string a in allKeys)            &#123;                if (a &#x3D;&#x3D; newKey)                &#123;                    flag &#x3D; true;                &#125;            &#125;            if (flag)            &#123;                val.AppSettings.Settings.Remove(newKey);            &#125;            val.AppSettings.Settings.Add(newKey, newValue);            val.Save(ConfigurationSaveMode.Modified);            ConfigurationManager.RefreshSection(&quot;appSettings&quot;);        &#125;    &#125;&#125;</code></pre><p>filepath：</p><pre class="language-none"><code class="language-none">private string appPath &#x3D; $&quot;&#123;Application.ExecutablePath&#125;&quot;;</code></pre><p>使用示例：<br>第一步获取对应的路径</p><pre class="language-none"><code class="language-none">string xmlPath &#x3D; $&quot;&#123;AppDomain.CurrentDomain.BaseDirectory&#125;machines.xml&quot;;</code></pre><p>第二步，获得数据，获得的类型都是string类型。<br>此处使用了上面代码1中的方法。</p><pre class="language-none"><code class="language-none">parameters.IP &#x3D; ConfigHelper.GetAppConfig(configFile, &quot;IP&quot;);</code></pre><h2 id="Config文件中初始化"><a href="#Config文件中初始化" class="headerlink" title="Config文件中初始化"></a>Config文件中初始化</h2><ol><li>文件路径如下：</li></ol><p>在App.config中添加appSettting的内容</p><ol start="2"><li>在文件中添加如下内容。</li></ol><pre class="language-c#" data-language="c#"><code class="language-c#">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;configuration&gt;  &lt;startup&gt;    &lt;supportedRuntime version&#x3D;&quot;v4.0&quot; sku&#x3D;&quot;.NETFramework,Version&#x3D;v4.7.2&quot; &#x2F;&gt;  &lt;&#x2F;startup&gt;  &lt;appSettings&gt;    &lt;add key&#x3D;&quot;IP&quot; value&#x3D;&quot;192.168.10.10&quot; &#x2F;&gt;    &lt;add key&#x3D;&quot;Port&quot; value&#x3D;&quot;5562&quot; &#x2F;&gt;  &lt;&#x2F;appSettings&gt;&lt;&#x2F;configuration&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> 类库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Hepler </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML使用</title>
      <link href="/2022/10/26/XML%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/26/XML%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在框架中使用XML几种方案。\n<br>首先是自己创建一个xml文档，注意要有一个父节点，此处的父节点名称machine\n<br>节点模样参考\n</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;&lt;machine&gt;&lt;&#x2F;machine&gt;</code></pre><p>自己编写xmlhelper，需要后续进行修改。见代码1</p><p>代码1</p><pre class="language-none"><code class="language-none">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Xml;namespace XmlRpcCore&#123;    public static class XmlHelper    &#123;        public static bool ElementIsNotExist(string FilePath, string machineNum)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            if (xmlElement &#x3D;&#x3D; null)                return true;            return false;        &#125;        public static string GetAppXmlAttribute(string FilePath, string machineNum, string strKey)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            string res &#x3D; xmlElement.GetAttribute(strKey);            return res;        &#125;        &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; 修改对应xml的特性若key存在，则修改，不存在则增添        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;FilePath&quot;&gt;&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;machineNum&quot;&gt;&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;newKey&quot;&gt;&lt;&#x2F;param&gt;        &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;newValue&quot;&gt;&lt;&#x2F;param&gt;        public static void UpdateAppXmlAttribute(string FilePath, string machineNum, string newKey, string newValue)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            string res &#x3D; xmlElement.GetAttribute(newKey);            xmlElement.SetAttribute(newKey, newValue);            xmlDocument.Save(FilePath);        &#125;        public static void UpdateCameraOne(string FilePath, string machineNum, string HeightCameraOne, string MovingDirectionCameraOne,            string DataFileCameraOne, string ImageFileCameraOne, string ModelFileCameraOne, string PositionCameraOne)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            xmlElement.SetAttribute(&quot;HeightCameraOne&quot;, HeightCameraOne);            xmlElement.SetAttribute(&quot;MovingDirectionCameraOne&quot;, MovingDirectionCameraOne);            xmlElement.SetAttribute(&quot;DataFileCameraOne&quot;, DataFileCameraOne);            xmlElement.SetAttribute(&quot;ImageFileCameraOne&quot;, ImageFileCameraOne);            xmlElement.SetAttribute(&quot;ModelFileCameraOne&quot;, ModelFileCameraOne);            xmlElement.SetAttribute(&quot;PositionCameraOne&quot;, PositionCameraOne);            xmlDocument.Save(FilePath);        &#125;        public static void UpdateCameraTwo(string FilePath, string machineNum, string HeightCameraTwo, string MovingDirectionCameraTwo,    string DataFileCameraTwo, string ImageFileCameraTwo, string ModelFileCameraTwo, string PositionCameraTwo)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            xmlElement.SetAttribute(&quot;HeightCameraTwo&quot;, HeightCameraTwo);            xmlElement.SetAttribute(&quot;MovingDirectionCameraTwo&quot;, MovingDirectionCameraTwo);            xmlElement.SetAttribute(&quot;DataFileCameraTwo&quot;, DataFileCameraTwo);            xmlElement.SetAttribute(&quot;ImageFileCameraTwo&quot;, ImageFileCameraTwo);            xmlElement.SetAttribute(&quot;ModelFileCameraTwo&quot;, ModelFileCameraTwo);            xmlElement.SetAttribute(&quot;PositionCameraTwo&quot;, PositionCameraTwo);            xmlDocument.Save(FilePath);        &#125;        public static void ReadCameraTwo(string FilePath, string machineNum, out string HeightCameraTwo, out string MovingDirectionCameraTwo,out string DataFileCameraTwo, out string ImageFileCameraTwo, out string ModelFileCameraTwo, out string PositionCameraTwo)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            HeightCameraTwo &#x3D; xmlElement.GetAttribute(&quot;HeightCameraTwo&quot;);            MovingDirectionCameraTwo &#x3D; xmlElement.GetAttribute(&quot;MovingDirectionCameraTwo&quot;);            DataFileCameraTwo &#x3D; xmlElement.GetAttribute(&quot;DataFileCameraTwo&quot;);            ImageFileCameraTwo &#x3D; xmlElement.GetAttribute(&quot;ImageFileCameraTwo&quot;);            ModelFileCameraTwo &#x3D; xmlElement.GetAttribute(&quot;ModelFileCameraTwo&quot;);            PositionCameraTwo &#x3D; xmlElement.GetAttribute(&quot;PositionCameraTwo&quot;);        &#125;        public static void ReadCameraOne(string FilePath, string machineNum, out string HeightCameraOne, out string MovingDirectionCameraOne,out string DataFileCameraOne, out string ImageFileCameraOne, out string ModelFileCameraOne, out string PositionCameraOne)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            HeightCameraOne &#x3D; xmlElement.GetAttribute(&quot;HeightCameraOne&quot;);            MovingDirectionCameraOne &#x3D; xmlElement.GetAttribute(&quot;MovingDirectionCameraOne&quot;);            DataFileCameraOne &#x3D; xmlElement.GetAttribute(&quot;DataFileCameraOne&quot;);            ImageFileCameraOne &#x3D; xmlElement.GetAttribute(&quot;ImageFileCameraOne&quot;);            ModelFileCameraOne &#x3D; xmlElement.GetAttribute(&quot;ModelFileCameraOne&quot;);            PositionCameraOne &#x3D; xmlElement.GetAttribute(&quot;PositionCameraOne&quot;);        &#125;        public static void RemoveAppXmlElement(string FilePath, string machineNum)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement rootElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&quot;);            XmlElement xmlElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + machineNum);            rootElement.RemoveChild(xmlElement);            xmlDocument.Save(FilePath);        &#125;        public static void AddAppXmlElement(string FilePath, string machineNum)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement rootElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&quot;);            XmlElement xmlElement &#x3D; xmlDocument.CreateElement(machineNum);            rootElement.AppendChild(xmlElement);            xmlDocument.Save(FilePath);        &#125;        public static XmlNodeList AppXmlElementCount(string FilePath)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement rootElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&quot;);            XmlNodeList childNodes &#x3D; rootElement.ChildNodes;            return childNodes;        &#125;        public static void CopyAppXmlElement(string FilePath, string oldmachineNum, string newmachineNum)        &#123;            XmlDocument xmlDocument &#x3D; new XmlDocument();            xmlDocument.Load(FilePath);            XmlElement rootElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&quot;);            XmlElement oldElement &#x3D; (XmlElement)xmlDocument.SelectSingleNode(&quot;machine&#x2F;&quot; + oldmachineNum);            XmlElement newElement &#x3D; xmlDocument.CreateElement(newmachineNum);            foreach (XmlAttribute att in oldElement.Attributes)            &#123;                newElement.SetAttribute(att.Name, att.Value);                            &#125;                        rootElement.AppendChild(newElement);            xmlDocument.Save(FilePath);        &#125;    &#125;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> 类库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> XML </tag>
            
            <tag> Helper </tag>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML命名空间</title>
      <link href="/2022/10/26/XML%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/10/26/XML%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>先说结论，两种命名空间，\n<br>一种默认命名空间，没有前缀。\n<br>二、显式名称空间声明，有前缀。\n<br>默认命名空间，无前缀的都使用\n</p><pre class="language-none"><code class="language-none">&lt;根元素 xmlns &#x3D; “http:&#x2F;&#x2F;xugang.cnblogs.com” &gt;           &lt;子元素 attName &#x3D;“myname” &#x2F;&gt;</code></pre><p>显式名称控件声明\n</p><pre class="language-none"><code class="language-none">&lt;根元素 xmlns: xg &#x3D; “http:&#x2F;&#x2F;xugang.cnblogs.com” &gt;           &lt;xg:子元素  attName &#x3D; “myname” &#x2F;&gt;</code></pre><p>注意：尽量只在根元素声明默认名称空间。若默认名称空间声明在非根元素，则容易被用户误解或忽略成没有名称空间的元素。所以，非根元素尽量不使用默认名称空间声明（推荐使用显式名称空间声明）。\n<br>名称空间的声明注意：\n<br>    * 双引号内必须是一个URI；<br>    * XML区分大小写，前缀名也不例外；<br>    * 前缀名建议采用英文缩写，也可以用中文（但不推荐用中文）；<br>    * 尽量避免同名前缀却对应不同URI的名称空间的情况，它将容易误导用户；<br>    * 尽量在根元素中声明所有的名称空间；<br>    * 如果一个属性所在的元素属于某显式声明的名称空间，一般就不需要为该属性添加前缀。<br>xml前缀的使用示例，两个xml文件合并成为一个xml文件，使用前缀进行区分。\n<br>IT部门\n</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;GB2312&quot; standalone&#x3D;&quot;yes&quot;?&gt;&lt;资料&gt;   &lt;设备 编号&#x3D;&quot;联想6515b&quot;&gt;      &lt;生产商&gt;联想集团&lt;&#x2F;生产商&gt;      &lt;地址&gt;北京市中关村127号&lt;&#x2F;地址&gt;   &lt;&#x2F;设备&gt;&lt;&#x2F;资料&gt;</code></pre><p>建筑部门\n</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;GB2312&quot; standalone&#x3D;&quot;yes&quot; ?&gt;&lt;资料&gt;   &lt;设备 编号&#x3D;&quot;中联F001&quot;&gt;      &lt;生产商&gt;中联重科&lt;&#x2F;生产商&gt;      &lt;地址&gt;湖南省长沙市新开铺113号&lt;&#x2F;地址&gt;   &lt;&#x2F;设备&gt;&lt;&#x2F;资料&gt;</code></pre><p>正确合并\n</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;GB2312&quot; standalone&#x3D;&quot;yes&quot;?&gt;&lt;资料 xmlns:IT&#x3D;&quot;http:&#x2F;&#x2F;www.lenovo.com&quot; xmlns:建筑&#x3D;&quot;myURN:中联&quot;&gt;   &lt;设备 IT:编号&#x3D;&quot;联想6515b&quot; 建筑:编号&#x3D;&quot;中联F001&quot;&gt;      &lt;IT:设备名&gt;笔记本&lt;&#x2F;IT:设备名&gt;      &lt;IT:生产商&gt;联想集团&lt;&#x2F;IT:生产商&gt;      &lt;IT:地址&gt;北京市中关村127号&lt;&#x2F;IT:地址&gt;      &lt;建筑:设备名&gt;起重机&lt;&#x2F;建筑:设备名&gt;      &lt;建筑:生产商&gt;中联重科&lt;&#x2F;建筑:生产商&gt;      &lt;建筑:地址&gt;湖南省长沙市新开铺113号&lt;&#x2F;建筑:地址&gt;   &lt;&#x2F;设备&gt;&lt;&#x2F;资料&gt;</code></pre><p>错误合并\n</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;GB2312&quot; standalone&#x3D;&quot;yes&quot;?&gt;&lt;资料&gt;   &lt;设备 编号&#x3D;&quot;联想6515b&quot; 编号&#x3D;&quot;中联F001&quot;&gt;      &lt;设备名&gt;笔记本&lt;&#x2F;设备名&gt;      &lt;生产商&gt;联想集团&lt;&#x2F;生产商&gt;      &lt;地址&gt;北京市中关村127号&lt;&#x2F;地址&gt;      &lt;设备名&gt;起重机&lt;&#x2F;设备名&gt;      &lt;生产商&gt;中联重科&lt;&#x2F;生产商&gt;      &lt;地址&gt;湖南省长沙市新开铺113号&lt;&#x2F;地址&gt;   &lt;&#x2F;设备&gt;&lt;&#x2F;资料&gt;</code></pre><p>相关知识，在复制节点的时候如果需要的话可以将对应的节点的命名空间一起复制\n</p><pre class="language-none"><code class="language-none">XmlAttribute newAttribute &#x3D; (XmlAttribute)sourceAttribute.CloneNode(true);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> XML </tag>
            
            <tag> 命名空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML命名规则</title>
      <link href="/2022/10/26/XML%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
      <url>/2022/10/26/XML%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>问题表现\n<br>XML节点元素不可以以数字和特殊符号，如“.”开头，否则用XMLDOMDocument写入将会出现Bug。\n<br>具体规则\n<br>• 名称可以含字母、数字以及其他的字符<br>• 名称不能以数字或者标点符号开始<br>• 名称不能以字符 “xml”（或者 XML、Xml）开始<br>• 名称不能包含空格<br>注意，名称不能包括，并不是说value不能包括。name与value不同的\n</p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> XML </tag>
            
            <tag> 命名规则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前程序路径</title>
      <link href="/2022/10/26/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%A8%8B%E5%BA%8F%E8%B7%AF%E5%BE%84/"/>
      <url>/2022/10/26/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%A8%8B%E5%BA%8F%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>获取路径的原因可以是很多。\n<br>需要获得当前文件的config文件中的属性\n<br>有些信息被写在xml文件之中\n<br>用户需要打开窗口选取文件，我们要获得用户打开的文件。\n<br>创建service服务的时候需要知道service服务的路径才可以进行对应的install or uninstall\n<br>当前最常使用的几种路径的获取方案如下。\n<br>这个是获得当前运行程序的目录，是一个exe文件。<br>在读取config文件的时候经常使用</p><pre class="language-none"><code class="language-none">private string appPath &#x3D; $&quot;&#123;Application.ExecutablePath&#125;&quot;;</code></pre><p>这个是获取到当前运行的exe文件的目录\n<br>获取启动了应用程序的可执行文件的路径，不包括可执行文件的名称。\n<br>这个方法也是可靠的获取程序路径的方法。不过返回的路径最末并没有”&quot;结尾。另外因为是Forms命名空间的。因此如果使用WPF还是不用的好。\n</p><pre class="language-none"><code class="language-none">private String serviceFilePath&#x3D; $&quot;&#123;Application.StartupPath&#125;\\XmlRpcUR.exe&quot;;</code></pre><p>这个也是获得当前运行的exe文件的目录\n<br>获取当前 Thread\n<br>的当前应用程序域的基目录，它由程序集冲突解决程序用来探测程序集。\n<br>这个方法是以”&quot;结尾\n</p><pre class="language-none"><code class="language-none">string xmlPath &#x3D; $&quot;&#123;AppDomain.CurrentDomain.BaseDirectory&#125;\\machines.xml&quot;;</code></pre><p>此处有一些我的路径实例用作参考  </p><pre class="language-none"><code class="language-none">private void DataFile_Click(object sender, EventArgs e)&#123;    OpenFileDialog dialog &#x3D; new OpenFileDialog();    if (File.Exists(DataFileTextBox.Text))    &#123;        int lastIndex &#x3D; DataFileTextBox.Text.LastIndexOf(&quot;\\&quot;);&#x2F;&#x2F;获取双斜杠所在的最后的一个索引位置        string filePath &#x3D; DataFileTextBox.Text.Substring(0, lastIndex);        dialog.InitialDirectory &#x3D; filePath;    &#125;    else if (Directory.Exists(DataFileTextBox.Text))    &#123;        dialog.InitialDirectory &#x3D; DataFileTextBox.Text;    &#125;    dialog.Multiselect &#x3D; false;&#x2F;&#x2F;该值确定是否可以选择多个文件    dialog.Title &#x3D; &quot;请选择文件&quot;;    &#x2F;&#x2F;过滤器，根据后缀过滤文件，文件夹保留。此处分为两个部分，前者只显示txt文档与文件夹，后者显示全部文件与文件夹    dialog.Filter &#x3D; &quot;hed格式（*.hed）|*.hed|所有文件|*.*&quot;;    if (dialog.ShowDialog() &#x3D;&#x3D; System.Windows.Forms.DialogResult.OK)    &#123;        string file &#x3D; dialog.FileName;        DataFileTextBox.Text &#x3D; file;    &#125;&#125;</code></pre><p>以下内容来源于网络。\n<br>获取启动了应用程序的可执行文件的路径及文件名。\n<br>这个方法获取的是执行程序的完整文件名。是最可靠的方式，只需要去掉程序文件名就可以获得路径。\n</p><pre class="language-none"><code class="language-none">System.Windows.Forms.Application.ExecutablePath</code></pre><p>获取当前应用程序所在目录的路径，最后包含“\”。\n</p><pre class="language-none"><code class="language-none">System.Threading.Thread.GetDomain().BaseDirectory</code></pre><p>参考文章\n</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;t.zoukankan.com&#x2F;zhzhx-p-3115102.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 程序路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期格式文件名</title>
      <link href="/2022/10/26/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E5%90%8D/"/>
      <url>/2022/10/26/%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>因为是自动化，需要批量保存的时候文件名就会依据日期来命名\n<br>需要进行格式转换的原因有：文件命名不能有冒号\n<br>可以创建依据月份，具体到某一天的文件夹来对于文件进行分类。\n</p><pre class="language-none"><code class="language-none">strFileName&#x3D;Format(System.DateTime.Now,&quot;yyyyMMdd_hhmmss&quot;);精确到毫秒级别名称＝DateTime.Now.ToString(&quot;yyyyMMddhhmmss&quot;) + DateTime.Now.Millisecond.ToString() + &quot;上传文件的后缀名&quot;;</code></pre><p>不同的日期表达形式</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;2007年4月24日  this.TextBox1.Text &#x3D; System.DateTime.Now.ToString(&quot;D&quot;);  &#x2F;&#x2F;2007&#x2F;4&#x2F;24  this.TextBox2.Text &#x3D; System.DateTime.Now.ToString(&quot;d&quot;);  &#x2F;&#x2F;2007年4月24日 16:30:15  this.TextBox3.Text &#x3D; System.DateTime.Now.ToString(&quot;F&quot;);  &#x2F;&#x2F;2007年4月24日 16:30  this.TextBox4.Text &#x3D; System.DateTime.Now.ToString(&quot;f&quot;);  &#x2F;&#x2F;2007&#x2F;4&#x2F;24 16:30:15  this.TextBox5.Text &#x3D; System.DateTime.Now.ToString(&quot;G&quot;);  &#x2F;&#x2F;2007&#x2F;4&#x2F;24 16:30         this.TextBox6.Text &#x3D; System.DateTime.Now.ToString(&quot;g&quot;);  &#x2F;&#x2F;16:30:15  this.TextBox7.Text &#x3D; System.DateTime.Now.ToString(&quot;T&quot;);  &#x2F;&#x2F;16:30  this.TextBox8.Text &#x3D; System.DateTime.Now.ToString(&quot;t&quot;);  &#x2F;&#x2F;2007年4月24日 8:30:15  this.TextBox9.Text &#x3D; System.DateTime.Now.ToString(&quot;U&quot;);  &#x2F;&#x2F;2007-04-24 16:30:15Z  this.TextBox10.Text &#x3D; System.DateTime.Now.ToString(&quot;u&quot;);  &#x2F;&#x2F;4月24日      this.TextBox11.Text &#x3D; System.DateTime.Now.ToString(&quot;m&quot;);  this.TextBox12.Text &#x3D; System.DateTime.Now.ToString(&quot;M&quot;);  &#x2F;&#x2F;Tue, 24 Apr 2007 16:30:15 GMT    this.TextBox13.Text &#x3D; System.DateTime.Now.ToString(&quot;r&quot;);  this.TextBox14.Text &#x3D; System.DateTime.Now.ToString(&quot;R&quot;);  &#x2F;&#x2F;2007年4月   this.TextBox15.Text &#x3D; System.DateTime.Now.ToString(&quot;y&quot;);  this.TextBox16.Text &#x3D; System.DateTime.Now.ToString(&quot;Y&quot;);  &#x2F;&#x2F;2007-04-24T15:52:19.1562500+08:00  this.TextBox17.Text &#x3D; System.DateTime.Now.ToString(&quot;o&quot;);  this.TextBox18.Text &#x3D; System.DateTime.Now.ToString(&quot;O&quot;);  &#x2F;&#x2F;2007-04-24T16:30:15  this.TextBox19.Text &#x3D; System.DateTime.Now.ToString(&quot;s&quot;);  &#x2F;&#x2F;2007-04-24 15:52:19:9889  this.TextBox20.Text &#x3D; System.DateTime.Now.ToString(&quot;yyyy-MM-dd HH：mm：ss：ffff&quot;);  &#x2F;&#x2F;2007年04月24 15时56分48秒  this.TextBox21.Text &#x3D; System.DateTime.Now.ToString(&quot;yyyy年MM月dd HH时mm分ss秒&quot;);  &#x2F;&#x2F;星期二, 四月 24 2007  this.TextBox22.Text &#x3D; System.DateTime.Now.ToString(&quot;dddd, MMMM dd yyyy&quot;);  &#x2F;&#x2F;周三, 十二月 7 &#39;11  this.TextBox23.Text &#x3D; System.DateTime.Now.ToString(&quot;ddd, MMM d \&quot;&#39;\&quot;yy&quot;);  &#x2F;&#x2F;星期二, 四月 24  this.TextBox24.Text &#x3D; System.DateTime.Now.ToString(&quot;dddd, MMMM dd&quot;);  &#x2F;&#x2F;4&#x2F;07  this.TextBox25.Text &#x3D; System.DateTime.Now.ToString(&quot;M&#x2F;yy&quot;);  &#x2F;&#x2F;07-12-11  this.TextBox26.Text &#x3D; System.DateTime.Now.ToString(&quot;dd-MM-yy&quot;);    string[] Day &#x3D; new string[] &#123; &quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot; &#125;;  &#x2F;&#x2F;2011&#x2F;12&#x2F;6 昨天  this.TextBox1.Text &#x3D; System.DateTime.Now.AddDays(-1).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;8 明天  this.TextBox2.Text &#x3D; DateTime.Now.AddDays(1).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;4 本周星期天  this.TextBox3.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((0 - Convert.ToInt16(DateTime.Now.DayOfWeek)))).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;10 本周星期六  this.TextBox4.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((6 - Convert.ToInt16(DateTime.Now.DayOfWeek)))).ToShortDateString();  &#x2F;&#x2F;星期三 今天周几  this.TextBox5.Text &#x3D; Day[Convert.ToInt16(DateTime.Now.DayOfWeek)];  &#x2F;&#x2F;2011&#x2F;11&#x2F;27 上周日  this.TextBox6.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((0 - Convert.ToInt16(DateTime.Now.DayOfWeek))) - 7).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;3 上周六  this.TextBox7.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((6 - Convert.ToInt16(DateTime.Now.DayOfWeek))) - 7).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;11 下周日  this.TextBox8.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((0 - Convert.ToInt16(DateTime.Now.DayOfWeek))) + 7).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;12&#x2F;17 下周六  this.TextBox9.Text &#x3D; DateTime.Now.AddDays(Convert.ToDouble((6 - Convert.ToInt16(DateTime.Now.DayOfWeek))) + 7).ToShortDateString();  &#x2F;&#x2F;2011-12-01 本月一号  this.TextBox10.Text &#x3D;DateTime.Now.ToString(&quot;yyyy-MM-01&quot;);  &#x2F;&#x2F;2011&#x2F;12&#x2F;31 本月最后一天  this.TextBox11.Text&#x3D;DateTime.Parse(DateTime.Now.ToString(&quot;yyyy-MM-01&quot;)).AddMonths(1).AddDays(-1).ToShortDateString();  &#x2F;&#x2F;2011&#x2F;11&#x2F;1 上个月一号  this.TextBox12.Text&#x3D;System.DateTime.Parse(DateTime.Now.ToString(&quot;yyyy-MM-01&quot;)).AddMonths(-1).ToShortDateString();  &#x2F;&#x2F;2012&#x2F;1&#x2F;1 下个月一号  this.TextBox13.Text&#x3D;System.DateTime.Parse(DateTime.Now.ToString(&quot;yyyy-MM-01&quot;)).AddMonths(1).ToShortDateSring();</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> DateTime </tag>
            
            <tag> 文件名称 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-打开文件弹窗</title>
      <link href="/2022/10/26/Form%E6%93%8D%E4%BD%9C-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%BC%B9%E7%AA%97/"/>
      <url>/2022/10/26/Form%E6%93%8D%E4%BD%9C-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<p>有的时候需要让用户选择文件，我们获取文件路径，用于读取相对应的文件。<br>因此有了这个弹窗按钮。\n</p><pre class="language-none"><code class="language-none">private void DataFile_Click(object sender, EventArgs e)&#123;    OpenFileDialog dialog &#x3D; new OpenFileDialog();    if (File.Exists(DataFileTextBox.Text))    &#123;        int lastIndex &#x3D; DataFileTextBox.Text.LastIndexOf(&quot;\\&quot;);&#x2F;&#x2F;获取双斜杠所在的最后的一个索引位置        string filePath &#x3D; DataFileTextBox.Text.Substring(0, lastIndex);        dialog.InitialDirectory &#x3D; filePath;    &#125;    else if (Directory.Exists(DataFileTextBox.Text))    &#123;        dialog.InitialDirectory &#x3D; DataFileTextBox.Text;    &#125;    dialog.Multiselect &#x3D; false;&#x2F;&#x2F;该值确定是否可以选择多个文件    dialog.Title &#x3D; &quot;请选择文件&quot;;    &#x2F;&#x2F;过滤器，根据后缀过滤文件，文件夹保留。此处分为两个部分，前者只显示txt文档与文件夹，后者显示全部文件与文件夹    dialog.Filter &#x3D; &quot;hed格式（*.hed）|*.hed|所有文件|*.*&quot;;    if (dialog.ShowDialog() &#x3D;&#x3D; System.Windows.Forms.DialogResult.OK)    &#123;        string file &#x3D; dialog.FileName;        DataFileTextBox.Text &#x3D; file;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Form操作 </tag>
            
            <tag> 获得文件路径 </tag>
            
            <tag> 文件弹窗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winform-学习路线-创建日志</title>
      <link href="/2022/10/26/%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA/"/>
      <url>/2022/10/26/%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>目前有两个方案。</p><ol><li>布置简单，就是直接写入到一个txt文档之中。</li><li>另一个是比较专业logger4的使用</li></ol><h1 id="一、直接写入文档"><a href="#一、直接写入文档" class="headerlink" title="一、直接写入文档"></a>一、直接写入文档</h1><p>相关代码如下：</p><pre class="language-none"><code class="language-none">private static string filePath &#x3D; @&quot;C:\Users\Nestar\Desktop\Xml.txt&quot;;public static void WriteInfo(string info)&#123;    using (FileStream stream &#x3D; new FileStream(filePath, FileMode.Append))    &#123;        using (StreamWriter writer &#x3D; new StreamWriter(stream))        &#123;            writer.WriteLine($&quot;&#123;DateTime.Now&#125;,&#123;info&#125;&quot;);        &#125;    &#125;&#125;</code></pre><p>filepath可以根据自己的想要生成的路径任意设置。\n</p><h1 id="二、创建logger4日志"><a href="#二、创建logger4日志" class="headerlink" title="二、创建logger4日志"></a>二、创建logger4日志</h1><p>比较专业logger4的使用</p><ol><li>在引用的位置通过Nuggert安装logger4net。</li><li>在启动项目中手动创建log4net.config文件,将下面的代码2拷入文件中.需要注意的需要设置文件为复制到输出目录</li><li>在启动项目的.cs(常见问文件命名时AssemblyInfo.cs)，中最下面添加代码3内容</li><li>（可选项）添加LoggerHelper方便对于logger日志的操作，相关代码见代码4</li></ol><h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><pre class="language-none"><code class="language-none">&lt;log4net&gt;  &lt;root&gt;    &lt;level value&#x3D;&quot;ALL&quot; &#x2F;&gt;    &lt;appender-ref ref&#x3D;&quot;infoAppender&quot; &#x2F;&gt;    &lt;appender-ref ref&#x3D;&quot;errorAppender&quot; &#x2F;&gt;    &lt;appender-ref ref&#x3D;&quot;debugAppender&quot; &#x2F;&gt;  &lt;&#x2F;root&gt;  &lt;!-- 日志的等级，它们由高到底分别为： OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; ALL --&gt;  &lt;!--信息日志配置--&gt;  &lt;appender name&#x3D;&quot;infoAppender&quot; type&#x3D;&quot;log4net.Appender.RollingFileAppender&quot;&gt;    &lt;param name&#x3D;&quot;File&quot; value&#x3D;&quot;Logs\Info\info.log&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;AppendToFile&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxFileSize&quot; value&#x3D;&quot;10240&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxSizeRollBackups&quot; value&#x3D;&quot;100&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;PreserveLogFileNameExtension&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;StaticLogFileName&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;DatePattern&quot; value&#x3D;&quot;yyyyMMdd&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;RollingStyle&quot; value&#x3D;&quot;Date&quot; &#x2F;&gt;    &lt;layout type&#x3D;&quot;log4net.Layout.PatternLayout&quot;&gt;      &lt;conversionPattern value&#x3D;&quot;%date [%thread] %-5level %logger - %message%newline&quot; &#x2F;&gt;    &lt;&#x2F;layout&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.LevelRangeFilter&quot;&gt;      &lt;param name&#x3D;&quot;LevelMin&quot; value&#x3D;&quot;INFO&quot; &#x2F;&gt;      &lt;param name&#x3D;&quot;LevelMax&quot; value&#x3D;&quot;INFO&quot; &#x2F;&gt;    &lt;&#x2F;filter&gt;  &lt;&#x2F;appender&gt;  &lt;!--调试日志配置--&gt;  &lt;appender name&#x3D;&quot;debugAppender&quot; type&#x3D;&quot;log4net.Appender.RollingFileAppender&quot;&gt;    &lt;param name&#x3D;&quot;File&quot; value&#x3D;&quot;Logs\Debug\debug.log&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;AppendToFile&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxFileSize&quot; value&#x3D;&quot;10240&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxSizeRollBackups&quot; value&#x3D;&quot;100&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;PreserveLogFileNameExtension&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;StaticLogFileName&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;DatePattern&quot; value&#x3D;&quot;yyyyMMdd&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;RollingStyle&quot; value&#x3D;&quot;Date&quot; &#x2F;&gt;    &lt;layout type&#x3D;&quot;log4net.Layout.PatternLayout&quot;&gt;      &lt;conversionPattern value&#x3D;&quot;%date [%thread] %-5level %logger - %message%newline&quot; &#x2F;&gt;    &lt;&#x2F;layout&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.LevelRangeFilter&quot;&gt;      &lt;param name&#x3D;&quot;LevelMin&quot; value&#x3D;&quot;DEBUG&quot; &#x2F;&gt;      &lt;param name&#x3D;&quot;LevelMax&quot; value&#x3D;&quot;DEBUG&quot; &#x2F;&gt;    &lt;&#x2F;filter&gt;  &lt;&#x2F;appender&gt;  &lt;!--错误日志配置--&gt;  &lt;appender name&#x3D;&quot;errorAppender&quot; type&#x3D;&quot;log4net.Appender.RollingFileAppender&quot;&gt;    &lt;param name&#x3D;&quot;File&quot; value&#x3D;&quot;Logs\Error\Err.log&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;AppendToFile&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxFileSize&quot; value&#x3D;&quot;10240&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;MaxSizeRollBackups&quot; value&#x3D;&quot;100&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;PreserveLogFileNameExtension&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;StaticLogFileName&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;DatePattern&quot; value&#x3D;&quot;yyyyMMdd&quot; &#x2F;&gt;    &lt;param name&#x3D;&quot;RollingStyle&quot; value&#x3D;&quot;Date&quot; &#x2F;&gt;    &lt;layout type&#x3D;&quot;log4net.Layout.PatternLayout&quot;&gt;      &lt;conversionPattern value&#x3D;&quot;%date [%thread] %-5level %logger - %message%newline&quot; &#x2F;&gt;    &lt;&#x2F;layout&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.LevelRangeFilter&quot;&gt;      &lt;param name&#x3D;&quot;LevelMin&quot; value&#x3D;&quot;ERROR&quot; &#x2F;&gt;      &lt;param name&#x3D;&quot;LevelMax&quot; value&#x3D;&quot;ERROR&quot; &#x2F;&gt;    &lt;&#x2F;filter&gt;  &lt;&#x2F;appender&gt;&lt;&#x2F;log4net&gt;</code></pre><blockquote><p>记得文件的命名要求是logger4net.config.同时要把文件设置为复制到输出目录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/2508838014/DrawingBed/pictures/image-20230720185635223.png" alt="image-20230720185635223"></p><p>需要注意的是，虽然此处没有明写Log，但是root是作为所有的父节点，默认是Log的名称。</p><pre class="language-none"><code class="language-none">1.主要是log实例化有变化。通过GetLogger方法获取xml配种中gdLog4net的Logger2.xml中定义了logger，关于logger和root，可以参考文章：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;zhangchenliang&#x2F;p&#x2F;4546352.html 的后面部分内容，大概意思就是说root其实就是一个顶级的logger，所有其他logger都默认继承这个root。如果需要让logger阻断和root的联系，可以将logger的additivity设置为false。</code></pre><p>示例代码：</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;log4net&gt;  &lt;appender name&#x3D;&quot;AccesssService_Err&quot; type&#x3D;&quot;log4net.Appender.RollingFileAppender&quot;&gt;    &lt;!--日志路径--&gt;    &lt;param name&#x3D;&quot;File&quot; value&#x3D;&quot;Errors\log.log&quot; &#x2F;&gt;    &lt;!--是否是向文件中追加日志--&gt;    &lt;param name&#x3D;&quot;AppendToFile&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;!--log保留个数--&gt;    &lt;param name&#x3D;&quot;MaxSizeRollBackups&quot; value&#x3D;&quot;200&quot; &#x2F;&gt;    &lt;!--单个日志文件大小--&gt;    &lt;param name&#x3D;&quot;MaximumFileSize&quot; value&#x3D;&quot;5MB&quot; &#x2F;&gt;    &lt;!--日志文件名是否是固定不变的--&gt;    &lt;param name&#x3D;&quot;StaticLogFileName&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;    &lt;!--日志文件名格式为:2008-08-31.log--&gt;    &lt;DatePattern value&#x3D;&quot;yyyy-MM-dd HH&#39;时.log&#39;&quot;&gt;&lt;&#x2F;DatePattern&gt;    &lt;lockingModel type&#x3D;&quot;log4net.Appender.FileAppender+MinimalLock&quot; &#x2F;&gt;    &lt;!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])--&gt;    &lt;param name&#x3D;&quot;RollingStyle&quot; value&#x3D;&quot;Size&quot; &#x2F;&gt;    &lt;layout type&#x3D;&quot;log4net.Layout.PatternLayout&quot;&gt;      &lt;param name&#x3D;&quot;ConversionPattern&quot; value&#x3D;&quot;记录时间：%date%n线程ID:[%thread] %n日志级别：%-5level%n记录位置：%location%n消息描述：%property&#123;Message&#125;%n异常：%exception%n消息：%message%newline%n------------------------------------------%n&quot; &#x2F;&gt;    &lt;&#x2F;layout&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.LevelRangeFilter&quot;&gt;      &lt;levelMin value&#x3D;&quot;WARN&quot; &#x2F;&gt;      &lt;levelMax value&#x3D;&quot;FATAL&quot; &#x2F;&gt;    &lt;&#x2F;filter&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.DenyAllFilter&quot; &#x2F;&gt;  &lt;&#x2F;appender&gt;  &lt;appender name&#x3D;&quot;AccesssService_info&quot; type&#x3D;&quot;log4net.Appender.RollingFileAppender&quot;&gt;    &lt;!--日志路径--&gt;    &lt;param name&#x3D;&quot;File&quot; value&#x3D;&quot;MyLogs\log.log&quot; &#x2F;&gt;    &lt;!--是否是向文件中追加日志--&gt;    &lt;param name&#x3D;&quot;AppendToFile&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;    &lt;!--log保留个数--&gt;    &lt;param name&#x3D;&quot;MaxSizeRollBackups&quot; value&#x3D;&quot;200&quot; &#x2F;&gt;    &lt;!--单个日志文件大小--&gt;    &lt;param name&#x3D;&quot;MaximumFileSize&quot; value&#x3D;&quot;5MB&quot; &#x2F;&gt;    &lt;!--日志文件名是否是固定不变的--&gt;    &lt;param name&#x3D;&quot;StaticLogFileName&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;    &lt;!--日志文件名格式为:2008-08-31.log--&gt;    &lt;DatePattern value&#x3D;&quot;yyyy-MM-dd HH&#39;时.log&#39;&quot;&gt;&lt;&#x2F;DatePattern&gt;    &lt;lockingModel type&#x3D;&quot;log4net.Appender.FileAppender+MinimalLock&quot; &#x2F;&gt;    &lt;!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])--&gt;    &lt;param name&#x3D;&quot;RollingStyle&quot; value&#x3D;&quot;Size&quot; &#x2F;&gt;    &lt;layout type&#x3D;&quot;log4net.Layout.PatternLayout&quot;&gt;      &lt;param name&#x3D;&quot;ConversionPattern&quot; value&#x3D;&quot;记录时间：%date%n线程ID:[%thread] %n日志级别：%-5level%n记录位置：%location%n消息描述：%property&#123;Message&#125;%n异常：%exception%n消息：%message%newline%n------------------------------------------%n&quot; &#x2F;&gt;    &lt;&#x2F;layout&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.LevelRangeFilter&quot;&gt;      &lt;levelMin value&#x3D;&quot;DEBUG&quot; &#x2F;&gt;      &lt;levelMax value&#x3D;&quot;INFO&quot; &#x2F;&gt;    &lt;&#x2F;filter&gt;    &lt;filter type&#x3D;&quot;log4net.Filter.DenyAllFilter&quot; &#x2F;&gt;  &lt;&#x2F;appender&gt;  &lt;logger name&#x3D;&quot;gdLog4net&quot; additivity&#x3D;&quot;false&quot;&gt;    &lt;level value&#x3D;&quot;DEBUG&quot; &#x2F;&gt;    &lt;appender-ref ref&#x3D;&quot;AccesssService_Err&quot; &#x2F;&gt;    &lt;appender-ref ref&#x3D;&quot;AccesssService_info&quot; &#x2F;&gt;  &lt;&#x2F;logger&gt;&lt;&#x2F;log4net&gt;</code></pre><pre class="language-none"><code class="language-none">public class LogHelper&#123;    private static ILog log &#x3D; null;    public static ILog Log    &#123;        get        &#123;            if (log &#x3D;&#x3D; null)            &#123;                &#x2F;&#x2F;log4.config表示log4的配置文件                string fileName &#x3D; Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;config&quot;, &quot;log4.config&quot;);                log4net.Config.XmlConfigurator.ConfigureAndWatch(new FileInfo(fileName));                log &#x3D; LogManager.GetLogger(&quot;gdLog4net&quot;);            &#125;            return log;        &#125;    &#125;&#125;</code></pre><h2 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h2><pre class="language-none"><code class="language-none">[assembly: log4net.Config.XmlConfigurator(ConfigFile &#x3D; &quot;log4net.config&quot;, ConfigFileExtension &#x3D; &quot;config&quot;, Watch &#x3D; true)]</code></pre><p>相关属性讲解，<br>ConfigFile:<br>ConfigFileExtension:根据类型加载<br>Watch</p><h2 id="代码4"><a href="#代码4" class="headerlink" title="代码4"></a>代码4</h2><pre class="language-none"><code class="language-none">using log4net;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace XmlRpcApp&#123;    internal class Logger    &#123;        private static readonly ILog loginfo &#x3D; LogManager.GetLogger(&quot;Log&quot;);&#x2F;&#x2F;这里的 loginfo 和 log4net.config 里的名字要一样        public static void WriteLog(string info)        &#123;            if (loginfo.IsInfoEnabled)            &#123;                loginfo.Info(info);            &#125;        &#125;        public static void WriteLog(string info, Exception ex)        &#123;            if (loginfo.IsErrorEnabled)            &#123;                loginfo.Error(info, ex);            &#125;        &#125;        public static void DebugLog(string info)        &#123;            if (loginfo.IsDebugEnabled)            &#123;                loginfo.Debug(info);            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> log4net </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual_Studio快捷键</title>
      <link href="/2022/10/26/Visual-Studio%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/10/26/Visual-Studio%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>很多时候快捷键能够很大层次的简化自己的双手，方便自己。所以在网上找到了一些VS相关的快捷键<br>具体内容如下<br>快速构建构造函数<br>输入 ctor 然后按 TAB 键</p><p>快速构建自动属性<br>在变量那里，右击鼠标，点“重构”–“封装字段”</p><p>Visual Studio快捷键 [VS2008&#x2F;VS2005]</p><hr><p>“cw” + Tab + Tab - Console.WriteLine();</p><p>“mbox” + Tab + Tab - Messagebox.Show();</p><p>“prop” + Tab + Tab - 含有Get、Set访问器的属性块</p><p>“propg” + Tab + Tab - 只读属性快</p><p>“propfull” + Tabl + Tab - 具有完整get、set访问器的属性快</p><p>封装属性的快捷键：ctrl+R+E<br>快速属性： 输入prop 两下TAB</p><p>VS系统通用快捷键：<br>比如#region的快捷键是：ctrl + k,s</p><p>1、自动排版(类似VC6中的Alt+F8）<br>编辑.格式化选定内容 Ctrl + K，Ctrl + F 根据周围的代码行，正确缩进选定的代码行。</p><p>2、注释与去掉注释功能。</p><p>编辑.注释选定内容 Ctrl + K，Ctrl + C 使用编程语言的正确注释语法将代码的当前行标记为注释。</p><p>编辑.取消注释选定内容 Ctrl + K，Ctrl + U 从代码的当前行中移除注释语法。</p><p>将插入点移动到文档中的下一个大括号处。<br>编辑.转到大括号 Ctrl + ] 将插入点移动到文档中的下一个大括号处。</p><p>编辑.向下滚动一行 Ctrl + 向下键 将文本向下滚动一行。仅可用于文本编辑器。<br>编辑.向上滚动一行 Ctrl + 向上键 将文本向上滚动一行。仅可用于文本编辑器。</p><p>怎么找到解决方案<br>视图.解决方案资源管理器 Ctrl + Alt + L 显示解决方案资源管理器，它列出当前解决方案中的项目和文件</p><p>显示“工具箱”<br>视图.工具箱 Ctrl + Alt + X 显示“工具箱”，其中包含可包括在代码中或与代码一起使用的控件和其他项。</p><p>清除项目中的所有断点<br>调试.删除所有断点 Ctrl + Shift + F9 清除项目中的所有断点。</p><p>调试.反汇编 Ctrl + Alt + D 显示“反汇编”窗口。<br>调试.切换断点 F9 在当前行设置或移除断点。</p><p>VS2008 快捷键<br>新建项目 Ctrl+shift+N<br>新建网站 shift+Alt+N<br>文件 Ctrl+N<br>打开项目&#x2F;解决方案 Ctrl+shift+O<br>打开网站 shift+Alt+O<br>打开文件 Ctrl+O<br>保存当前文件 Ctrl+S<br>全部保存 Ctrl+Shift+S<br>添加新项 Ctrl+Shift+A<br>添加现有项 Shift+Alt+A<br>添加类 Shift+Alt+C<br>撤消 Ctrl+Z<br>重复 Ctrl+Y<br>转到 Ctrl+G<br>循环应用剪贴板中的复制项Ctrl+Shift+V<br>设置文档的格式 Ctrl+E，D<br>设置选定内容的格式Ctrl+E，F<br>转换为大写 Ctrl+Shift+U<br>转换为小写 Ctrl+U<br>删除水平空白Ctrl+E，<br>查看空白Ctrl+E,S<br>自动换行Ctrl+E,W<br>渐进式搜索Ctrl+I<br>注释选定内容Ctrl+E,C<br>取消注释选定内容Ctrl+E,U<br>快速查找 Ctrl+F<br>快速替换 Ctrl+H<br>在文件中查找 Ctrl+Shift+F<br>查找下一个 F3<br>查找上一个 Shift+F3<br>在文件中替换 Ctrl+Shift+H<br>查找符号 Alt+F12<br>切换书签 Ctrl+B，T<br>启用书签 Ctrl+B，E<br>上一书签 Ctrl+B，P<br>下一书签 Ctrl+B，N<br>清除书签 Ctrl+B，C<br>添加任务列表快捷方式Ctrl+E，T<br>切换大纲显示展开Ctrl+M，M<br>切换所有大纲显示Ctrl+M，L<br>停止大纲显示 Ctrl+M，P<br>折叠到定义 Ctrl+M，O<br>生产方法存根 Ctrl+K，M<br>列出成员 Ctrl+K，L<br>参数信息 Ctrl+K，P<br>快速信息 Ctrl+K，I<br>完成单词 Ctrl+K，W<br>插入代码段 Ctrl+K，X<br>外侧代码 Ctrl+K，S—–就是可选#region<br>代码 F7<br>设计器 Shift+F7<br>服务器资源管理器 Ctrl+W，L<br>解决方案资源管理器 Ctrl+W，S<br>类视图 Ctrl+W，c<br>代码定义窗口Ctrl+W，D<br>对象浏览器 Ctrl+W，J<br>错误列表 Ctrl+W，E<br>输出 Ctrl+W，O<br>属性窗口 Ctrl+W，P<br>任务列表 Ctrl+W，T<br>工具箱 Ctrl+W，X<br>全屏显示shift+Alt+Enter<br>向后定位 Ctrl+-<br>向前定位 Ctrl+Shift+-<br>属性页 Shift+F4<br>查找符号结果 Ctrl+W，Q<br>书签窗口 Ctrl+W，B<br>命令窗口 Ctrl+W，A<br>文档大纲 Ctrl+W，U<br>资源视图 Ctrl+W，R<br>宏资源管理器 Alt+F8<br>Web浏览器 Ctrl+W，W<br>重命名 F2<br>提取方法 Ctrl+R，M<br>封装字段 Ctrl+R，E<br>提取接口 Ctrl+R，I<br>将局部变量提升为参数 Ctrl+R,P<br>移除参数 Ctrl+R，V<br>重新排列参数 Ctrl+R，O<br>生成解决方案 F6<br>生成当前项目 Shift+F6<br>启动调试 F5<br>继续 F5<br>全部中断 Ctrl+Alt+Break<br>停止调试 Shift+F5<br>重新启动 Ctrl+Shift+F5<br>开始执行（不调试）Ctrl+F5<br>异常 Ctrl+D，E<br>逐语句 F11<br>跳出 Shift+F11<br>逐过程 F10<br>切换断点 F9<br>删除所有断点 Ctrl+Shift+F9<br>断点 Ctrl+D，B<br>即时 Ctrl+D，I<br>快速监视 Ctrl+D，Q<br>监视1 Ctrl+D，W<br>监视2 Ctrl+D+W，2<br>监视3 Ctrl+D+W，3<br>监视4 Ctrl+D+W，4<br>自动窗口Ctrl+D，A<br>局部变量 Ctrl+D，L<br>调用堆栈 Ctrl+D，C<br>线程 Ctrl+D，T<br>切换当前线程标志状态 Ctrl+8<br>仅显示标志的线程 Ctrl+9<br>模块 Ctrl+D，M<br>进程 Ctrl+D，P<br>反编译 Ctrl+Alt+D<br>寄存器 Ctrl+D，R<br>内存1 Ctrl+D，Y<br>内存2 Ctrl+Alt+M，2<br>内存3 Ctrl+Alt+M，3<br>内存4 Ctrl+Alt+M，4<br>附加到进程 Ctrl+Alt+P<br>代码段管理器 Ctrl+K，Ctrl+B<br>运行当前宏 Ctrl+Shift+P<br>记录当前宏 Ctrl+Shift+R<br>宏IDE Alt+F11<br>当前上下文中的测试 Ctrl+R，T<br>解决方案中的所有测试 Ctrl+R，A<br>如何实现 Ctrl+F1，H<br>搜索 Ctrl+F1,S<br>目录 Ctrl+F1，C<br>索引 Ctrl+F1，I<br>帮助收藏夹 Ctrl+F1，F<br>动态帮助 Ctrl+F1，D<br>索引结果 Ctrl+F1，T</p><hr><p>VS2005 常用快捷键<br>调试快捷键</p><p>F6: 生成解决方案<br>Ctrl+F6: 生成当前项目<br>F7: 查看代码<br>Shift+F7: 查看窗体设计器<br>F5: 启动调试<br>Ctrl+F5: 开始执行(不调试)<br>Shift+F5: 停止调试<br>Ctrl+Shift+F5: 重启调试<br>F9: 切换断点<br>Ctrl+F9: 启用&#x2F;停止断点<br>Ctrl+Shift+F9: 删除全部断点<br>F10: 逐过程<br>Ctrl+F10: 运行到光标处<br>F11: 逐语句</p><p>编辑快捷键</p><p>Shift+Alt+Enter: 切换全屏编辑<br>Ctrl+B,T &#x2F; Ctrl+K,K: 切换书签开关<br>Ctrl+B,N &#x2F; Ctrl+K,N: 移动到下一书签<br>Ctrl+B,P: 移动到上一书签<br>Ctrl+B,C: 清除全部标签</p><p>Ctrl+I: 渐进式搜索<br>Ctrl+Shift+I: 反向渐进式搜索<br>Ctrl+F: 查找<br>Ctrl+Shift+F: 在文件中查找<br>F3: 查找下一个<br>Shift+F3: 查找上一个<br>Ctrl+H: 替换<br>Ctrl+Shift+H: 在文件中替换<br>Alt+F12: 查找符号(列出所有查找结果)<br>Ctrl+Shift+V: 剪贴板循环</p><p>Ctrl+左右箭头键: 一次可以移动一个单词<br>Ctrl+上下箭头键: 滚动代码屏幕，但不移动光标位置。<br>Ctrl+Shift+L: 删除当前行<br>Ctrl+M,M: 隐藏或展开当前嵌套的折叠状态<br>Ctrl+M,L: 将所有过程设置为相同的隐藏或展开状态<br>Ctrl+M,P: 停止大纲显示<br>Ctrl+E,S: 查看空白<br>Ctrl+E,W: 自动换行<br>Ctrl+G: 转到指定行<br>Shift+Alt+箭头键: 选择矩形文本<br>Alt+鼠标左按钮: 选择矩形文本<br>Ctrl+Shift+U: 全部变为大写<br>Ctrl+U: 全部变为小写</p><p>代码快捷键</p><p>Ctrl+J &#x2F; Ctrl+K,L: 列出成员<br>Ctrl+Shift+空格键 &#x2F; Ctrl+K,P: 参数信息<br>Ctrl+K,I: 快速信息<br>Ctrl+E,C &#x2F; Ctrl+K,C: 注释选定内容<br>Ctrl+E,U &#x2F; Ctrl+K,U: 取消选定注释内容</p><p>Ctrl+K,M: 生成方法存根<br>Ctrl+K,X: 插入代码段<br>Ctrl+K,S: 插入外侧代码</p><p>F12: 转到所调用过程或变量的定义</p><p>窗口快捷键</p><p>Ctrl+W,W: 浏览器窗口<br>Ctrl+W,S: 解决方案管理器<br>Ctrl+W,C: 类视图<br>Ctrl+W,E: 错误列表<br>Ctrl+W,O: 输出视图<br>Ctrl+W,P: 属性窗口<br>Ctrl+W,T: 任务列表<br>Ctrl+W,X: 工具箱<br>Ctrl+W,B: 书签窗口<br>Ctrl+W,U: 文档大纲</p><p>Ctrl+D,B: 断点窗口<br>Ctrl+D,I: 即时窗口<br>Ctrl+Tab: 活动窗体切换<br>Ctrl+Shift+N: 新建项目<br>Ctrl+Shift+O: 打开项目<br>Ctrl+Shift+S: 全部保存<br>Shift+Alt+C: 新建类<br>Ctrl+Shift+A: 新建项</p>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定期清理文件与文件夹</title>
      <link href="/2022/10/26/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2022/10/26/%E5%AE%9A%E6%9C%9F%E6%B8%85%E7%90%86%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="定期清理某种类型文件"><a href="#定期清理某种类型文件" class="headerlink" title="定期清理某种类型文件"></a>定期清理某种类型文件</h1><p>有的时候需要定期清理图片等。\n</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 定期清除文件&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;fileDirect&quot;&gt;文件夹&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;postFix&quot;&gt;文件后缀&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;saveDay&quot;&gt;保存天数&lt;&#x2F;param&gt;private static void DeleteFile(string fileDirect, string postFix, int saveDay)&#123;    DateTime nowtime &#x3D; DateTime.Now; &#x2F;&#x2F;获取当前时间    string[] files &#x3D; Directory.GetFiles(fileDirect, postFix, SearchOption.AllDirectories);  &#x2F;&#x2F;获取该目录下所有 .txt文件    foreach (string file in files)    &#123;        FileInfo fileInfo &#x3D; new FileInfo(file);        TimeSpan t &#x3D; nowtime - fileInfo.CreationTime;  &#x2F;&#x2F;当前时间  减去 文件创建时间        int day &#x3D; t.Days;        if (day &gt; saveDay)   &#x2F;&#x2F;保存的时间 ；  单位：天        &#123;            File.Delete(file);  &#x2F;&#x2F;删除超过时间的文件        &#125;    &#125;&#125;</code></pre><h2 id="使用方式–异步使用"><a href="#使用方式–异步使用" class="headerlink" title="使用方式–异步使用"></a>使用方式–异步使用</h2><pre class="language-none"><code class="language-none">private static void RegularDeleteImage()&#123;    int saveDays &#x3D; 0; &#x2F;&#x2F;保存天数，可根据实际需求定义    string path &#x3D; @&quot;C:\Users\Nestar\Pictures\Saved Pictures&quot;; &#x2F;&#x2F;保存数据的路径    &#x2F;&#x2F;开启一个异步线程定期检查是否可以删除文件    Task.Run(() &#x3D;&gt;    &#123;        while (true)        &#123;            DeleteFile(path, &quot;*.jpg&quot;, saveDays);            Thread.Sleep(1000 * 60 * 60 * 24); &#x2F;&#x2F;每隔24H检查一遍        &#125;    &#125;);&#125;</code></pre><h1 id="“yyMMdd”-命名的文件夹进行删除"><a href="#“yyMMdd”-命名的文件夹进行删除" class="headerlink" title="(“yyMMdd”)命名的文件夹进行删除"></a>(“yyMMdd”)命名的文件夹进行删除</h1><p>补充一个保留文件夹名称，删除其他文件夹的方法。\n<br>本来还想说这个方案好蠢，没想到蠢人竟是我自己。\n<br>在上面使用被驳回之后，立马用到了下面的删除文件夹以及子文件夹。\n<br>上面的方案是将文件根据创建的日期进行删除，这里是根据不同日期的图片放在依据日期命名的文件夹中。\n<br>然后依据日期命名的文件夹进行删除。\n</p><pre class="language-none"><code class="language-none">public static void RegularCleanFile()&#123;    int saveDays &#x3D; 0; &#x2F;&#x2F;保存天数，可根据实际需求定义    string path &#x3D; @&quot;C:\Users\Nestar\Pictures\Saved Pictures&quot;; &#x2F;&#x2F;保存数据的路径    var saveFileFolderList &#x3D; new List&lt;string&gt;(); &#x2F;&#x2F;保存哪些文件夹    for (int i &#x3D; 0; i &lt; saveDays; i++)    &#123;        var saveFile &#x3D; DateTime.Now.AddDays(-i).ToString(&quot;yyyyMMdd&quot;);&#x2F;&#x2F;这部分需要根据需要自己定制        saveFileFolderList.Add(saveFile);    &#125;    &#x2F;&#x2F;开启一个异步线程定期检查是否可以删除文件    Task.Run(() &#x3D;&gt;    &#123;        while (true)        &#123;            if (Directory.Exists(path))            &#123;                DirectoryInfo di &#x3D; new DirectoryInfo(path);                var fsiArr &#x3D; di.GetFileSystemInfos(); &#x2F;&#x2F;获取所有的文件、文件夹                foreach (var fsi in fsiArr)                &#123;                    if (fsi is DirectoryInfo) &#x2F;&#x2F;判断是否文件夹                    &#123;                        &#x2F;&#x2F;判断是否在删除范畴内                        if (!saveFileFolderList.Exists(o &#x3D;&gt; fsi.Name.Contains(o)))                        &#123;                            DirectoryInfo delDi &#x3D; new DirectoryInfo(fsi.FullName);                            delDi.Delete(true); &#x2F;&#x2F;删除文件夹及文件                        &#125;                    &#125;                &#125;            &#125;            Thread.Sleep(1000 * 60 * 60 * 6); &#x2F;&#x2F;每隔6H检查一遍        &#125;    &#125;);    &#125;</code></pre><p>既然有删除，那自然也要有创建文件夹，经过测试\n</p><ol><li>可以一次性创建多层目录，</li><li>创建的文件夹如果已经存在不会报错，也不会删除之前的文件夹重新创建，而是没有任何动作。<pre class="language-none"><code class="language-none">DirectoryInfo directoryInfo &#x3D; new DirectoryInfo($&quot;C:\\image\\&#123;DateTime.Now.ToString(&quot;yyMMdd&quot;)&#125;&quot;);directoryInfo.Create();</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 文件夹 </tag>
            
            <tag> 定期清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-连接SQLServer</title>
      <link href="/2022/10/23/C-%E8%BF%9E%E6%8E%A5SQLServer/"/>
      <url>/2022/10/23/C-%E8%BF%9E%E6%8E%A5SQLServer/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h1><p>万一有的时候需要我去连接SQL Server，这边提前准备\n</p><p>相关的代码如下\n</p><pre class="language-none"><code class="language-none">static void Main(string[] args)&#123;    &#x2F;&#x2F; 声明一个SqlConnectionStringBuilder对象    SqlConnectionStringBuilder scsb &#x3D; new SqlConnectionStringBuilder();    scsb.DataSource &#x3D; &quot;DESKTOP-BR0Q3FS\\SQLEXPRESS&quot;;    &#x2F;&#x2F; 设置数据源服务器，注意这里的单斜线变双斜线了    &#x2F;&#x2F;scsb.UserID &#x3D; &quot;sa&quot;;     &#x2F;&#x2F; 设置用户名    &#x2F;&#x2F;scsb.Password &#x3D; &quot;mima&quot;; &#x2F;&#x2F; 设置密码    scsb.InitialCatalog &#x3D; &quot;xiaoxieDatabase&quot;; &#x2F;&#x2F; 设置要访问的数据库    &#x2F;&#x2F;scsb.ConnectionString &#x3D; &quot;SSPI&quot;;    scsb.IntegratedSecurity &#x3D; true;    &#x2F;&#x2F; 创建连接    SqlConnection SqlCon &#x3D; new SqlConnection(scsb.ToString());    &#x2F;&#x2F; 打开数据库    SqlCon.Open();    &#x2F;&#x2F; 1、创建要执行的SQL查询语句    string str &#x3D; &quot;select Name from Teachers where Gender &#x3D; &#39;man&#39;&quot;;    &#x2F;&#x2F; 2、创建用于执行SQL查询语句的对象    SqlCommand SqlCom &#x3D; new SqlCommand(str, SqlCon);&#x2F;&#x2F; 参数1：SQL语句字符串。参数2：已经打开的数据库    &#x2F;&#x2F; 3、执行对象的SQL查询语句并接受结果    SqlDataReader Sdr &#x3D; SqlCom.ExecuteReader();    &#x2F;&#x2F; 4、读取结果的数据    while (Sdr.Read())    &#123;        Console.WriteLine(&quot;姓名：&quot; + Sdr[&quot;Name&quot;].ToString());    &#125;    Console.ReadLine();&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL Server </tag>
            
            <tag> 连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-TextBox仅数字等输入，离开检测</title>
      <link href="/2022/10/09/Form%E6%93%8D%E4%BD%9C-TextBox%E4%BB%85%E6%95%B0%E5%AD%97%E7%AD%89%E8%BE%93%E5%85%A5%EF%BC%8C%E7%A6%BB%E5%BC%80%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/10/09/Form%E6%93%8D%E4%BD%9C-TextBox%E4%BB%85%E6%95%B0%E5%AD%97%E7%AD%89%E8%BE%93%E5%85%A5%EF%BC%8C%E7%A6%BB%E5%BC%80%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="仅支持数字等输入"><a href="#仅支持数字等输入" class="headerlink" title="仅支持数字等输入"></a>仅支持数字等输入</h1><p>有的时候我们对于一些控件，希望它仅仅支持部分文档的输入。比如端口号应该只有数字或者分隔符。因此在有了在界面中设置仅支持某种输入的方法。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 设置Port只能输入数字与回车&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;sender&quot;&gt;&lt;&#x2F;param&gt;&#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;e&quot;&gt;&lt;&#x2F;param&gt;private void PortTextBox_KeyPress(object sender, KeyPressEventArgs e)&#123;    if (!((e.KeyChar &gt;&#x3D; 48 &amp;&amp; e.KeyChar &lt;&#x3D; 57) || e.KeyChar &#x3D;&#x3D; 8))    &#123;        e.Handled &#x3D; true;    &#125;&#125;</code></pre><h1 id="离开或者输入时的检测"><a href="#离开或者输入时的检测" class="headerlink" title="离开或者输入时的检测"></a>离开或者输入时的检测</h1><p>想了下好像没有必要<br>那就提一嘴，主要就是在控件的事件，在可视化界面中，放在属性旁边的选项，能够帮助实现部分的功能。<br>比如离开，进入，按键等。</p>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
          <category> TextBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Form操作 </tag>
            
            <tag> TextBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML-RPC</title>
      <link href="/2022/10/09/XML-RPC/"/>
      <url>/2022/10/09/XML-RPC/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_39024280&#x2F;article&#x2F;details&#x2F;120861419?spm&#x3D;1001.2101.3001.6661.1&amp;utm_medium&#x3D;distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120861419-blog-95950589.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source&#x3D;distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120861419-blog-95950589.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index&#x3D;1</code></pre><p>这个博客内容可以直接使用<br>一些使用心得<br>尝试了一下封装在系统类中，完全可以  </p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> XML-RPC </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 工作技巧 </tag>
            
            <tag> XML-RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-MessageBox</title>
      <link href="/2022/10/09/Form%E6%93%8D%E4%BD%9C-MessageBox/"/>
      <url>/2022/10/09/Form%E6%93%8D%E4%BD%9C-MessageBox/</url>
      
        <content type="html"><![CDATA[<p>参考文章<br><a href="https://blog.csdn.net/qq_44793656/article/details/124509495">https://blog.csdn.net/qq_44793656/article/details/124509495</a></p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_44793656&#x2F;article&#x2F;details&#x2F;124509495</code></pre>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Form操作 </tag>
            
            <tag> MessageBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-二次确认弹窗</title>
      <link href="/2022/10/09/Form%E6%93%8D%E4%BD%9C-%E4%BA%8C%E6%AC%A1%E7%A1%AE%E8%AE%A4%E5%BC%B9%E7%AA%97/"/>
      <url>/2022/10/09/Form%E6%93%8D%E4%BD%9C-%E4%BA%8C%E6%AC%A1%E7%A1%AE%E8%AE%A4%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<p>在一些比较关键的功能上可以让进行二次确认，避免因为误操作而导致的损失。<br>示例代码是用于二次确认用户的界面关闭，可以在此基础上进行修改。 </p><pre class="language-none"><code class="language-none">private void frmMain_FormClosing(object sender, FormClosingEventArgs e)&#123;    DialogResult Result &#x3D; MessageBox.Show(&quot;程序将被关闭，请确认是否继续&quot;,&quot;警告&quot;, MessageBoxButtons.OKCancel);    if (Result &#x3D;&#x3D; DialogResult.Cancel)    &#123;        e.Cancel &#x3D; true;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作技巧 </tag>
            
            <tag> Form操作 </tag>
            
            <tag> 二次确认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP设置</title>
      <link href="/2022/10/09/IP%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/10/09/IP%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="IP校验"><a href="#IP校验" class="headerlink" title="IP校验"></a>IP校验</h1><p>检查输入是否符合IP格式，建议与IP是否未空混合使用</p><pre class="language-none"><code class="language-none">public static bool IPCheck(string IP)&#123;    return Regex.IsMatch(IP, @&quot;^(([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$&quot;);&#125;</code></pre><h1 id="获取设备当前IP"><a href="#获取设备当前IP" class="headerlink" title="获取设备当前IP"></a>获取设备当前IP</h1><p>获取当前设备的ip</p><pre class="language-none"><code class="language-none">public string GetAddressIP()&#123;    string AddressIP &#x3D; string.Empty;    foreach (IPAddress _IPAddress in Dns.GetHostEntry(Dns.GetHostName()).AddressList)    &#123;        if (_IPAddress.AddressFamily.ToString() &#x3D;&#x3D; &quot;InterNetwork&quot;)        &#123;            AddressIP &#x3D; _IPAddress.ToString();        &#125;    &#125;    return AddressIP;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 工作技巧 </tag>
            
            <tag> IP设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-菜单栏与下拉框</title>
      <link href="/2022/10/09/Form%E6%93%8D%E4%BD%9C-%E8%8F%9C%E5%8D%95%E6%A0%8F%E4%B8%8E%E4%B8%8B%E6%8B%89%E6%A1%86/"/>
      <url>/2022/10/09/Form%E6%93%8D%E4%BD%9C-%E8%8F%9C%E5%8D%95%E6%A0%8F%E4%B8%8E%E4%B8%8B%E6%8B%89%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p>窗口上端的菜单栏<br>MenuItemInstallService<br>记得添加一个menuScrip属性的控件<br>设置之后依次添加，见天click事件也是可以的。<br>下拉框<br>combox<br>Combox.selectIndex表示当前所选择的值的编号<br>combox.index表示编号从0开始计数，0，1，2，3，4…  </p>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Form操作 </tag>
            
            <tag> 菜单栏 </tag>
            
            <tag> 下拉框 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form操作-TextBox显示服务状态</title>
      <link href="/2022/10/09/Form%E6%93%8D%E4%BD%9C-TextBox%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/"/>
      <url>/2022/10/09/Form%E6%93%8D%E4%BD%9C-TextBox%E6%98%BE%E7%A4%BA%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="TextBox显示状态（status）"><a href="#TextBox显示状态（status）" class="headerlink" title="TextBox显示状态（status）"></a>TextBox显示状态（status）</h1><p>在界面张添加timer控件，<br>设置enable&#x3D;true这个属性是是否启用，<br>interval&#x3D;1000此处单位为毫秒，这个属性是时间间隔<br>然后在事件中选择tick，绑定需要执行的方法。<br>状态文本可以显示在TextBox。Text中，可以将TextBox.Enable&#x3D;false这样界面中文本框就不能显示了。</p>]]></content>
      
      
      <categories>
          
          <category> Form操作 </category>
          
          <category> 工作技巧 </category>
          
          <category> TextBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Form操作 </tag>
            
            <tag> TextBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理员权限运行程序</title>
      <link href="/2022/10/09/%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/10/09/%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在工作中由于使用的系统进程，这个需要管理员权限才可以实现对于进程的访问。因此打包出来的程序也是需要系统权限的验证。  </p><h1 id="两种方案"><a href="#两种方案" class="headerlink" title="两种方案"></a>两种方案</h1><h2 id="方案1-通过应用程序服务清单进行权限设置"><a href="#方案1-通过应用程序服务清单进行权限设置" class="headerlink" title="方案1-通过应用程序服务清单进行权限设置"></a>方案1-通过应用程序服务清单进行权限设置</h2><p>这个设置会在exe上有管理员标志。运行程序时会索取管理员权限。需要注意的的是添加应用程序服务清单是在你的启动program，如果在别的program中添加不起作用。  </p><pre class="language-none"><code class="language-none">&lt;!-- UAC 清单选项     如果想要更改 Windows 用户帐户控制级别，请使用     以下节点之一替换 requestedExecutionLevel 节点。n&lt;requestedExecutionLevel  level&#x3D;&quot;asInvoker&quot; uiAccess&#x3D;&quot;false&quot; &#x2F;&gt;&lt;requestedExecutionLevel  level&#x3D;&quot;requireAdministrator&quot; uiAccess&#x3D;&quot;false&quot; &#x2F;&gt;&lt;requestedExecutionLevel  level&#x3D;&quot;highestAvailable&quot; uiAccess&#x3D;&quot;false&quot; &#x2F;&gt;    指定 requestedExecutionLevel 元素将禁用文件和注册表虚拟化。    如果你的应用程序需要此虚拟化来实现向后兼容性，则删除此    元素。--&gt;&lt;requestedExecutionLevel level&#x3D;&quot;requireAdministrator&quot; uiAccess&#x3D;&quot;false&quot; &#x2F;&gt;</code></pre><h2 id="方案2-手动索取管理员权限"><a href="#方案2-手动索取管理员权限" class="headerlink" title="方案2-手动索取管理员权限"></a>方案2-手动索取管理员权限</h2><p>此方案是在程序启动时检查是否管理员权限启动，如果不是就提示用户需要管理员权限启动，然后关闭程序。如果时管理员权限启动，则正常启动程序。<br>这里提供了一种如何在程序即将运行时，申请管理员权限的方案。  </p><pre class="language-none"><code class="language-none">using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Reflection;using System.Security.Principal;using System.ServiceProcess;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;namespace XmlRpcApp&#123;    static class Program    &#123;        [STAThread]        static void Main()        &#123;            var wi &#x3D; WindowsIdentity.GetCurrent();            var wp &#x3D; new WindowsPrincipal(wi);            bool runAsAdmin &#x3D; wp.IsInRole(WindowsBuiltInRole.Administrator);            if (!runAsAdmin)            &#123;                &#x2F;&#x2F; It is not possible to launch a ClickOnce app as administrator directly,                &#x2F;&#x2F; so instead we launch the app as administrator in a new process.                var processInfo &#x3D; new ProcessStartInfo(Assembly.GetExecutingAssembly().CodeBase);                &#x2F;&#x2F; The following properties run the new process as administrator                processInfo.UseShellExecute &#x3D; true;                processInfo.Verb &#x3D; &quot;runas&quot;;                &#x2F;&#x2F; Start the new process                try                &#123;                    Process.Start(processInfo);                &#125;                catch (Exception)                &#123;                    &#x2F;&#x2F; The user did not allow the application to run as administrator                    MessageBox.Show(&quot;This program requires administrator privileges to run&quot;);                &#125;                &#x2F;&#x2F; Shut down the current process                Application.Exit();            &#125;            else            &#123;                &#x2F;&#x2F; We are running as administrator                Application.EnableVisualStyles();                Application.SetCompatibleTextRenderingDefault(false);                Application.Run(new ClientApp());            &#125;        &#125;    &#125;&#125;</code></pre><p>参考文章链接如下所示</p>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> 管理员权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 工作技巧 </tag>
            
            <tag> 管理员权限程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改命名空间</title>
      <link href="/2022/10/09/%E4%BF%AE%E6%94%B9%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/10/09/%E4%BF%AE%E6%94%B9%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>参考链接<br><a href="https://www.jb51.net/article/252677.htm">https://www.jb51.net/article/252677.htm</a></p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;www.jb51.net&#x2F;article&#x2F;252677.htm</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 修改命名空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理.bat返回上一层目录</title>
      <link href="/2022/10/09/%E6%89%B9%E5%A4%84%E7%90%86-bat%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/10/09/%E6%89%B9%E5%A4%84%E7%90%86-bat%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E5%B1%82%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>批处理目前看到的应用只有win的。bat文件中<br>这次遇见的问题是我文件自动导出到下一层，但是我需要使用上一层的某个exe，这个就是需要对于批处理文件的路径有一定的认识<br>我需要C：\ batch \路径。我如何才能获得这条道路？ 它工作正常如果我给绝对路径 -  </p><pre class="language-none"><code class="language-none">%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe C:\batch\bin\ERecruitGenerateReportsWindowsService.exe</code></pre><p>您尝试使用%<del>1在目录结构中上升一级是创造性的并且语法完全无效。正确的语法同样简单 - 使用..\。 由于%</del>dp0以\结尾，因此不需要前导\。</p><pre class="language-none"><code class="language-none">%windir%\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe %~dp0..\bin\ERecruitGenerateReportsWindowsService.exe</code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 工作技巧 </category>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 工作技巧 </tag>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoResetEvent与Waitone与set</title>
      <link href="/2022/10/09/AutoResetEvent%E4%B8%8EWaitone%E4%B8%8Eset/"/>
      <url>/2022/10/09/AutoResetEvent%E4%B8%8EWaitone%E4%B8%8Eset/</url>
      
        <content type="html"><![CDATA[<p>AutoResetEvent a1 &#x3D; new AutoResetEvent(false);<br>不传入false默认为true，不会阻塞线程，所以必须传false。<br>WaitOne(int)； WaitOne(int,bool)； WaitOne(timespan,bool)；<br>第二个参数传true代表超时后由set()设置不阻塞线程，如果传入false，如:WaitOne(2000,false);当超过两秒后线程就解除阻塞了，也就是等第二次在进入此线程时候会直接执行并不会阻塞线程。<br>WaitOne返回值为true代表当前线程不阻塞，返回为false代表当前线程被阻塞。<br>WaitOne第二个参数：如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它(需要其他地方调用Set方法)，则为 true；否则为 false。<br>原文链接：<a href="https://blog.csdn.net/Liumotor/article/details/107085239">https://blog.csdn.net/Liumotor/article/details/107085239</a>  </p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;Liumotor&#x2F;article&#x2F;details&#x2F;107085239</code></pre><p>仔细想了下为什么会用到这个知识。应该是面对不能够确定处理时间，但是事件的触发又是不受到控制的。在用户去手动处理一些内容的时候，避免用户再次接到新的弹窗，影响用户的操作。因此需要阻塞当前线程，然后去处理之前线程提出的问题，等到问题处理完毕之后，恢复线程的运行。很巧妙的设定。  </p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> AutoResetEvent </category>
          
          <category> waitone </category>
          
          <category> set </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> AutoResetEvent </tag>
            
            <tag> waitone </tag>
            
            <tag> set </tag>
            
            <tag> 工作技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取列的构造方法以及对应的参数列表</title>
      <link href="/2022/10/09/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%97%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/"/>
      <url>/2022/10/09/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%97%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>顾名思义，仅仅知道类的名字的时候去构造函数会很困难，通过这种方法可以获取对应的构造函数。</p><pre class="language-none"><code class="language-none">Type type &#x3D; typeof(MethodTest);&#x2F;&#x2F; 输入参数：BindingFlags.Public，获取所有公开的构造函数Console.WriteLine(&quot;输入参数：BindingFlags.Public | BindingFlags.NonPublic，获取所有公开yu的构造函数：&quot;);ConstructorInfo[] infoArray2 &#x3D; type.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance);foreach (ConstructorInfo info in infoArray2)&#123;    Console.WriteLine(&quot;这是一个公开的构造方法&#123;0&#125;&quot;, info.IsPublic);    Console.WriteLine(&quot;这是一个静态的构造方法&#123;0&#125;&quot;, info.IsStatic);    foreach(ParameterInfo a in info.GetParameters())    &#123;        Console.WriteLine(a.ParameterType.ToString());    &#125;    &#125;Console.WriteLine();</code></pre><p>上面是对应的关键代码，下面是完整代码，演示如何去实现。</p><pre class="language-none"><code class="language-none">using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Reflection;using System.Runtime.InteropServices;using System.Threading.Tasks;using UnderAutomation.UniversalRobots.XmlRpc;namespace ReflectMethod&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            Type type &#x3D; typeof(MethodTest);            &#x2F;&#x2F; 输入参数：BindingFlags.Public，获取所有公开的构造函数            Console.WriteLine(&quot;输入参数：BindingFlags.Public | BindingFlags.NonPublic，获取所有公开yu的构造函数：&quot;);            ConstructorInfo[] infoArray2 &#x3D; type.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance);            foreach (ConstructorInfo info in infoArray2)            &#123;                Console.WriteLine(&quot;这是一个公开的构造方法&#123;0&#125;&quot;, info.IsPublic);                Console.WriteLine(&quot;这是一个静态的构造方法&#123;0&#125;&quot;, info.IsStatic);                foreach(ParameterInfo a in info.GetParameters())                &#123;                    Console.WriteLine(a.ParameterType.ToString());                &#125;                            &#125;            Console.WriteLine();            &#x2F;&#x2F;&#x2F;&#x2F; 输入参数：BindingFlags.Public，获取所有公开的构造函数            &#x2F;&#x2F;Console.WriteLine(&quot;输入参数：BindingFlags.Public | BindingFlags.Instance，获取所有公开的构造函数：&quot;);            &#x2F;&#x2F;ConstructorInfo[] infoArray3 &#x3D; type.GetConstructors(BindingFlags.Public | BindingFlags.Instance);            &#x2F;&#x2F;foreach (ConstructorInfo info in infoArray3)            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    Console.Write(info.IsStatic);            &#x2F;&#x2F;    Console.Write(info.GetParameters().ToString());            &#x2F;&#x2F;&#125;            &#x2F;&#x2F;Console.WriteLine();            &#x2F;&#x2F;Console.WriteLine(&quot;输入参数：BindingFlags.Static | BindingFlags.NonPublic，获取所有静态的构造函数：&quot;);            &#x2F;&#x2F;ConstructorInfo[] infoArray4 &#x3D; type.GetConstructors(BindingFlags.Static | BindingFlags.NonPublic);            &#x2F;&#x2F;foreach (ConstructorInfo info in infoArray4)            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    Console.Write(info.IsStatic);            &#x2F;&#x2F;    Console.Write(info.GetParameters().ToString());            &#x2F;&#x2F;&#125;            &#x2F;&#x2F;Console.WriteLine();            &#x2F;&#x2F;Console.WriteLine(&quot;输入参数：BindingFlags.NonPublic | BindingFlags.Instance，获取所有非公开的构造函数：&quot;);            &#x2F;&#x2F;ConstructorInfo[] infoArray5 &#x3D; type.GetConstructors(BindingFlags.NonPublic | BindingFlags.Instance);            &#x2F;&#x2F;foreach (ConstructorInfo info in infoArray5)            &#x2F;&#x2F;&#123;            &#x2F;&#x2F;    Console.Write(info.IsStatic);            &#x2F;&#x2F;    Console.Write(info.GetParameters().ToString());            &#x2F;&#x2F;&#125;            Console.ReadKey();                    &#x2F;&#x2F;&#x2F;&#x2F;反射获取 命名空间+类名            &#x2F;&#x2F;string className &#x3D; &quot;ReflectMethod.MethodTest&quot;;            &#x2F;&#x2F;string methodName &#x3D; &quot;Sleep&quot;;            &#x2F;&#x2F;int a;            &#x2F;&#x2F;a &#x3D; 10;            &#x2F;&#x2F;&#x2F;&#x2F;Type[] types &#x3D; &#123; typeof(string), typeof(string) &#125;;            &#x2F;&#x2F;Type[] types &#x3D; new Type[a];            &#x2F;&#x2F;&#x2F;&#x2F;传递参数            &#x2F;&#x2F;Object[] paras &#x3D; new Object[] &#123; &quot;name&quot;,&quot;18&quot; &#125;;            &#x2F;&#x2F;Type t &#x3D; Type.GetType(className);            &#x2F;&#x2F;object obj &#x3D; Activator.CreateInstance(t);            &#x2F;&#x2F;&#x2F;&#x2F;直接调用            &#x2F;&#x2F;MethodInfo method &#x3D; t.GetMethod(methodName,types);            &#x2F;&#x2F;method.Invoke(obj, paras);        &#125;    &#125;    class MethodTest    &#123;        string name;        public MethodTest(string name)        &#123;            this.name &#x3D; name;        &#125;        int age;        public MethodTest(int age)        &#123;            this.age &#x3D; age;        &#125;        public void Sleep(string name,int age)        &#123;            Console.WriteLine($&quot;You have bean man,you must sleep alone,&#123;name&#125;&quot;);        &#125;        public void Sleep(string name, string age)        &#123;            Console.WriteLine($&quot;You have bean &#123;age&#125; old,you must sleep alone,&#123;name&#125;&quot;);        &#125;    &#125;&#125;</code></pre><p>一些参数的说明<br>暂时掠过<br>通过方法名与参数获取对应的方法，不调用  </p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;传递参数string className &#x3D; &quot;ConsoleApp2.ClassSample&quot;;string methodName &#x3D; request.MethodName;var t &#x3D; Type.GetType(className);object obj &#x3D; Activator.CreateInstance(t);try&#123;    #region 查找对应方法    MethodInfo[] info &#x3D; t.GetMethods();    for (int i &#x3D; 0; i &lt; info.Length; i++)    &#123;        var md &#x3D; info[i];        &#x2F;&#x2F;方法名        string mothodName &#x3D; md.Name;        &#x2F;&#x2F;参数集合        ParameterInfo[] paramInfos &#x3D; md.GetParameters();        &#x2F;&#x2F;方法名相同且参数个数一样        if (mothodName &#x3D;&#x3D; methodName &amp;&amp; paramInfos.Length &#x3D;&#x3D; paras.Length)        &#123;            md.Invoke(obj, paras);        &#125;    &#125;    #endregion&#125;catch (Exception ex)&#123;    throw ex;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 工作技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 工作技巧 </tag>
            
            <tag> 类的构造函数与参数列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win服务的创建与卸载</title>
      <link href="/2022/10/09/Win%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2022/10/09/Win%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>win服务的创建，参考链接  </p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xiketang&#x2F;p&#x2F;16518053.html</code></pre><p><a href="https://www.cnblogs.com/xiketang/p/16518053.html">https://www.cnblogs.com/xiketang/p/16518053.html</a><br>可以参考这个链接中的环境配置  </p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_43783990&#x2F;article&#x2F;details&#x2F;123001345</code></pre><p><a href="https://blog.csdn.net/weixin_43783990/article/details/123001345">https://blog.csdn.net/weixin_43783990/article/details/123001345</a><br>win服务的删除，参考方法<br>第一种：通过Dos命令来 删除&#x2F;卸载服务  </p><ol><li>开始 - 运行 -“cmd”。  </li><li>进入Dos命令行，输入命令：<br>sc delete VMUSBArbService<br>注意：VMUSBArbService是服务名称。<br>当然：也可以通过：sc –help 查看sc命令参数等信息等。<br>第二种方法：直接修改注册表 删除&#x2F;卸载服务  </li><li>开始 - 运行 - “regedit”。  </li><li>在“HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices”中删除相应的 键值   即可！<br>额外的小tips<br>win+r cmd  services.msc<br>查看目前正在运行的服务<br>安装的目录文件路径<br>C:\Windows\Microsoft.NET\Framework\v4.0.30319</li></ol><p>在新建项目中选择，Windows服务<br>在service.cs中添加两个服务，一个serviceProcessInstaller<br>一个是serviceInstall,<br>然后设置他们对应的属性。<br>servicePrcessInstaller主要是设置Account，设置成为LocalSystem<br>这个比较重要<br>serviceInstall设置ServiceName，这个是服务名称<br>DisplayName，这个是展示的名称<br>StartType这个是触发方式<br>1.Description：表示服务说明（描述服务是干什么的）；<br>2.DisplayName：表示友好名称，可以理解为服务名的别名；<br>3.ServiceName：表示服务名，此为真正的服务名，与DisplayName是有区别的哦，是系统识别的依据；<br>这三个属性在WIN7及更高版本操作系统中，同属性但表示却不同：<br>本地服务列表中：（即：services.msc）<br>名称列显示的是DisplayName，<br>描述列显示的是Description。  </p><p>在WINDOWS任务管理器中的服务选项卡列表中：<br>名称列显示的是ServiceName，<br>描述列显示的是DisplayName。<br>本人之前就是被这三个属性给搞混了，出现安装成功，在任务管理器的服务列表中可以看到，但在服务列表中怎么也找不到，其实是将ServiceName与DisplayName搞错了。  </p><p>在生成的Onstart与Onclose中填入你想要开始与结束的时候触发的方法。<br>tips：服务需要结合管理员权限一节，这样运行不会出现因为管理员权限方面的问题。<br>还有如果是在path地方出现问题，考虑是因为自己的运行的城西x64或者x86的环境的问题。  </p>]]></content>
      
      
      <categories>
          
          <category> 工作技巧 </category>
          
          <category> Win服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作技巧 </tag>
            
            <tag> Win服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据方法名与参数列表调用对应方法</title>
      <link href="/2022/10/09/%E6%A0%B9%E6%8D%AE%E6%96%B9%E6%B3%95%E5%90%8D%E4%B8%8E%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E8%B0%83%E7%94%A8%E5%AF%B9%E5%BA%94%E6%96%B9%E6%B3%95/"/>
      <url>/2022/10/09/%E6%A0%B9%E6%8D%AE%E6%96%B9%E6%B3%95%E5%90%8D%E4%B8%8E%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E8%B0%83%E7%94%A8%E5%AF%B9%E5%BA%94%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>顾名思义，有的时候会使用RPC技术来实现一些方法的远程调用。有时候因为是使用其他人编写好的方法，让自己不能像xmlrpc.net描述的那种进行直接调用，但是可以获得需要调用的方法名称与参数列表，以及对应的值。面对这样的情况，就有了以下的代码。<br>这里是主要的实现方法<br>值得注意的点有  </p><ol><li>getmethod后面如果不设置types那样如果面对有重载的函数就会直接报错</li><li>activator。createInstanc（），第一个参数是类的名称，后面的参数是实例化类所需要的参数。<pre class="language-none"><code class="language-none">&#x2F;&#x2F;反射获取 命名空间+类名string className &#x3D; &quot;ReflectMethod.MethodTest&quot;;string methodName &#x3D; &quot;Sleep&quot;;Type[] types &#x3D; &#123; typeof(string), typeof(string) &#125;;&#x2F;&#x2F;Type[] types &#x3D; new Type[a];&#x2F;&#x2F;传递参数Object[] paras &#x3D; new Object[] &#123; &quot;name&quot;, &quot;18&quot; &#125;;Type t &#x3D; Type.GetType(className);object obj &#x3D; Activator.CreateInstance(t,1);&#x2F;&#x2F;直接调用MethodInfo method &#x3D; t.GetMethod(methodName, types);method.Invoke(obj, paras);Console.ReadKey();</code></pre>下面是用于验证的方法。<br>验证上面的方案是否成功。<pre class="language-none"><code class="language-none">class MethodTest&#123;    string name;    public MethodTest(string name)    &#123;        this.name &#x3D; name;    &#125;    int age;    public MethodTest(int age)    &#123;        this.age &#x3D; age;    &#125;    public void Sleep(string name,int age)    &#123;        Console.WriteLine($&quot;You have bean man,you must sleep alone,&#123;name&#125;&quot;);    &#125;    public void Sleep(string name, string age)    &#123;        Console.WriteLine($&quot;You have bean &#123;age&#125; old,you must sleep alone,&#123;name&#125;&quot;);    &#125;&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实用小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 部分内容的总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat破解</title>
      <link href="/2022/10/09/Navicat%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/10/09/Navicat%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<br><a href="https://www.cnblogs.com/wjdzh/p/16523956.html#_label1">https://www.cnblogs.com/wjdzh/p/16523956.html#_label1</a><br>安装包我的百度网盘，经过实际体验可以破解。  </p>]]></content>
      
      
      <categories>
          
          <category> 破解软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OFFICE破解</title>
      <link href="/2022/10/09/OFFICE%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/10/09/OFFICE%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>可以用过OFFICE tools进行下载office<br>然后通过HEUkms这个软件进行破解升级<br>实际效果win11升级激活码激活成功。<br>office 激活，下载office的软件。office tool plus<br>下载后负责激活的软件heu kms。<br>heu kms的GitHub官网是<br><a herf="https://github.com/zbezj/HEU_KMS_Activator"></a> </p>]]></content>
      
      
      <categories>
          
          <category> 破解软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
            <tag> OFFICE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法启动计算机上的服务</title>
      <link href="/2022/10/09/%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%AE%A1%E7%AE%97%E6%9C%BA-%E4%B8%8A%E7%9A%84%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/10/09/%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%AE%A1%E7%AE%97%E6%9C%BA-%E4%B8%8A%E7%9A%84%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述1"><a href="#问题描述1" class="headerlink" title="问题描述1"></a>问题描述1</h1><p>无法启动计算机”.”上的服务****<br>内部异常<br>Win32Exception:服务没有及时响应启动或控制请求。  </p><h2 id="问题发生场景"><a href="#问题发生场景" class="headerlink" title="问题发生场景"></a>问题发生场景</h2><p>创建win服务，安装与卸载正常，一旦点开start就会报错。<br>今天遇见了这个问题。花了两天时间排查了一遍。经过排查，寻找到了原因。<br>主要的原因就是系统类的start的时候首先要加载类本身。但是因为类本身具有的某个变量，实例化了，但是实例化的过程有错误。这就导致类的加载失败，引起启动服务异常。  </p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>将类中的实例改成仅仅声明，而不去实例。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;觉得是符合代码规范的。实际上错误还在。需要结合下面的方案一起使用。</li><li>将原本的错误进行修改，实例化类的错误原因进行找出并修改，问题很有可能是空赋值即对于null属性进行操作而导致的问题。</li></ol><h1 id="问题描述2"><a href="#问题描述2" class="headerlink" title="问题描述2"></a>问题描述2</h1><p>Win服务start的时候快速打开然后立刻关闭。  </p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>这个与上面原因基本一致，只不过这个实例变量存在于start方法中，方法响应快速，将原本应该打开的实例化的类因为原来的代码错误，快速被清理掉，引起服务的快速关闭。</p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>将原本的错误进行修改，实例化类的错误原因进行找出并修改，问题很有可能是空赋值即对于null属性进行操作而导致的问题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>需要养成良好的编码习惯，在class中仅仅声明而不去实例化。<br>注意初始化类时的一些基本变量的赋值是否会为null，是否支持null。</li><li>初始化为空的问题一种表现形式：在开始的时候因为赋值为空，不能够执行，或者执行报错。<br>再经过某些操作后，如赋值等。问题不出现，程序运行正常。<br>再重新生成解决方案后，问题依旧存在。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 平时学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 事件 </tag>
            
            <tag> 工作问题 </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#事件学习-学习日志（1）</title>
      <link href="/2022/09/21/C-%E4%BA%8B%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%881%EF%BC%89/"/>
      <url>/2022/09/21/C-%E4%BA%8B%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="事件模型的五个组成部分"><a href="#事件模型的五个组成部分" class="headerlink" title="事件模型的五个组成部分"></a>事件模型的五个组成部分</h2><ol><li>事件的拥有者（event source,对象）</li><li>事件成员（event，成员）</li><li>事件的响应者（event subscriber，对象）</li><li>事件处理器（event handle，成员）——-本质上是一个回调方法</li><li>事件订阅–把事件处理器与事件关联在一起，本质上是一种以委托类型为基础的“约定”。</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>事件处理器是成员方法</li><li>挂接事件处理器的时候，可以使用委托实例，也可以直接使用方法名，这是个“语法糖”</li><li>事件处理器对事件的订阅不是随意的，匹配与否由生命事件时所使用的委托类型来检测</li><li>事件可以是同步调用也可以是异步调用。</li></ol><p>事件的几种情况</p><h1 id="当时间的拥有者与事件的响应者不同的时候"><a href="#当时间的拥有者与事件的响应者不同的时候" class="headerlink" title="当时间的拥有者与事件的响应者不同的时候"></a>当时间的拥有者与事件的响应者不同的时候</h1><p>示例代码<br>这个代码主要是使用了Timer类中的timer.elapsed作为事件的成员，作用是在一定的事件后触发事件处理器<br>最后需要加一个ReadLine不然会直接退出。<br>Intercal属性的作用是设置事件触发的间隔时间，这里设置的一秒钟。<br>主体部分</p><pre class="language-none"><code class="language-none">internal class Program&#123;    static void Main(string[] args)    &#123;        Timer timer &#x3D; new Timer();        timer.Interval &#x3D; 1000;        Boy boy &#x3D; new Boy();        timer.Elapsed +&#x3D; Boy.Action;        timer.Start();        Console.ReadLine();    &#125;&#125;</code></pre><p>Boy类</p><pre class="language-none"><code class="language-none">internal class Boy&#123;    public Boy()    &#123;    &#125;    internal static void Action(object sender, ElapsedEventArgs e)    &#123;        Console.WriteLine(&quot;jack&quot;);    &#125;&#125;</code></pre><p>另一种的形式的实现</p><pre class="language-none"><code class="language-none">static void Main(string[] args)&#123;    &#x2F;&#x2F;# region 事件的拥有者与响应者不同    &#x2F;&#x2F;Timer timer &#x3D; new Timer();    &#x2F;&#x2F;timer.Interval &#x3D; 1000;    &#x2F;&#x2F;Boy boy &#x3D; new Boy();    &#x2F;&#x2F;timer.Elapsed +&#x3D; Boy.Action;    &#x2F;&#x2F;timer.Start();    &#x2F;&#x2F;Console.ReadLine();    &#x2F;&#x2F;# endregion    #region 事件的处理者是事件的拥有者字段    Form form &#x3D; new Form();    Controller controller &#x3D; new Controller(form);    form.ShowDialog();    #endregion&#125;</code></pre><p>事件的拥有者</p><pre class="language-none"><code class="language-none">class Controller &#123;    private Form from;    public Controller(Form form)    &#123;        if (form !&#x3D; null)        &#123;            from &#x3D; form;            this.from.Click +&#x3D; this.fromClicked;        &#125;    &#125;    private void fromClicked(object sender, EventArgs e)    &#123;        this.from.Text &#x3D; DateTime.Now.ToString();    &#125;&#125;</code></pre><h1 id="当事件的处理者与事件的拥有者是同一个"><a href="#当事件的处理者与事件的拥有者是同一个" class="headerlink" title="当事件的处理者与事件的拥有者是同一个"></a>当事件的处理者与事件的拥有者是同一个</h1><pre class="language-none"><code class="language-none">static void Main(string[] args)&#123;    #region 事件的处理者是事件的拥有者字段    MyForm form &#x3D; new MyForm();    form.Click +&#x3D; form.FormClicked;    form.ShowDialog();    #endregion&#125;</code></pre><p>事件的拥有者与响应者都是form，此处选择继承的原因是form类是微软写死的，自己无法构成事件的相应，<br>但是你可以通过将继承，然后修改自己继承后的类，实现之前没有实现的功能。</p><pre class="language-none"><code class="language-none">internal class Program&#123;    static void Main(string[] args)    &#123;        &#x2F;&#x2F;# region 事件的拥有者与响应者不同        &#x2F;&#x2F;Timer timer &#x3D; new Timer();        &#x2F;&#x2F;timer.Interval &#x3D; 1000;        &#x2F;&#x2F;Boy boy &#x3D; new Boy();        &#x2F;&#x2F;timer.Elapsed +&#x3D; Boy.Action;        &#x2F;&#x2F;timer.Start();        &#x2F;&#x2F;Console.ReadLine();        &#x2F;&#x2F;# endregion        #region 事件的处理者是事件的拥有者字段        MyForm form &#x3D; new MyForm();        form.Click +&#x3D; form.FormClicked;        form.ShowDialog();        #endregion    &#125;&#125;</code></pre><h1 id="事件的响应者是事件的拥有者某个成员"><a href="#事件的响应者是事件的拥有者某个成员" class="headerlink" title="事件的响应者是事件的拥有者某个成员"></a>事件的响应者是事件的拥有者某个成员</h1><p>此处的例子中事件的响应者是按钮，事件的拥有者是form</p><pre class="language-none"><code class="language-none">static void Main(string[] args)&#123;    #region 事件的处理者是事件的拥有者字段    MyForm form &#x3D; new MyForm();    form.Click +&#x3D; form.FormClicked;    form.ShowDialog();    #endregion&#125;</code></pre><p>下面是对应的form的设计</p><pre class="language-none"><code class="language-none">internal class MyForm:Form&#123;    private TextBox textBox;    private Button button;    public MyForm()    &#123;        this.textBox &#x3D; new TextBox();        this.button &#x3D; new Button();        this.Controls.Add(this.textBox);        this.Controls.Add(this.button);        this.button.Click +&#x3D; this.ButtonCliked;        this.button.Top &#x3D; 20;    &#125;    private void ButtonCliked(object sender, EventArgs e)    &#123;        this.Text &#x3D; DateTime.Now.ToString();    &#125;&#125;</code></pre><pre class="language-none"><code class="language-none">&#96;&#96;&#96;</code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>耦合与内聚学习-学习日志（4）</title>
      <link href="/2022/09/14/C-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%884%EF%BC%89/"/>
      <url>/2022/09/14/C-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>软件要做到高内聚，低耦合。<br>内聚就是一个模块内部各成分之间相关联的成都的度量<br>耦合就是程序结构中哥哥模块的相互关联的度量  </p><h2 id="内聚的分类：由高到低"><a href="#内聚的分类：由高到低" class="headerlink" title="内聚的分类：由高到低"></a>内聚的分类：由高到低</h2><p>内聚的分类：由高到低<br>功能内聚：知模块内的所有元素共同作用完成一个功能，缺一不可。<br>顺序内聚：一个模块中的哥哥处理元素都密切像关于同一个功能且必须顺序执行，迁移功能元素的输出就是下一个功能元素的输入。<br>通信内聚：模块内所有处理元素都在同一个数据结构中。<br>过程内聚：一个模块完成多个任务，这些任务必须按照指定的过程执行。<br>瞬时内聚：把需要同时执行的任务或者动作组合在一起（例如初始化模块）<br>逻辑内聚：模块完成逻辑上相关的一组任务。<br>偶然内聚：一个模块内的各个处理元素之间没有任何联系或者有松散的联系  </p><h2 id="耦合的分类：由高到低"><a href="#耦合的分类：由高到低" class="headerlink" title="耦合的分类：由高到低"></a>耦合的分类：由高到低</h2><p>耦合的分类：由高到低<br>内容耦合：一个模块直接使用另一个模块的内部数据，或者通过非正常入口转入另个一模块内部是，这种耦合关系叫做内容耦合<br>公共耦合:一组模块访问一个公共的数据环境，如全局数据变量<br>外部耦合：一组模块访问一个公共变量，这里指的是基本数据类型而不是数据结构躲着说是对象。<br>控制耦合：一个模块调用另一个模块的时候，传递的是控制变量，被调用模块通过该控制变量的值选择执行模块内莫伊功能，那么也就是说被调用的模块应该具有多个功能。<br>标记耦合：耦合模块之间以数据结构传递（比如在java中，传递就是一个对象）<br>数据耦合：耦合模块之间有调用关系，传递的是简单数据类型的值。<br>无直接耦合：两个模块之间没有直接的关系，他们从属于不同模块的控制与调用，它们之间不传递任何信息。  </p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础学习 </tag>
            
            <tag> 软件工程 </tag>
            
            <tag> 内聚 </tag>
            
            <tag> 耦合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语法学习-学习日志（3）</title>
      <link href="/2022/09/12/C-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%883%EF%BC%89/"/>
      <url>/2022/09/12/C-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前言，此处代码使用VS2022，。net6的模式，全部都是在主函数的个实例，所以可以直接实例化一些类。<br>一些工作中遇见的不懂得语法进行学习<br>主要分为1.反射，2.特性，3.委托，4.？？与？。等，5.where<br>6.class类一些基础特点，7.as的作用。</p><h1 id="一、委托"><a href="#一、委托" class="headerlink" title="一、委托"></a>一、委托</h1><p>委托两类：C#类提供的，自定义委托</p><h2 id="C-提供的委托（参数可有可无与返回值一定没有）action"><a href="#C-提供的委托（参数可有可无与返回值一定没有）action" class="headerlink" title="C#提供的委托（参数可有可无与返回值一定没有）action"></a>C#提供的委托（参数可有可无与返回值一定没有）action</h2><p>自定义个类与方法</p><pre class="language-none"><code class="language-none">class Calculator&#123;public void Report()&#123;Console.WriteLinr(&quot;I have 3 methods&quot;);&#125;public int ADD(int a,int b)&#123;int result &#x3D; a+b;return result;&#125;public int SUB(int a,int b)&#123;int result &#x3D; a-b;return result;&#125;&#125;</code></pre><p>调用方法<br>三种调用结果相同<br>第一种没有使用委托<br>后两种可以是基本相同</p><pre class="language-none"><code class="language-none">static void Main(string &#123;&#125; args)&#123;Calulator calculator new Calculator();&#x2F;&#x2F;acton只想方法Action action &#x3D; new Action(calculator.Report);&#x2F;&#x2F;以下三种方法调用结果相同&#x2F;&#x2F;直接调用calculator.Report();&#x2F;&#x2F;使用委托间接调用action.Invoke();&#x2F;&#x2F;Invoke也可以省略掉action();&#125;</code></pre><h2 id="C-提供的委托（有参数与返回值）function"><a href="#C-提供的委托（有参数与返回值）function" class="headerlink" title="C#提供的委托（有参数与返回值）function"></a>C#提供的委托（有参数与返回值）function</h2><p>调用方法</p><pre class="language-none"><code class="language-none">static void Main(string &#123;&#125; args)&#123;Calulator calculator new Calculator();Func&lt;int,int,int&gt; fun1 &#x3D; new Fun&lt;int,int,int&gt;(calculator.ADD);Func&lt;int,int,int&gt; fun2 &#x3D; new Fun&lt;int,int,int&gt;(calculator.AUB);int x&#x3D;100;int y &#x3D; 200;int z &#x3D; 0;z &#x3D; fun1(x,y);Console.WriteLine(z);z&#x3D;fun2(x,y);Console.WriteLine(z);&#125;</code></pre><h2 id="C-自定义委托"><a href="#C-自定义委托" class="headerlink" title="C#自定义委托"></a>C#自定义委托</h2><p>委托就是一种类<br>注意声明委托的位置（一般写在命名空间下），可能会引起嵌套类<br>委托与所封装的方法必须“类型兼容”<br>返回值与参数列表的数据类型需要一致<br>以下是委托的声明</p><pre class="language-none"><code class="language-none">public delegate int Calc(int x, int y);</code></pre><p>以下是实现委托的类  </p><pre class="language-none"><code class="language-none">clas Calculator&#123;public int Add(int a, int b)&#123;retutn a+b;&#125;public int Sub(int a,int b)&#123;return a-b;&#125;&#125;</code></pre><p>以下是委托的具体实现<br>具不具有Invoke都是一样的。 </p><pre class="language-none"><code class="language-none">class Program&#123;static void Main(string[] args)&#123;Calculator calculator &#x3D; new Calculator():Calc calc1&#x3D; new Calc(calculator.Add(int a,int b));Calc calc2&#x3D; new Calc(calculator.Sub(int a,int b));int a&#x3D;10;int b&#x3D;30;int c&#x3D;0;c&#x3D;calc1.Invoke(a,b);Console.WriteLine(c);c&#x3D;calc2.Invoke(a,b);Console.WriteLine(c);c&#x3D;calc2(a,b);Console.WriteLine(c);&#125;&#125;</code></pre><h2 id="委托的一般使用"><a href="#委托的一般使用" class="headerlink" title="委托的一般使用"></a>委托的一般使用</h2><p>一般使用方法把方法当作参数传给另一个方法<br>这又可以分为两种用法<br>方法1 模板方法<br>借用指定的外部方法来产生结果</p><ol><li>相当于“填空题”</li><li>常位于代码中部</li><li>常用于委托有返回值<br>方法2 回调方法（callback），调用指定的外部方法</li><li>相当于“流水线”</li><li>常位于代码末尾</li><li>常委托无返回值</li></ol><h3 id="模板方法的例子"><a href="#模板方法的例子" class="headerlink" title="模板方法的例子"></a>模板方法的例子</h3><pre class="language-none"><code class="language-none">&#x2F;*这个部分主要是对于委托的一些使用测试， * 四个类，产品类product-具有产品的名称属性 * 包装类box-将产品包装起来，返回一个产品类的参数 * 进行包装类warrybox-具有一个方法wProduct 参数（是一个返回类型为Product类型的，参数为空的方法），返回值是（box类型） * 产品工厂类ProductFactory-具有两个无参数，返回类型为product类型的方法； * 主函数中引用了两个func1，func2分别采用两个方法。 *&#x2F;&#x2F;&#x2F;此处是实例化两个类的实例，他们都是一个非静态函数，需要实例化才能调用对应的方法。虽然好像没有真的使用，但是可能真的指示&#x2F;&#x2F;也是需要的。WaryProduct a&#x3D;new WaryProduct();ProductFactory b &#x3D; new ProductFactory();Func&lt;Product&gt; fun1 &#x3D; new Func&lt;Product&gt;(b.Pizza);Func&lt;Product&gt; fun2 &#x3D; new Func&lt;Product&gt;(b.Cola);Box box1 &#x3D; a.wProduct(fun1);Console.WriteLine(box1.product.name);Box box2 &#x3D; a.wProduct(fun2);Console.WriteLine(box2.product.name);class Product&#123;    public string name &#123; get; set; &#125;&#125;class Box&#123;    public Product product &#123; get; set; &#125;&#125;class WaryProduct&#123;    public Box wProduct(Func&lt;Product&gt; getProduct)    &#123;        Product product &#x3D; getProduct();        Box box &#x3D; new Box();        box.product &#x3D; product;        return box;    &#125;&#125;class ProductFactory&#123;    public Product Pizza()    &#123;        Product product &#x3D; new Product();        product.name &#x3D; &quot;pizza&quot;;        return product;    &#125;    public Product Cola()    &#123;        Product product &#x3D; new Product();        product.name &#x3D; &quot;Cola&quot;;        return product;    &#125;&#125;</code></pre><h3 id="回调方法的使用"><a href="#回调方法的使用" class="headerlink" title="回调方法的使用"></a>回调方法的使用</h3><p>对比上一种的使用，回调方法主要是在某种情况下的调用，例如pizza的价格大于50时，执行回调方法。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more information&#x2F;*这个部分主要是对于委托的一些使用测试， * 四个类，产品类product-具有产品的名称属性 * 包装类box-将产品包装起来，返回一个产品类的参数 * 进行包装类warrybox-具有一个方法wProduct 参数（是一个返回类型为Product类型的，参数为空的方法），返回值是（box类型） * 产品工厂类ProductFactory-具有两个无参数，返回类型为product类型的方法； * 主函数中引用了两个func1，func2分别采用两个方法。 *&#x2F;&#x2F;&#x2F;此处是实例化两个类的实例，他们都是一个非静态函数，需要实例化才能调用对应的方法。虽然好像没有真的使用，但是可能真的指示&#x2F;&#x2F;也是需要的。WaryProduct a&#x3D;new WaryProduct();ProductFactory b &#x3D; new ProductFactory();Logger c &#x3D; new Logger();Func&lt;Product&gt; fun1 &#x3D; new Func&lt;Product&gt;(b.Pizza);Func&lt;Product&gt; fun2 &#x3D; new Func&lt;Product&gt;(b.Cola);Action&lt;Product&gt; fun3 &#x3D; new Action&lt;Product&gt;(c.Log);Box box1 &#x3D; a.wProduct(fun1, fun3);Console.WriteLine(box1.product.name);Box box2 &#x3D; a.wProduct(fun2, fun3);Console.WriteLine(box2.product.name);class Product&#123;    public string name &#123; get; set; &#125;    public int price &#123; get; set; &#125;&#125;class Box&#123;    public Product product &#123; get; set; &#125;&#125;class Logger&#123;    public void Log(Product product)    &#123;        Console.WriteLine(&quot;Product &#123;0&#125; is created at &#123;1&#125; ,its price is &#123;2&#125;&quot;            , product.name, DateTime.UtcNow, product.price);    &#125;&#125;class WaryProduct&#123;    public Box wProduct(Func&lt;Product&gt; getProduct,Action&lt;Product&gt; LogCallBack)    &#123;        Product product &#x3D; getProduct();        Box box &#x3D; new Box();        box.product &#x3D; product;        if (box.product.price &gt; 50)            LogCallBack(box.product);        return box;    &#125;&#125;class ProductFactory&#123;    public Product Pizza()    &#123;        Product product &#x3D; new Product();        product.name &#x3D; &quot;pizza&quot;;        product.price &#x3D; 60;        return product;    &#125;    public Product Cola()    &#123;        Product product &#x3D; new Product();        product.name &#x3D; &quot;Cola&quot;;        product.price&#x3D;40;        return product;    &#125;&#125;</code></pre><h2 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h2><p>MulticastDelegate<br>多播委托就是用一个委托执行多个委托，执行顺序是根据添加顺序<br>单播委托就是普通形态<br>例如下面这种代码  </p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more informationStudent stu1 &#x3D; new Student() &#123; Id &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;Student stu2 &#x3D; new Student() &#123; Id &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;Student stu3 &#x3D; new Student() &#123; Id &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;Action action1 &#x3D; new Action(stu1.DoHomeWork);Action action2 &#x3D; new Action(stu2.DoHomeWork);Action action3 &#x3D; new Action(stu3.DoHomeWork);action1.Invoke();action2.Invoke();action3.Invoke();class Student&#123;    public int Id &#123; get; set; &#125;    public ConsoleColor PenColor &#123; get; set; &#125;    public void DoHomeWork()    &#123;        Console.ForegroundColor &#x3D; this.PenColor;        for(int i &#x3D; 0; i &lt; 5; i++)        &#123;            Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s)&quot;,this.Id,i);            Thread.Sleep(1000);        &#125;    &#125;&#125;</code></pre><p>多播委托举例  </p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more informationStudent stu1 &#x3D; new Student() &#123; Id &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;Student stu2 &#x3D; new Student() &#123; Id &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;Student stu3 &#x3D; new Student() &#123; Id &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;Action action1 &#x3D; new Action(stu1.DoHomeWork);Action action2 &#x3D; new Action(stu2.DoHomeWork);Action action3 &#x3D; new Action(stu3.DoHomeWork);action1 +&#x3D; action2;action1 +&#x3D; action3;action1();class Student&#123;    public int Id &#123; get; set; &#125;    public ConsoleColor PenColor &#123; get; set; &#125;    public void DoHomeWork()    &#123;        Console.ForegroundColor &#x3D; this.PenColor;        for(int i &#x3D; 0; i &lt; 5; i++)        &#123;            Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s)&quot;,this.Id,i);            Thread.Sleep(1000);        &#125;            &#125;&#125;</code></pre><h2 id="委托的高级使用-隐式异步调用"><a href="#委托的高级使用-隐式异步调用" class="headerlink" title="委托的高级使用-隐式异步调用"></a>委托的高级使用-隐式异步调用</h2><p>每一个运行的程序都是一个进程<br>每一个进程可以有一个或者多个线程（therd）<br>同步调用是在同一个线程内<br>异步调用的底层机理是多线程<br>串行&#x3D;&#x3D;同步&#x3D;&#x3D;单线程，并行&#x3D;&#x3D;异步&#x3D;&#x3D;多线程<br>同步调用可以是间接调用，也可以是直接调用。上面这个例子就是间接调用，属于同步调用。<br>BegunInvoke(param1,param2)<br>param1是回调函数，第二个参数通常为null<br>此处运行失败，好像是这个版本VS不支持隐式的异步调用。  </p><pre class="language-none"><code class="language-none">Student stu1 &#x3D; new Student() &#123; Id &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;Student stu2 &#x3D; new Student() &#123; Id &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;Student stu3 &#x3D; new Student() &#123; Id &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;Action action1 &#x3D; new Action(stu1.DoHomeWork);Action action2 &#x3D; new Action(stu2.DoHomeWork);Action action3 &#x3D; new Action(stu3.DoHomeWork);action1.BeginInvoke(null,null);class Student&#123;    public int Id &#123; get; set; &#125;    public ConsoleColor PenColor &#123; get; set; &#125;    public void DoHomeWork()    &#123;        Console.ForegroundColor &#x3D; this.PenColor;        for(int i &#x3D; 0; i &lt; 5; i++)        &#123;            Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s)&quot;,this.Id,i);            Thread.Sleep(1000);        &#125;            &#125;&#125;</code></pre><h2 id="委托的高级使用-显式异步调用Thread"><a href="#委托的高级使用-显式异步调用Thread" class="headerlink" title="委托的高级使用-显式异步调用Thread"></a>委托的高级使用-显式异步调用Thread</h2><pre class="language-none"><code class="language-none">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more informationStudent stu1 &#x3D; new Student() &#123; Id &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;Student stu2 &#x3D; new Student() &#123; Id &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;Student stu3 &#x3D; new Student() &#123; Id &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;Thread thread1 &#x3D; new Thread(new ThreadStart(stu1.DoHomeWork));Thread thread2 &#x3D; new Thread(new ThreadStart(stu2.DoHomeWork));Thread thread3 &#x3D; new Thread(new ThreadStart(stu3.DoHomeWork));thread1.Start();thread2.Start();thread3.Start();class Student&#123;    public int Id &#123; get; set; &#125;    public ConsoleColor PenColor &#123; get; set; &#125;    public void DoHomeWork()    &#123;        Console.ForegroundColor &#x3D; this.PenColor;        for(int i &#x3D; 0; i &lt; 5; i++)        &#123;            Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s)&quot;,this.Id,i);            Thread.Sleep(1000);        &#125;            &#125;&#125;</code></pre><h2 id="委托的高级使用-显式异步调用Task"><a href="#委托的高级使用-显式异步调用Task" class="headerlink" title="委托的高级使用-显式异步调用Task"></a>委托的高级使用-显式异步调用Task</h2><pre class="language-none"><code class="language-none">&#x2F;&#x2F; See https:&#x2F;&#x2F;aka.ms&#x2F;new-console-template for more informationStudent stu1 &#x3D; new Student() &#123; Id &#x3D; 1, PenColor &#x3D; ConsoleColor.Yellow &#125;;Student stu2 &#x3D; new Student() &#123; Id &#x3D; 2, PenColor &#x3D; ConsoleColor.Green &#125;;Student stu3 &#x3D; new Student() &#123; Id &#x3D; 3, PenColor &#x3D; ConsoleColor.Red &#125;;Task task1 &#x3D; new Task(new Action(stu1.DoHomeWork));Task task2 &#x3D; new Task(new Action(stu2.DoHomeWork));Task task3 &#x3D; new Task(new Action(stu3.DoHomeWork));task1.Start();task2.Start();task3.Start();class Student&#123;    public int Id &#123; get; set; &#125;    public ConsoleColor PenColor &#123; get; set; &#125;    public void DoHomeWork()    &#123;        Console.ForegroundColor &#x3D; this.PenColor;        for(int i &#x3D; 0; i &lt; 5; i++)        &#123;            Console.WriteLine(&quot;Student &#123;0&#125; doing homework &#123;1&#125; hour(s)&quot;,this.Id,i);            Thread.Sleep(1000);        &#125;            &#125;&#125;</code></pre><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p>Datetime.now与Datetime.Utcnow的区别在于前一个带有时区  </p><h2 id="委托的缺陷"><a href="#委托的缺陷" class="headerlink" title="委托的缺陷"></a>委托的缺陷</h2><ol><li>方法级别的紧耦合，工作中要慎之又慎</li><li>使可读性下降，debug的难度增加</li><li>把委托回调，异步调用和多线程纠缠在一起，会让代码变得难以维护与阅读</li><li>委托使用不当有可能造成内存泄漏和程序性能下降</li></ol><h2 id="接口在一定的层次上代替委托"><a href="#接口在一定的层次上代替委托" class="headerlink" title="接口在一定的层次上代替委托"></a>接口在一定的层次上代替委托</h2><p>java没有委托，但是具有接口。依旧可以完成所有任务。接口比委托更加使用的上舒服  </p><h1 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h1><h1 id="三、特性"><a href="#三、特性" class="headerlink" title="三、特性"></a>三、特性</h1><p>delegate——-相当于函数指针的升级版</p><pre class="language-none"><code class="language-none"></code></pre><h1 id="一、类class"><a href="#一、类class" class="headerlink" title="一、类class"></a>一、类class</h1><p>class.fun()———-这个是调用使用了方法<br>class.fun ———–指示到这个方法</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 委托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#继承学习-学习日志（2）</title>
      <link href="/2022/09/05/C-%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%882%EF%BC%89/"/>
      <url>/2022/09/05/C-%E7%BB%A7%E6%89%BF%E5%AD%A6%E4%B9%A0-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>学习继承<br>面向对象的三大特性，封装继承多态</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><ol><li>优化代码结构</li><li>提高代码的复用性</li><li>为多态提供前提</li></ol><h2 id="继承语法格式"><a href="#继承语法格式" class="headerlink" title="继承语法格式"></a>继承语法格式</h2><p>子类继承父类，用用”：“冒号关键字符<br>class 子类：父类<br>{<br>    &#x2F;&#x2F;类成员<br>}<br>This关键字表示当前类<br>Base是上传到父类来处理</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;父类class Hero&#123;private string heroName;private inr attack;&#x2F;&#x2F;父类的构造方法public Hero () &#123;&#125;public Hero (string m_heroName.int m_attack)&#123;this.heroName&#x3D;m_heroName;this.attack&#x3D;m_attack;&#125;&#x2F;&#x2F;父类的方法public string HeroName&#123;get &#123;return HeroName;&#125;set &#123;heroName&#x3D;value;&#125;&#125;public int Attack&#123;get &#123;return Attack;&#125;set &#123;attack&#x3D;value;&#125;&#125;&#125;&#x2F;&#x2F;子类class Luka:Hero&#123;public Luka()&#123;&#125;public Luka(string m_heroName.int m_attack):base(string m_heroName.int m_attack)&#123;&#125;public void Suishidaji()&#123;Console.WriteLine(&quot;随时打击&quot;);&#125;&#125;</code></pre><h2 id="子类继承父类的关系"><a href="#子类继承父类的关系" class="headerlink" title="子类继承父类的关系"></a>子类继承父类的关系</h2><p>父类中的字段，用private修饰的字段，我们在子类中无法访问<br>public修饰，子类可以访问。通过<em>base.字段名</em>的方式访问<br>大部分（80%是private）<br>父类中的属性，用private修饰的属性，我们在子类中无法访问<br>public修饰，子类可以访问。通过<em>base.属性名</em>的方式访问<br>大部分（80%是public）<br>父类中的普通方法，用private修饰的普通方法，我们在子类中无法访问<br>public修饰，子类可以访问。通过<em>base.方法名</em>的方式访问  </p><p>父类中的构造方法，用private修饰的字段，我们在子类中无法访问<br>public修饰，子类可以访问。通过<em>base（）</em>的方式访问<br>大部分（99%是public）</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basler语法学习</title>
      <link href="/2022/09/05/Basler%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/05/Basler%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Basler语法学习</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="基础设备"><a href="#基础设备" class="headerlink" title="基础设备"></a>基础设备</h2><h3 id="basler设备的查找"><a href="#basler设备的查找" class="headerlink" title="basler设备的查找"></a>basler设备的查找</h3><h3 id="第一个设备的操作"><a href="#第一个设备的操作" class="headerlink" title="第一个设备的操作"></a>第一个设备的操作</h3><pre class="language-none"><code class="language-none"> &#x2F;&#x2F;声明一个设备  PYLON_DEVICE_HANDLE hDev &#x3D; new PYLON_DEVICE_HANDLE();          &#x2F;* Handle for the pylon device. *&#x2F;  try            &#123;                uint numDevices;    &#x2F;* Number of devices available. *&#x2F;#if DEBUG                &#x2F;* This is a special debug setting needed only for GigE cameras.                See &#39;Building Applications with pylon&#39; in the programmer&#39;s guide. *&#x2F;                Environment.SetEnvironmentVariable(&quot;PYLON_GIGE_HEARTBEAT&quot;, &quot;300000&quot; &#x2F;*ms*&#x2F;);#endif                &#x2F;* Before using any pylon methods, the pylon runtime must be initialized. *&#x2F;                &#x2F;&#x2F;Pylon初始化                Pylon.Initialize();                &#x2F;* Enumerate all camera devices. You must call                Pylon.EnumerateDevices() before creating a device.                  枚举设备获得设备数量*&#x2F;                numDevices &#x3D; Pylon.EnumerateDevices();                if (0 &#x3D;&#x3D; numDevices)                &#123;                    throw new Exception(&quot;No devices found.&quot;);                &#125;                &#x2F;*hDev设为第一个设备的引用 Get a handle for the first device found.  *&#x2F;                hDev &#x3D; Pylon.CreateDeviceByIndex(0);                &#x2F;*在使用设备前打开此设备                 cPylonAccessModeControl&#x3D;&#x3D;1 Write access to device features is allowed.                cPylonAccessModeStream &#x3D; 2 Stream grabber access is allowed.                 ´Ë´¦Ê¹ÓÃÎ»»òÔËËã£¬¸ù¾ÝÔËËãµÄ½á¹ûµÃµ½ÏàÓ¦µÄÄ£Ê½¡£                PYLONC_ACCESS_MODE_CONTROL - Allows to read or write camera parameters to configure the camera.                 PYLONC_ACCESS_MODE_STREAM - Allows to read image data from the camera&#39;s stream grabber object.                 PYLONC_ACCESS_MODE_EVENT - Allows to read event data from the camera&#39;s stream grabber object.                 PYLONC_ACCESS_MODE_EXCLUSIVE - Allows exclusive access. When this flag is specified no other application may access the camera.                 PYLONC_ACCESS_MODE_MONITOR - Allows only read access. This flag cannot be combined with any other flags.                 It is typically used in Multicast&#x2F;Broadcast applications with GigE cameras. You can pass one or more flags.                 If you pass more than one flag you can combine them using the &#39;or&#39; operator.                 Before using the device, it must be opened. Open it for configuring                parameters and for grabbing images. *&#x2F;                Pylon.DeviceOpen(hDev, Pylon.cPylonAccessModeControl | Pylon.cPylonAccessModeStream);                &#x2F;* Print out the name of the camera we are using. *&#x2F;                &#123;                    bool isReadable;                    isReadable &#x3D; Pylon.DeviceFeatureIsReadable(hDev, &quot;DeviceModelName&quot;);                    if (isReadable)                    &#123;                        string name &#x3D; Pylon.DeviceFeatureToString(hDev, &quot;DeviceModelName&quot;);                        Console.WriteLine(&quot;Using camera &#123;0&#125;&quot;, name);                    &#125;                &#125;</code></pre><h3 id="多个设备的批量设置"><a href="#多个设备的批量设置" class="headerlink" title="多个设备的批量设置"></a>多个设备的批量设置</h3><pre class="language-none"><code class="language-none">        const uint MAX_NUM_DEVICES &#x3D; 2;        const uint NUM_BUFFERS &#x3D; 1;        &#x2F;* Number of buffers used for grabbing. *&#x2F;        const uint GIGE_PACKET_SIZE &#x3D; 1500; &#x2F;* Size of one Ethernet packet. *&#x2F;        const uint GIGE_PROTOCOL_OVERHEAD &#x3D; 36;   &#x2F;* Total number of bytes of protocol overhead. *&#x2F;        const uint AllGroupMask &#x3D; 0xffffffff;       &#x2F;&#x2F;&#x2F; &lt;summary&gt;        &#x2F;&#x2F;&#x2F; The main entry point for the application.        &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;        static void Main()        &#123;            &#x2F;* Use a random number as the device key. *&#x2F;            uint DeviceKey &#x3D; (uint)(new Random()).Next(int.MaxValue);            &#x2F;* In this sample all cameras belong to the same group. *&#x2F;            const uint GroupKey &#x3D; 0x24;            PYLON_DEVICE_HANDLE[] hDev &#x3D; new PYLON_DEVICE_HANDLE[MAX_NUM_DEVICES];        &#x2F;* Handles for the pylon devices. *&#x2F;            for (int deviceIndex &#x3D; 0; deviceIndex &lt; MAX_NUM_DEVICES; ++deviceIndex)            &#123;                hDev[deviceIndex] &#x3D; new PYLON_DEVICE_HANDLE();            &#125;            try            &#123;                uint numDevicesEnumerated;    &#x2F;* Number of the devices connected to this PC. *&#x2F;                uint numDevicesToUse;         &#x2F;* Number of the devices to use in this sample. *&#x2F;                bool isAvail;                 &#x2F;* Used for checking feature availability. *&#x2F;                bool isReady;                 &#x2F;* Used as an output parameter. *&#x2F;                int i;                        &#x2F;* Counter. *&#x2F;                uint deviceIndex;             &#x2F;* Index of device used in the following variables. *&#x2F;                PYLON_WAITOBJECTS_HANDLE wos; &#x2F;* Wait objects. *&#x2F;                &#x2F;* These are camera specific variables: *&#x2F;                PYLON_STREAMGRABBER_HANDLE[] hGrabber &#x3D; new PYLON_STREAMGRABBER_HANDLE[MAX_NUM_DEVICES]; &#x2F;* Handle for the pylon stream grabber. *&#x2F;                PYLON_WAITOBJECT_HANDLE[]    hWait &#x3D; new PYLON_WAITOBJECT_HANDLE[MAX_NUM_DEVICES];       &#x2F;* Handle used for waiting for a grab to be finished. *&#x2F;                uint[]                       payloadSize &#x3D; new uint[MAX_NUM_DEVICES];                    &#x2F;* Size of an image frame in bytes. *&#x2F;                uint[]                       nStreams &#x3D; new uint[MAX_NUM_DEVICES];                       &#x2F;* The number of streams provided by the device. *&#x2F;                PYLON_STREAMBUFFER_HANDLE[]  hBuffer &#x3D; new PYLON_STREAMBUFFER_HANDLE[MAX_NUM_DEVICES];                PylonBuffer&lt;Byte&gt;[]          buffer &#x3D; new PylonBuffer&lt;Byte&gt;[MAX_NUM_DEVICES];#if DEBUG                &#x2F;* This is a special debug setting needed only for GigE cameras.                See &#39;Building Applications with pylon&#39; in the Programmer&#39;s Guide. *&#x2F;                Environment.SetEnvironmentVariable(&quot;PYLON_GIGE_HEARTBEAT&quot;, &quot;300000&quot; &#x2F;*ms*&#x2F;);#endif                &#x2F;* Before using any pylon methods, the pylon runtime must be initialized. *&#x2F;                Pylon.Initialize();                &#x2F;* Enumerate all camera devices. You must call                PylonEnumerateDevices() before creating a device. *&#x2F;                numDevicesEnumerated &#x3D; Pylon.EnumerateDevices();                if (numDevicesEnumerated &#x3D;&#x3D; 0)                &#123;                    Pylon.Terminate();                    Console.Error.WriteLine(&quot;No devices found!&quot;);                    Console.Error.WriteLine(&quot;\nPress enter to exit.&quot;);                    Console.ReadLine();                    return;                &#125;                &#x2F;* Create wait objects. This must be done outside of the loop. *&#x2F;                wos &#x3D; Pylon.WaitObjectsCreate();                &#x2F;* Open cameras and set parameter *&#x2F;                deviceIndex &#x3D; 0;                for (uint enumeratedDeviceIndex &#x3D; 0; enumeratedDeviceIndex &lt; numDevicesEnumerated; ++enumeratedDeviceIndex)                &#123;                    &#x2F;* only open GigE devices *&#x2F;                    PYLON_DEVICE_INFO_HANDLE hDI &#x3D; Pylon.GetDeviceInfoHandle(enumeratedDeviceIndex);                    if (Pylon.DeviceInfoGetPropertyValueByName(hDI, Pylon.cPylonDeviceInfoDeviceClassKey) !&#x3D; &quot;BaslerGigE&quot;)                    &#123;                        continue;                    &#125;                    &#x2F;* Get handles for the devices. *&#x2F;                    hDev[deviceIndex] &#x3D; Pylon.CreateDeviceByIndex((uint)enumeratedDeviceIndex);                    &#x2F;* Before using the device, it must be opened. Open it for configuring                    parameters and for grabbing images. *&#x2F;                    Pylon.DeviceOpen(hDev[deviceIndex], Pylon.cPylonAccessModeControl | Pylon.cPylonAccessModeStream);                    &#x2F;* Print out the name of the camera we are using. *&#x2F;                    Console.WriteLine(&quot;Using camera &#39;&#123;0&#125;&#39;&quot;, Pylon.DeviceInfoGetPropertyValueByName(hDI, Pylon.cPylonDeviceInfoModelNameKey));                    isAvail &#x3D; Pylon.DeviceFeatureIsReadable(hDev[deviceIndex], &quot;ActionControl&quot;);                    if (!isAvail)                    &#123;                        throw new Exception(&quot;Device doesn&#39;t support the Action Command&quot;);                    &#125;                    &#x2F;* Configure the first action *&#x2F;                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;ActionSelector&quot;, 1);                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;ActionDeviceKey&quot;, DeviceKey);                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;ActionGroupKey&quot;, GroupKey);                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;ActionGroupMask&quot;, AllGroupMask);                    &#x2F;* Set the pixel format to Mono8, where gray values will be output as 8 bit values for each pixel. *&#x2F;                    &#x2F;* ... Check first to see if the device supports the Mono8 format. *&#x2F;                    isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev[deviceIndex], &quot;EnumEntry_PixelFormat_Mono8&quot;);                    if (!isAvail)                    &#123;                        &#x2F;* Feature is not available. *&#x2F;                        throw new Exception(&quot;Device doesn&#39;t support the Mono8 pixel format.&quot;);                    &#125;                    &#x2F;* ... Set the pixel format to Mono8. *&#x2F;                    Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;PixelFormat&quot;, &quot;Mono8&quot;);                    &#x2F;* Disable acquisition start trigger if available *&#x2F;                    isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev[deviceIndex], &quot;EnumEntry_TriggerSelector_AcquisitionStart&quot;);                    if (isAvail)                    &#123;                        Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerSelector&quot;, &quot;AcquisitionStart&quot;);                        Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerMode&quot;, &quot;Off&quot;);                    &#125;                    &#x2F;* Disable line1 trigger if available *&#x2F;                    isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev[deviceIndex], &quot;EnumEntry_TriggerSelector_Line1&quot;);                    if (isAvail)                    &#123;                        Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerSelector&quot;, &quot;Line1&quot;);                        Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerMode&quot;, &quot;Off&quot;);                    &#125;                    &#x2F;* Enable frame start trigger with first action *&#x2F;                    Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerSelector&quot;, &quot;FrameStart&quot;);                    Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerMode&quot;, &quot;On&quot;);                    Pylon.DeviceFeatureFromString(hDev[deviceIndex], &quot;TriggerSource&quot;, &quot;Action1&quot;);                    &#x2F;* For GigE cameras, we recommend increasing the packet size for better                        performance. When the network adapter supports jumbo frames, set the packet                        size to a value &gt; 1500, e.g., to 8192. In this sample, we only set the packet size                        to 1500.                        We also set the Inter-Packet and the Frame Transmission delay                        so the switch can line up packets better.                    *&#x2F;                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;GevSCPSPacketSize&quot;, GIGE_PACKET_SIZE);                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;GevSCPD&quot;, (GIGE_PACKET_SIZE + GIGE_PROTOCOL_OVERHEAD) * (MAX_NUM_DEVICES - 1));                    Pylon.DeviceSetIntegerFeature(hDev[deviceIndex], &quot;GevSCFTD&quot;, (GIGE_PACKET_SIZE + GIGE_PROTOCOL_OVERHEAD) * deviceIndex);                    &#x2F;* one device opened *&#x2F;                    ++deviceIndex;                &#125;</code></pre><h3 id="显示设备名称"><a href="#显示设备名称" class="headerlink" title="显示设备名称"></a>显示设备名称</h3><p> 显示设备的名称</p><pre class="language-none"><code class="language-none">&#x2F;* Print out the name of the camera we are using. *&#x2F;               &#123;                   bool isReadable;                   isReadable &#x3D; Pylon.DeviceFeatureIsReadable(hDev, &quot;DeviceModelName&quot;);                   if (isReadable)                   &#123;                       string name &#x3D; Pylon.DeviceFeatureToString(hDev, &quot;DeviceModelName&quot;);                       Console.WriteLine(&quot;Using camera &#123;0&#125;&quot;, name);                   &#125;               &#125;</code></pre><h3 id="设置拍摄图片模式"><a href="#设置拍摄图片模式" class="headerlink" title="设置拍摄图片模式"></a>设置拍摄图片模式</h3><pre class="language-none"><code class="language-none">&#x2F;* Set the pixel format to Mono8, where gray values will be output as 8 bit values for each pixel. *&#x2F;                &#x2F;* ... Check first to see if the device supports the Mono8 format. *&#x2F;                isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_PixelFormat_Mono8&quot;);                if (!isAvail)                &#123;                    &#x2F;* Feature is not available. *&#x2F;                    throw new Exception(&quot;Device doesn&#39;t support the Mono8 pixel format.&quot;);                &#125;                &#x2F;* ... Set the pixel format to Mono8. *&#x2F;                Pylon.DeviceFeatureFromString(hDev, &quot;PixelFormat&quot;, &quot;Mono8&quot;);</code></pre><h3 id="设置拍摄采集模式"><a href="#设置拍摄采集模式" class="headerlink" title="设置拍摄采集模式"></a>设置拍摄采集模式</h3><pre class="language-none"><code class="language-none">&#x2F;* Check the available camera trigger mode(s) to select the appropriate one: acquisition start trigger mode (used by previous cameras;                do not confuse with acquisition start command) or frame start trigger mode (equivalent to previous acquisition start trigger mode). *&#x2F;                isAvailAcquisitionStart &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_TriggerSelector_AcquisitionStart&quot;);                isAvailFrameStart &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_TriggerSelector_FrameStart&quot;);                &#x2F;* Check to see if the camera implements the acquisition start trigger mode only.                优先是frame start （此时只有在半双工的时候才能打开frame burst帧突发），其次选择Acquisition Start。两种模式不能并存                *&#x2F;                if (isAvailAcquisitionStart &amp;&amp; !isAvailFrameStart)                &#123;                    &#x2F;* Camera uses the acquisition start trigger as the only trigger mode. *&#x2F;                    Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSelector&quot;, &quot;AcquisitionStart&quot;);                    Pylon.DeviceFeatureFromString(hDev, &quot;TriggerMode&quot;, &quot;On&quot;);                    triggerSelectorValue &#x3D; &quot;AcquisitionStart&quot;;                &#125;                else                &#123;                    &#x2F;* Camera may have the acquisition start trigger mode and the frame start trigger mode implemented.                    In this case, the acquisition trigger mode must be switched off. *&#x2F;                    if (isAvailAcquisitionStart)                    &#123;                        Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSelector&quot;, &quot;AcquisitionStart&quot;);                        Pylon.DeviceFeatureFromString(hDev, &quot;TriggerMode&quot;, &quot;Off&quot;);                    &#125;                    &#x2F;* Disable frame burst start trigger if available *&#x2F;                    isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_TriggerSelector_FrameBurstStart&quot;);                    if (isAvail)                    &#123;                        Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSelector&quot;, &quot;FrameBurstStart&quot;);                        Pylon.DeviceFeatureFromString(hDev, &quot;TriggerMode&quot;, &quot;Off&quot;);                    &#125;                    &#x2F;* To trigger each single frame by software or external hardware trigger: Enable the frame start trigger mode. *&#x2F;                    Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSelector&quot;, &quot;FrameStart&quot;);                    Pylon.DeviceFeatureFromString(hDev, &quot;TriggerMode&quot;, &quot;On&quot;);                &#125;                &#x2F;* Note: the trigger selector must be set to the appropriate trigger mode                before setting the trigger source or issuing software triggers.                Frame start trigger mode for newer cameras, acquisition start trigger mode for previous cameras.                 软件触发*&#x2F;                Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSelector&quot;, triggerSelectorValue);                &#x2F;* Enable software triggering.                 持续采集*&#x2F;                &#x2F;* ... Select the software trigger as the trigger source. *&#x2F;                Pylon.DeviceFeatureFromString(hDev, &quot;TriggerSource&quot;, &quot;Software&quot;);                &#x2F;* When using software triggering, the Continuous frame mode should be used. Once                   acquisition is started, the camera sends one image each time a software trigger is                   issued. *&#x2F;                Pylon.DeviceFeatureFromString(hDev, &quot;AcquisitionMode&quot;, &quot;Continuous&quot;);</code></pre><h3 id="设置拍摄数据包大小"><a href="#设置拍摄数据包大小" class="headerlink" title="设置拍摄数据包大小"></a>设置拍摄数据包大小</h3><pre class="language-none"><code class="language-none">&#x2F;* For GigE cameras, we recommend increasing the packet size for better   performance. If the network adapter supports jumbo frames, set the packet   size to a value &gt; 1500, e.g., to 8192. In this sample, we only set the packet size   to 1500. *&#x2F;&#x2F;* ... Check first to see if the GigE camera packet size parameter is supported and if it is writable. *&#x2F;isAvail &#x3D; Pylon.DeviceFeatureIsWritable(hDev, &quot;GevSCPSPacketSize&quot;);if (isAvail)&#123;    &#x2F;* ... The device supports the packet size feature. Set a value. *&#x2F;    Pylon.DeviceSetIntegerFeature(hDev, &quot;GevSCPSPacketSize&quot;, 1500);&#125;</code></pre><h3 id="设置拍摄块"><a href="#设置拍摄块" class="headerlink" title="设置拍摄块"></a>设置拍摄块</h3><p>摄像机可以生成关于每个图像的特定信息，例如帧</p><p>计数器、时间戳和CRC校验和，作为数据“块”附加到图像数据。此示例演示了如何启用块功能，以及如何获取</p><p>以及如何处理附加数据。当相机处于块模式时，它传输数据块</p><p>其被划分成块。第一块总是图像数据。当块特征被启用时，</p><p>图像数据块之后是包含由块特征生成的信息的块。<br>本示例还演示了如何使用软件触发器。使用两个缓冲器。一旦缓冲器被填充，</p><p>在处理接收到的缓冲器之前触发下一帧的获取。这种方法允许：</p><p>在前一图像的处理进行的同时执行图像获取。</p><pre class="language-none"><code class="language-none">&#x2F;* Before enabling individual chunks, the chunk mode in general must be activated. *&#x2F;isAvail &#x3D; Pylon.DeviceFeatureIsWritable(hDev, &quot;ChunkModeActive&quot;);if (!isAvail)&#123;    throw new Exception(&quot;The device doesn&#39;t support the chunk mode.&quot;);&#125;&#x2F;* Activate the chunk mode. *&#x2F;Pylon.DeviceSetBooleanFeature(hDev, &quot;ChunkModeActive&quot;, true);&#x2F;* Enable some individual chunks... *&#x2F;&#x2F;* ... The frame counter chunk feature. *&#x2F;&#x2F;* Is the chunk feature available? *&#x2F;isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_ChunkSelector_Framecounter&quot;);if (isAvail)&#123;    &#x2F;* Select the frame counter chunk feature. *&#x2F;    Pylon.DeviceFeatureFromString(hDev, &quot;ChunkSelector&quot;, &quot;Framecounter&quot;);    &#x2F;* Can the chunk feature be activated? *&#x2F;    isAvail &#x3D; Pylon.DeviceFeatureIsWritable(hDev, &quot;ChunkEnable&quot;);    if (isAvail)    &#123;        &#x2F;* Activate the chunk feature. *&#x2F;        Pylon.DeviceSetBooleanFeature(hDev, &quot;ChunkEnable&quot;, true);    &#125;&#125;</code></pre><h4 id="设置块chunks的内容"><a href="#设置块chunks的内容" class="headerlink" title="设置块chunks的内容"></a>设置块chunks的内容</h4><pre class="language-none"><code class="language-none">&#x2F;&#x2F;设置循环冗余校验（Cyclic Redundancy Check， CRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。                &#x2F;* ... The CRC checksum chunk feature. *&#x2F;                &#x2F;*  Note: Enabling the CRC checksum chunk feature is not a prerequisite for using                   chunks. Chunks can also be handled when the CRC checksum chunk feature is disabled. *&#x2F;                isAvail &#x3D; Pylon.DeviceFeatureIsAvailable(hDev, &quot;EnumEntry_ChunkSelector_PayloadCRC16&quot;);                if (isAvail)                &#123;                    &#x2F;* Select the CRC checksum chunk feature. *&#x2F;                    Pylon.DeviceFeatureFromString(hDev, &quot;ChunkSelector&quot;, &quot;PayloadCRC16&quot;);                    &#x2F;* Can the chunk feature be activated? *&#x2F;                    isAvail &#x3D; Pylon.DeviceFeatureIsWritable(hDev, &quot;ChunkEnable&quot;);                    if (isAvail)                    &#123;                        &#x2F;* Activate the chunk feature. *&#x2F;                        Pylon.DeviceSetBooleanFeature(hDev, &quot;ChunkEnable&quot;, true);                    &#125;                &#125;</code></pre><h4 id="设置块解析器chunk-parser"><a href="#设置块解析器chunk-parser" class="headerlink" title="设置块解析器chunk parser"></a>设置块解析器chunk parser</h4><pre class="language-none"><code class="language-none">&#x2F;* The data block containing the image chunk and the other chunks has a self-descriptive layout.   A chunk parser is used to extract the appended chunk data from the grabbed image frame.   Create a chunk parser. *&#x2F;hChunkParser &#x3D; Pylon.DeviceCreateChunkParser(hDev);if (!hChunkParser.IsValid)&#123;    &#x2F;* The transport layer doesn&#39;t provide a chunk parser. *&#x2F;    throw new Exception(&quot;No chunk parser available.&quot;);&#125;</code></pre><h4 id="设置并分配拍摄流与缓冲区"><a href="#设置并分配拍摄流与缓冲区" class="headerlink" title="设置并分配拍摄流与缓冲区"></a>设置并分配拍摄流与缓冲区</h4><pre class="language-none"><code class="language-none">&#x2F;* Image grabbing is done using a stream grabber.                  A device may be able to provide different streams. A separate stream grabber must                  be used for each stream. In this sample, we create a stream grabber for the default                  stream, i.e., the first stream ( index &#x3D;&#x3D; 0 ).                  *&#x2F;                &#x2F;* Get the number of streams supported by the device and the transport layer. *&#x2F;                nStreams &#x3D; Pylon.DeviceGetNumStreamGrabberChannels(hDev);                if (nStreams &lt; 1)                &#123;                    throw new Exception(&quot;The transport layer doesn&#39;t support image streams.&quot;);                &#125;                &#x2F;* Create and open a stream grabber for the first channel. *&#x2F;                hGrabber &#x3D; Pylon.DeviceGetStreamGrabber(hDev, 0);                Pylon.StreamGrabberOpen(hGrabber);                &#x2F;* Get a handle for the stream grabber&#39;s wait object. The wait object                   allows waiting for buffers to be filled with grabbed data. *&#x2F;                hWait &#x3D; Pylon.StreamGrabberGetWaitObject(hGrabber);                &#x2F;* Determine the required size of the grab buffer. Since activating chunks will increase the                   payload size and thus the required buffer size, do this after enabling the chunks. *&#x2F;                payloadSize &#x3D; checked((uint)Pylon.DeviceGetIntegerFeature(hDev, &quot;PayloadSize&quot;));                &#x2F;* We must tell the stream grabber the number and size of the buffers                    we are using. *&#x2F;                &#x2F;* .. We will not use more than NUM_BUFFERS for grabbing. *&#x2F;                Pylon.StreamGrabberSetMaxNumBuffer(hGrabber, NUM_BUFFERS);                &#x2F;* .. We will not use buffers bigger than payloadSize bytes. *&#x2F;                Pylon.StreamGrabberSetMaxBufferSize(hGrabber, payloadSize);                &#x2F;*  Allocate the resources required for grabbing. After this, critical parameters                    that impact the payload size must not be changed until FinishGrab() is called. *&#x2F;                Pylon.StreamGrabberPrepareGrab(hGrabber);                 &#x2F;*                将缓冲区输入流抓取器的输入队列。对于每个缓冲区，API允许传递整数作为附加上下文信息。                抓取完成后，该整数将返回不变。在我们的示例中，我们使用缓冲区的索引作为上下文信息。                Before using the buffers for grabbing, they must be registered at                   the stream grabber. For each registered buffer, a buffer handle                   is returned. After registering, these handles are used instead of the                   buffer objects pointers. The buffer objects are held in a dictionary,                   that provides access to the buffer using a handle as key.                 *&#x2F;                buffers &#x3D; new Dictionary&lt;PYLON_STREAMBUFFER_HANDLE, PylonBuffer&lt;Byte&gt;&gt;();                for (i &#x3D; 0; i &lt; NUM_BUFFERS; ++i)                &#123;                    PylonBuffer&lt;Byte&gt; buffer &#x3D; new PylonBuffer&lt;byte&gt;(payloadSize, true);                    PYLON_STREAMBUFFER_HANDLE handle &#x3D; Pylon.StreamGrabberRegisterBuffer(hGrabber, ref buffer);                    buffers.Add(handle, buffer);                &#125;                &#x2F;* Feed the buffers into the stream grabber&#39;s input queue. For each buffer, the API                   allows passing in an integer as additional context information. This integer                   will be returned unchanged when the grab is finished. In our example, we use the index of the                   buffer as context information. *&#x2F;                i &#x3D; 0;                foreach (KeyValuePair&lt;PYLON_STREAMBUFFER_HANDLE, PylonBuffer&lt;Byte&gt;&gt; pair in buffers)                &#123;                    Pylon.StreamGrabberQueueBuffer(hGrabber, pair.Key, i++);                &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Basler </category>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basler </tag>
            
            <tag> .NET </tag>
            
            <tag> c# </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础学习-1</title>
      <link href="/2022/09/04/C-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/2022/09/04/C-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>自己真正的编写自己的学习博客</p><h1 id="方法的类型"><a href="#方法的类型" class="headerlink" title="方法的类型"></a>方法的类型</h1><h2 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h2><p>方法就是函数。普通方法就是函数。在类中就是对于方法的“行为”进行描述。<br></p><h3 id="普通方法的语法格式"><a href="#普通方法的语法格式" class="headerlink" title="普通方法的语法格式"></a>普通方法的语法格式</h3><p>访问修饰符 返回值 方法名（参数列表）<br><br>{<br>    方法的具体功能<br>}  </p><p>class Person<br>{<br>    private string name;<br>    private int age;<br>    public string Name<br>    {<br>        get{return name};<br>        set{name&#x3D;value};<br>    }<br>    &#x2F;&#x2F;后面都可以使用Name进行取值与赋值<br>}<br>Person p1&#x3D;new Person();<br>p1.Name&#x3D;”zhangsan”;<br>name2&#x3D;p1.Name;</p><pre class="language-none"><code class="language-none">## 构造方法构造方法可以队实例化出来的对象进行初始化&lt;br&gt;### 构造方法的语法格式public 类名()&lt;br&gt;&#123;  构造函数代码  &#125;  1. 构造方法要用public修饰  2. 构造方法没有返回值，切连void也不能写  3. 构造方法的方法名必须与类名一样  4. 构造方法可以有重载  5. 构造方法如果没有编写过会自动增加一个空的构造方法，但是手动编写有参或者无参数的构造方法后就不会自动添加了</code></pre><p>class Person<br>{<br>    &#x2F;&#x2F;无参数的构造方法<br>    public Person()<br>    {<br>        zhanwei<br>    }<br>    &#x2F;&#x2F;两个参数的构造方法<br>    public Person(string name,int age)<br>    {<br>        this.name&#x3D;name;<br>        this.age&#x3D;atge;<br>    }<br>}<br>&#x2F;&#x2F;如何使用<br>Person p2&#x3D;new Person();<br>Person p3&#x3D;new Person(“monkey”,18);</p><pre class="language-none"><code class="language-none">### This关键字this 表示类内部的那个变量## 析构方法析构方法是常常用于清理一个对象与构造方法差不多是相反的东西### 析构方法的语法～类名()  &#123;  析构方法代码体;  &#125;  1. 析构方法没有任何参数2. 析构方法没有返回值与访问修饰符3. 析构方法由系统自动调用4. 析构方法可以不屑。</code></pre><p>&#x2F;&#x2F;构造语法<br>&#x2F;&#x2F;以后补充</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 基础学习 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>diyi</title>
      <link href="/2022/08/21/diyi/"/>
      <url>/2022/08/21/diyi/</url>
      
        <content type="html"><![CDATA[<p>自己完成的第一篇博客的认证<br>下面来测试一下各种markdown的基本语法</p><h1 id="第一部分-level-1"><a href="#第一部分-level-1" class="headerlink" title="第一部分 level 1"></a>第一部分 level 1</h1><p>输入 “mdi + tab” 会自动插入下面的图片标记<br>输入 “mdl + tab” 会自动生成下面的链接标记<br>是需要自己保存才会用自动改变吧  </p><p>怎么感觉使用有点卡顿吧<br>能够确定是需要保存才会展现出来,<br><br>两边的反应速度好像基本一致  </p><h2 id="倾斜-level-2"><a href="#倾斜-level-2" class="headerlink" title="倾斜 level 2"></a>倾斜 level 2</h2><p>展现<em>新的</em>一行<br></p><h2 id="加粗-level-2"><a href="#加粗-level-2" class="headerlink" title="加粗 level 2"></a>加粗 level 2</h2><p>新的<strong>展现</strong>一行</p><h2 id="引用语法-level-2"><a href="#引用语法-level-2" class="headerlink" title="引用语法 level 2"></a>引用语法 level 2</h2><blockquote><p>yinyong<br>deiwfh</p><blockquote><p>bfejsbf</p><blockquote><p>kdfe<br>dwad<br>fkefb<br>fbrehk<br>dfbjhwe</p></blockquote></blockquote></blockquote><h2 id="代码块展示-level-2"><a href="#代码块展示-level-2" class="headerlink" title="代码块展示 level 2"></a>代码块展示 level 2</h2><p>&#96;</p><html>    <head>        nishuoyiwoshuoyi    </head></html>`  <h2 id="围栏式代码块展示-level-2"><a href="#围栏式代码块展示-level-2" class="headerlink" title="围栏式代码块展示 level 2"></a>围栏式代码块展示 level 2</h2><pre class="language-none"><code class="language-none">&lt;html&gt;    &lt;head&gt;    nishuoyiwoshuoyi    &lt;&#x2F;head&gt;&lt;&#x2F;html&gt;</code></pre><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>这是一类分割线前</p><hr><p>这是一类分割线后，二类分割线后</p><hr><p>二类分割线后</p><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><ol><li>Cheiese</li><li>English</li><li>France</li></ol><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>这是一个链接<a href="https://zh.wikipedia.org/zh-tw/%E5%88%9D%E9%9F%B3%E6%9C%AA%E4%BE%86" title="miku殿下来了">守护最好的殿下</a></p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>一个带链接的图片（!<a href="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5" title="图片title">图片alt</a>）<br><a href="https://markdown.com.cn/"><img src="/assets/img/shiprock.jpg" alt="沙漠中的岩石图片" title="Shiprock"></a></p><p>##最后友情提示可以直接使用html的语法</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
